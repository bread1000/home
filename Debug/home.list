
home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a398  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800a548  0800a548  0001a548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa1c  0800aa1c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa1c  0800aa1c  0001aa1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa24  0800aa24  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa24  0800aa24  0001aa24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa28  0800aa28  0001aa28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800aa2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  200001e0  0800ac0c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  0800ac0c  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150da  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee8  00000000  00000000  000352ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  000381d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  00039470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027cd9  00000000  00000000  0003a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001896e  00000000  00000000  00062291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0612  00000000  00000000  0007abff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016b211  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006364  00000000  00000000  0016b264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a530 	.word	0x0800a530

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800a530 	.word	0x0800a530

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800101e:	463b      	mov	r3, r7
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <MX_ADC1_Init+0x98>)
 800102c:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <MX_ADC1_Init+0x9c>)
 800102e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001032:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001036:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_ADC1_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_ADC1_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <MX_ADC1_Init+0x98>)
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <MX_ADC1_Init+0xa0>)
 800105c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001066:	2201      	movs	r2, #1
 8001068:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_ADC1_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_ADC1_Init+0x98>)
 8001074:	2201      	movs	r2, #1
 8001076:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <MX_ADC1_Init+0x98>)
 800107a:	f000 ffcb 	bl	8002014 <HAL_ADC_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001084:	f000 fafc 	bl	8001680 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001088:	2303      	movs	r3, #3
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800108c:	2301      	movs	r3, #1
 800108e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001090:	2307      	movs	r3, #7
 8001092:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001094:	463b      	mov	r3, r7
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_ADC1_Init+0x98>)
 800109a:	f001 f969 	bl	8002370 <HAL_ADC_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010a4:	f000 faec 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200001fc 	.word	0x200001fc
 80010b4:	40012000 	.word	0x40012000
 80010b8:	0f000001 	.word	0x0f000001

080010bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a17      	ldr	r2, [pc, #92]	; (8001138 <HAL_ADC_MspInit+0x7c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d127      	bne.n	800112e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_ADC_MspInit+0x80>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a15      	ldr	r2, [pc, #84]	; (800113c <HAL_ADC_MspInit+0x80>)
 80010e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_ADC_MspInit+0x80>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <HAL_ADC_MspInit+0x80>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <HAL_ADC_MspInit+0x80>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_ADC_MspInit+0x80>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001116:	2308      	movs	r3, #8
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111a:	2303      	movs	r3, #3
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <HAL_ADC_MspInit+0x84>)
 800112a:	f001 fc35 	bl	8002998 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	; 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40012000 	.word	0x40012000
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000

08001144 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b36      	ldr	r3, [pc, #216]	; (8001238 <MX_GPIO_Init+0xf4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a35      	ldr	r2, [pc, #212]	; (8001238 <MX_GPIO_Init+0xf4>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b33      	ldr	r3, [pc, #204]	; (8001238 <MX_GPIO_Init+0xf4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <MX_GPIO_Init+0xf4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a2e      	ldr	r2, [pc, #184]	; (8001238 <MX_GPIO_Init+0xf4>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <MX_GPIO_Init+0xf4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <MX_GPIO_Init+0xf4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a27      	ldr	r2, [pc, #156]	; (8001238 <MX_GPIO_Init+0xf4>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <MX_GPIO_Init+0xf4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0308 	and.w	r3, r3, #8
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <MX_GPIO_Init+0xf4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a20      	ldr	r2, [pc, #128]	; (8001238 <MX_GPIO_Init+0xf4>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <MX_GPIO_Init+0xf4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2110      	movs	r1, #16
 80011ce:	481b      	ldr	r0, [pc, #108]	; (800123c <MX_GPIO_Init+0xf8>)
 80011d0:	f001 fd8e 	bl	8002cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	210d      	movs	r1, #13
 80011d8:	4819      	ldr	r0, [pc, #100]	; (8001240 <MX_GPIO_Init+0xfc>)
 80011da:	f001 fd89 	bl	8002cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011de:	2310      	movs	r3, #16
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <MX_GPIO_Init+0xf8>)
 80011f6:	f001 fbcf 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80011fa:	230d      	movs	r3, #13
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	480b      	ldr	r0, [pc, #44]	; (8001240 <MX_GPIO_Init+0xfc>)
 8001212:	f001 fbc1 	bl	8002998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121a:	2303      	movs	r3, #3
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_GPIO_Init+0xfc>)
 800122a:	f001 fbb5 	bl	8002998 <HAL_GPIO_Init>

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000
 8001240:	40020c00 	.word	0x40020c00

08001244 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_I2C1_Init+0x74>)
 800124a:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <MX_I2C1_Init+0x78>)
 800124c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 300000;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_I2C1_Init+0x74>)
 8001250:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <MX_I2C1_Init+0x7c>)
 8001252:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_I2C1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_I2C1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_I2C1_Init+0x74>)
 8001262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001266:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_I2C1_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_I2C1_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_I2C1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_I2C1_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001280:	480d      	ldr	r0, [pc, #52]	; (80012b8 <MX_I2C1_Init+0x74>)
 8001282:	f001 fd4f 	bl	8002d24 <HAL_I2C_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800128c:	f000 f9f8 	bl	8001680 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001290:	2100      	movs	r1, #0
 8001292:	4809      	ldr	r0, [pc, #36]	; (80012b8 <MX_I2C1_Init+0x74>)
 8001294:	f001 fe8a 	bl	8002fac <HAL_I2CEx_ConfigAnalogFilter>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800129e:	f000 f9ef 	bl	8001680 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012a2:	2100      	movs	r1, #0
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_I2C1_Init+0x74>)
 80012a6:	f001 febd 	bl	8003024 <HAL_I2CEx_ConfigDigitalFilter>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012b0:	f000 f9e6 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000244 	.word	0x20000244
 80012bc:	40005400 	.word	0x40005400
 80012c0:	000493e0 	.word	0x000493e0

080012c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a19      	ldr	r2, [pc, #100]	; (8001348 <HAL_I2C_MspInit+0x84>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d12b      	bne.n	800133e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_I2C_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a17      	ldr	r2, [pc, #92]	; (800134c <HAL_I2C_MspInit+0x88>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_I2C_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001302:	23c0      	movs	r3, #192	; 0xc0
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001306:	2312      	movs	r3, #18
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130a:	2301      	movs	r3, #1
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001312:	2304      	movs	r3, #4
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <HAL_I2C_MspInit+0x8c>)
 800131e:	f001 fb3b 	bl	8002998 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_I2C_MspInit+0x88>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_I2C_MspInit+0x88>)
 800132c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001330:	6413      	str	r3, [r2, #64]	; 0x40
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <HAL_I2C_MspInit+0x88>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	; 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40005400 	.word	0x40005400
 800134c:	40023800 	.word	0x40023800
 8001350:	40020400 	.word	0x40020400

08001354 <line_append>:

/*-----UART1-USB-------*/
/*-----UART2-MODUL-BLUETOOTH-----*/

void line_append(uint8_t value)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	if (value == '\r' || value == '\n')
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b0d      	cmp	r3, #13
 8001362:	d002      	beq.n	800136a <line_append+0x16>
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	2b0a      	cmp	r3, #10
 8001368:	d110      	bne.n	800138c <line_append+0x38>
	{
		// odebraliśmy znak końca linii
		if (line_length > 0)
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <line_append+0x60>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d01c      	beq.n	80013ac <line_append+0x58>
		{
			// jeśli bufor nie jest pusty to dodajemy 0 na końcu linii
			line_buffer[line_length] = '\0';
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <line_append+0x60>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <line_append+0x64>)
 8001378:	2100      	movs	r1, #0
 800137a:	54d1      	strb	r1, [r2, r3]
			// przetwarzamy dane
			printf("Otrzymano: %s\n", line_buffer);
 800137c:	490e      	ldr	r1, [pc, #56]	; (80013b8 <line_append+0x64>)
 800137e:	480f      	ldr	r0, [pc, #60]	; (80013bc <line_append+0x68>)
 8001380:	f005 fac8 	bl	8006914 <iprintf>
			// zaczynamy zbieranie danych od nowa
			line_length = 0;
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <line_append+0x60>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
		if (line_length > 0)
 800138a:	e00f      	b.n	80013ac <line_append+0x58>
		}
	}else{
		if (line_length >= LINE_MAX_LENGTH)
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <line_append+0x60>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b4f      	cmp	r3, #79	; 0x4f
 8001392:	d902      	bls.n	800139a <line_append+0x46>
		{
			// za dużo danych, usuwamy wszystko co odebraliśmy dotychczas
			line_length = 0;
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <line_append+0x60>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
		}
		// dopisujemy wartość do bufora
		line_buffer[line_length++] = value;
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <line_append+0x60>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	4904      	ldr	r1, [pc, #16]	; (80013b4 <line_append+0x60>)
 80013a2:	600a      	str	r2, [r1, #0]
 80013a4:	4904      	ldr	r1, [pc, #16]	; (80013b8 <line_append+0x64>)
 80013a6:	79fa      	ldrb	r2, [r7, #7]
 80013a8:	54ca      	strb	r2, [r1, r3]
	}
}
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200002ec 	.word	0x200002ec
 80013b8:	20000298 	.word	0x20000298
 80013bc:	0800a548 	.word	0x0800a548

080013c0 <__io_putchar>:

//This function enables using 'printf()' for sending data by uart
int __io_putchar(int ch)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
    if (ch == '\n')
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b0a      	cmp	r3, #10
 80013cc:	d109      	bne.n	80013e2 <__io_putchar+0x22>
    {
        uint8_t ch2 = '\r';
 80013ce:	230d      	movs	r3, #13
 80013d0:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);
 80013d2:	f107 010f 	add.w	r1, r7, #15
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295
 80013da:	2201      	movs	r2, #1
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <__io_putchar+0x3c>)
 80013de:	f003 ffd6 	bl	800538e <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80013e2:	1d39      	adds	r1, r7, #4
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	2201      	movs	r2, #1
 80013ea:	4804      	ldr	r0, [pc, #16]	; (80013fc <__io_putchar+0x3c>)
 80013ec:	f003 ffcf 	bl	800538e <HAL_UART_Transmit>
    return 1;
 80013f0:	2301      	movs	r3, #1
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200003ac 	.word	0x200003ac

08001400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001406:	f000 fd93 	bl	8001f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140a:	f000 f8c7 	bl	800159c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140e:	f7ff fe99 	bl	8001144 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001412:	f7ff ff17 	bl	8001244 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001416:	f000 fc8f 	bl	8001d38 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800141a:	f000 fab1 	bl	8001980 <MX_TIM2_Init>
  MX_RTC_Init();
 800141e:	f000 f935 	bl	800168c <MX_RTC_Init>
  MX_ADC1_Init();
 8001422:	f7ff fdf9 	bl	8001018 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001426:	f000 fb21 	bl	8001a6c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800142a:	f000 fcaf 	bl	8001d8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UART_Receive_IT(&huart1, &received, 1); //wlaczenie nasluchiwania na kanale UART

  //zegar dla czujnika odleglosci
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_1);
 800142e:	2100      	movs	r1, #0
 8001430:	484d      	ldr	r0, [pc, #308]	; (8001568 <main+0x168>)
 8001432:	f002 ff63 	bl	80042fc <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);
 8001436:	2104      	movs	r1, #4
 8001438:	484b      	ldr	r0, [pc, #300]	; (8001568 <main+0x168>)
 800143a:	f002 ff5f 	bl	80042fc <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800143e:	2108      	movs	r1, #8
 8001440:	4849      	ldr	r0, [pc, #292]	; (8001568 <main+0x168>)
 8001442:	f002 fe39 	bl	80040b8 <HAL_TIM_PWM_Start>

  //36 kHz signal IR diode
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001446:	2100      	movs	r1, #0
 8001448:	4848      	ldr	r0, [pc, #288]	; (800156c <main+0x16c>)
 800144a:	f002 fe35 	bl	80040b8 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*-------------czytanie co przychodzi z UART---------------*/
	  if (HAL_UART_Receive(&huart2, &read, 1, 0) == HAL_OK)
 800144e:	2300      	movs	r3, #0
 8001450:	2201      	movs	r2, #1
 8001452:	4947      	ldr	r1, [pc, #284]	; (8001570 <main+0x170>)
 8001454:	4847      	ldr	r0, [pc, #284]	; (8001574 <main+0x174>)
 8001456:	f004 f82c 	bl	80054b2 <HAL_UART_Receive>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d104      	bne.n	800146a <main+0x6a>
		  line_append(read);
 8001460:	4b43      	ldr	r3, [pc, #268]	; (8001570 <main+0x170>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff75 	bl	8001354 <line_append>

	  /*--------------VOLTAGE MEASUREMENT------------PA3*/
	  HAL_ADC_Start(&hadc1);
 800146a:	4843      	ldr	r0, [pc, #268]	; (8001578 <main+0x178>)
 800146c:	f000 fe16 	bl	800209c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001470:	f04f 31ff 	mov.w	r1, #4294967295
 8001474:	4840      	ldr	r0, [pc, #256]	; (8001578 <main+0x178>)
 8001476:	f000 fee3 	bl	8002240 <HAL_ADC_PollForConversion>

	  uint32_t value = HAL_ADC_GetValue(&hadc1);
 800147a:	483f      	ldr	r0, [pc, #252]	; (8001578 <main+0x178>)
 800147c:	f000 ff6b 	bl	8002356 <HAL_ADC_GetValue>
 8001480:	6178      	str	r0, [r7, #20]
	  float voltage = 3.3f * value / 4096.0f;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800157c <main+0x17c>
 8001490:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001494:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001580 <main+0x180>
 8001498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149c:	edc7 7a04 	vstr	s15, [r7, #16]

	  //printf("ADC = %lu (%.3f V)\n", value, voltage);
	  //HAL_Delay(250);

	  /*--------------CZUJNIK ODLEGLOSCI----------------*/
	  uint32_t start = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80014a0:	2100      	movs	r1, #0
 80014a2:	4831      	ldr	r0, [pc, #196]	; (8001568 <main+0x168>)
 80014a4:	f003 fa2c 	bl	8004900 <HAL_TIM_ReadCapturedValue>
 80014a8:	60f8      	str	r0, [r7, #12]
	  uint32_t stop = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_2);
 80014aa:	2104      	movs	r1, #4
 80014ac:	482e      	ldr	r0, [pc, #184]	; (8001568 <main+0x168>)
 80014ae:	f003 fa27 	bl	8004900 <HAL_TIM_ReadCapturedValue>
 80014b2:	60b8      	str	r0, [r7, #8]

	  distance = (stop - start) / 58;
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	4a32      	ldr	r2, [pc, #200]	; (8001584 <main+0x184>)
 80014bc:	fba2 2303 	umull	r2, r3, r2, r3
 80014c0:	095b      	lsrs	r3, r3, #5
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b30      	ldr	r3, [pc, #192]	; (8001588 <main+0x188>)
 80014c6:	701a      	strb	r2, [r3, #0]
	  //printf("STACJA: %u\n", distance);

	  if (prev_distance != distance)
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <main+0x18c>)
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <main+0x188>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d003      	beq.n	80014dc <main+0xdc>
		  prev_distance = distance;
 80014d4:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <main+0x188>)
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <main+0x18c>)
 80014da:	701a      	strb	r2, [r3, #0]

	  if (ROBOT == false && prev_distance < 4)
 80014dc:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <main+0x190>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	f083 0301 	eor.w	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d011      	beq.n	800150e <main+0x10e>
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <main+0x18c>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d80d      	bhi.n	800150e <main+0x10e>
	  {
		  ROBOT = true;
 80014f2:	4b27      	ldr	r3, [pc, #156]	; (8001590 <main+0x190>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]

		  //wyslanie info, ze robot jest przed stykami
		  TX_BUFFER[0] = '1';
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <main+0x194>)
 80014fa:	2231      	movs	r2, #49	; 0x31
 80014fc:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, TX_BUFFER, sizeof(TX_BUFFER), HAL_MAX_DELAY);
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	2201      	movs	r2, #1
 8001504:	4923      	ldr	r1, [pc, #140]	; (8001594 <main+0x194>)
 8001506:	481b      	ldr	r0, [pc, #108]	; (8001574 <main+0x174>)
 8001508:	f003 ff41 	bl	800538e <HAL_UART_Transmit>
 800150c:	e014      	b.n	8001538 <main+0x138>
	  }
	  else if (ROBOT == true && distance > 4)
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <main+0x190>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d010      	beq.n	8001538 <main+0x138>
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <main+0x188>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b04      	cmp	r3, #4
 800151c:	d90c      	bls.n	8001538 <main+0x138>
	  {
		  ROBOT = false;
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <main+0x190>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]

		  //wyslanie info, ze robot oddalil sie od stykow
		  TX_BUFFER[0] = '2';
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <main+0x194>)
 8001526:	2232      	movs	r2, #50	; 0x32
 8001528:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, TX_BUFFER, sizeof(TX_BUFFER), HAL_MAX_DELAY);
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	2201      	movs	r2, #1
 8001530:	4918      	ldr	r1, [pc, #96]	; (8001594 <main+0x194>)
 8001532:	4810      	ldr	r0, [pc, #64]	; (8001574 <main+0x174>)
 8001534:	f003 ff2b 	bl	800538e <HAL_UART_Transmit>
	  }

	  /*--------------------STEROWANIE ROBOTEM Z POZIOMU KOMPTERA-USB-UART-------------*/
	  uint8_t uart1;
	  if (HAL_UART_Receive(&huart1, &uart1, 1, 0) == HAL_OK)
 8001538:	1df9      	adds	r1, r7, #7
 800153a:	2300      	movs	r3, #0
 800153c:	2201      	movs	r2, #1
 800153e:	4816      	ldr	r0, [pc, #88]	; (8001598 <main+0x198>)
 8001540:	f003 ffb7 	bl	80054b2 <HAL_UART_Receive>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d181      	bne.n	800144e <main+0x4e>
	  {
		  line_append(uart1);
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff01 	bl	8001354 <line_append>

		  TX_BUFFER[0] = uart1;
 8001552:	79fa      	ldrb	r2, [r7, #7]
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <main+0x194>)
 8001556:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, TX_BUFFER, 1, HAL_MAX_DELAY);
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
 800155c:	2201      	movs	r2, #1
 800155e:	490d      	ldr	r1, [pc, #52]	; (8001594 <main+0x194>)
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <main+0x174>)
 8001562:	f003 ff14 	bl	800538e <HAL_UART_Transmit>
  {
 8001566:	e772      	b.n	800144e <main+0x4e>
 8001568:	20000364 	.word	0x20000364
 800156c:	2000031c 	.word	0x2000031c
 8001570:	200002f1 	.word	0x200002f1
 8001574:	200003f0 	.word	0x200003f0
 8001578:	200001fc 	.word	0x200001fc
 800157c:	40533333 	.word	0x40533333
 8001580:	45800000 	.word	0x45800000
 8001584:	8d3dcb09 	.word	0x8d3dcb09
 8001588:	200002f2 	.word	0x200002f2
 800158c:	200002f3 	.word	0x200002f3
 8001590:	200002f4 	.word	0x200002f4
 8001594:	200002f0 	.word	0x200002f0
 8001598:	200003ac 	.word	0x200003ac

0800159c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b094      	sub	sp, #80	; 0x50
 80015a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a2:	f107 0320 	add.w	r3, r7, #32
 80015a6:	2230      	movs	r2, #48	; 0x30
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f004 fb30 	bl	8005c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <SystemClock_Config+0xdc>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	4a2b      	ldr	r2, [pc, #172]	; (8001678 <SystemClock_Config+0xdc>)
 80015ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ce:	6413      	str	r3, [r2, #64]	; 0x40
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <SystemClock_Config+0xdc>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	4b26      	ldr	r3, [pc, #152]	; (800167c <SystemClock_Config+0xe0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a25      	ldr	r2, [pc, #148]	; (800167c <SystemClock_Config+0xe0>)
 80015e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <SystemClock_Config+0xe0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80015f8:	230a      	movs	r3, #10
 80015fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015fc:	2301      	movs	r3, #1
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001600:	2310      	movs	r3, #16
 8001602:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001604:	2301      	movs	r3, #1
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001608:	2302      	movs	r3, #2
 800160a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800160c:	2300      	movs	r3, #0
 800160e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001610:	2308      	movs	r3, #8
 8001612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001614:	23b4      	movs	r3, #180	; 0xb4
 8001616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001618:	2302      	movs	r3, #2
 800161a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800161c:	2304      	movs	r3, #4
 800161e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f107 0320 	add.w	r3, r7, #32
 8001624:	4618      	mov	r0, r3
 8001626:	f001 fd8d 	bl	8003144 <HAL_RCC_OscConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001630:	f000 f826 	bl	8001680 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001634:	f001 fd36 	bl	80030a4 <HAL_PWREx_EnableOverDrive>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800163e:	f000 f81f 	bl	8001680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001642:	230f      	movs	r3, #15
 8001644:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001646:	2302      	movs	r3, #2
 8001648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800164e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001658:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	2105      	movs	r1, #5
 8001660:	4618      	mov	r0, r3
 8001662:	f001 ffe7 	bl	8003634 <HAL_RCC_ClockConfig>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800166c:	f000 f808 	bl	8001680 <Error_Handler>
  }
}
 8001670:	bf00      	nop
 8001672:	3750      	adds	r7, #80	; 0x50
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800
 800167c:	40007000 	.word	0x40007000

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x8>
	...

0800168c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_RTC_Init+0x44>)
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <MX_RTC_Init+0x48>)
 8001694:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_RTC_Init+0x44>)
 8001698:	2200      	movs	r2, #0
 800169a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_RTC_Init+0x44>)
 800169e:	227f      	movs	r2, #127	; 0x7f
 80016a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_RTC_Init+0x44>)
 80016a4:	22ff      	movs	r2, #255	; 0xff
 80016a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_RTC_Init+0x44>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_RTC_Init+0x44>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_RTC_Init+0x44>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_RTC_Init+0x44>)
 80016bc:	f002 fb5a 	bl	8003d74 <HAL_RTC_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80016c6:	f7ff ffdb 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200002f8 	.word	0x200002f8
 80016d4:	40002800 	.word	0x40002800

080016d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08e      	sub	sp, #56	; 0x38
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	2230      	movs	r2, #48	; 0x30
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f004 fa91 	bl	8005c10 <memset>
  if(rtcHandle->Instance==RTC)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a0c      	ldr	r2, [pc, #48]	; (8001724 <HAL_RTC_MspInit+0x4c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d111      	bne.n	800171c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016f8:	2320      	movs	r3, #32
 80016fa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	4618      	mov	r0, r3
 8001708:	f002 f974 	bl	80039f4 <HAL_RCCEx_PeriphCLKConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001712:	f7ff ffb5 	bl	8001680 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <HAL_RTC_MspInit+0x50>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800171c:	bf00      	nop
 800171e:	3738      	adds	r7, #56	; 0x38
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40002800 	.word	0x40002800
 8001728:	42470e3c 	.word	0x42470e3c

0800172c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_MspInit+0x4c>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <HAL_MspInit+0x4c>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_MspInit+0x4c>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_MspInit+0x4c>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <HAL_MspInit+0x4c>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_MspInit+0x4c>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <NMI_Handler+0x4>

08001782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <MemManage_Handler+0x4>

0800178e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <BusFault_Handler+0x4>

08001794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <UsageFault_Handler+0x4>

0800179a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017c8:	f000 fc04 	bl	8001fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
	return 1;
 80017d4:	2301      	movs	r3, #1
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_kill>:

int _kill(int pid, int sig)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017ea:	f004 f9e7 	bl	8005bbc <__errno>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2216      	movs	r2, #22
 80017f2:	601a      	str	r2, [r3, #0]
	return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_exit>:

void _exit (int status)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ffe7 	bl	80017e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001812:	e7fe      	b.n	8001812 <_exit+0x12>

08001814 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e00a      	b.n	800183c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001826:	f3af 8000 	nop.w
 800182a:	4601      	mov	r1, r0
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	60ba      	str	r2, [r7, #8]
 8001832:	b2ca      	uxtb	r2, r1
 8001834:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	dbf0      	blt.n	8001826 <_read+0x12>
	}

return len;
 8001844:	687b      	ldr	r3, [r7, #4]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	60f8      	str	r0, [r7, #12]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	e009      	b.n	8001874 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60ba      	str	r2, [r7, #8]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fda9 	bl	80013c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3301      	adds	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	dbf1      	blt.n	8001860 <_write+0x12>
	}
	return len;
 800187c:	687b      	ldr	r3, [r7, #4]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <_close>:

int _close(int file)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
	return -1;
 800188e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ae:	605a      	str	r2, [r3, #4]
	return 0;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_isatty>:

int _isatty(int file)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
	return 1;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
	return 0;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	; (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	; (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d207      	bcs.n	8001930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001920:	f004 f94c 	bl	8005bbc <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e009      	b.n	8001944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <_sbrk+0x64>)
 8001940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20030000 	.word	0x20030000
 8001950:	00000400 	.word	0x00000400
 8001954:	20000318 	.word	0x20000318
 8001958:	20000448 	.word	0x20000448

0800195c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08e      	sub	sp, #56	; 0x38
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001994:	f107 0320 	add.w	r3, r7, #32
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
 80019ac:	615a      	str	r2, [r3, #20]
 80019ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019b0:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019be:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1249;
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019c6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80019ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019cc:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d2:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019d8:	4823      	ldr	r0, [pc, #140]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019da:	f002 fac5 	bl	8003f68 <HAL_TIM_Base_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019e4:	f7ff fe4c 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019f2:	4619      	mov	r1, r3
 80019f4:	481c      	ldr	r0, [pc, #112]	; (8001a68 <MX_TIM2_Init+0xe8>)
 80019f6:	f002 febb 	bl	8004770 <HAL_TIM_ConfigClockSource>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a00:	f7ff fe3e 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a04:	4818      	ldr	r0, [pc, #96]	; (8001a68 <MX_TIM2_Init+0xe8>)
 8001a06:	f002 fafe 	bl	8004006 <HAL_TIM_PWM_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a10:	f7ff fe36 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a1c:	f107 0320 	add.w	r3, r7, #32
 8001a20:	4619      	mov	r1, r3
 8001a22:	4811      	ldr	r0, [pc, #68]	; (8001a68 <MX_TIM2_Init+0xe8>)
 8001a24:	f003 fbea 	bl	80051fc <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a2e:	f7ff fe27 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a32:	2360      	movs	r3, #96	; 0x60
 8001a34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 312;
 8001a36:	f44f 739c 	mov.w	r3, #312	; 0x138
 8001a3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2200      	movs	r2, #0
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4807      	ldr	r0, [pc, #28]	; (8001a68 <MX_TIM2_Init+0xe8>)
 8001a4c:	f002 fdce 	bl	80045ec <HAL_TIM_PWM_ConfigChannel>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a56:	f7ff fe13 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a5a:	4803      	ldr	r0, [pc, #12]	; (8001a68 <MX_TIM2_Init+0xe8>)
 8001a5c:	f000 f90c 	bl	8001c78 <HAL_TIM_MspPostInit>

}
 8001a60:	bf00      	nop
 8001a62:	3738      	adds	r7, #56	; 0x38
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	2000031c 	.word	0x2000031c

08001a6c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b092      	sub	sp, #72	; 0x48
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a8a:	f107 0320 	add.w	r3, r7, #32
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aaa:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001aac:	4a43      	ldr	r2, [pc, #268]	; (8001bbc <MX_TIM4_Init+0x150>)
 8001aae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 179;
 8001ab0:	4b41      	ldr	r3, [pc, #260]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001ab2:	22b3      	movs	r2, #179	; 0xb3
 8001ab4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30000;
 8001abc:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001abe:	f247 5230 	movw	r2, #30000	; 0x7530
 8001ac2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	4b3c      	ldr	r3, [pc, #240]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b3b      	ldr	r3, [pc, #236]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ad0:	4839      	ldr	r0, [pc, #228]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001ad2:	f002 fa49 	bl	8003f68 <HAL_TIM_Base_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001adc:	f7ff fdd0 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ae6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001aea:	4619      	mov	r1, r3
 8001aec:	4832      	ldr	r0, [pc, #200]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001aee:	f002 fe3f 	bl	8004770 <HAL_TIM_ConfigClockSource>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001af8:	f7ff fdc2 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001afc:	482e      	ldr	r0, [pc, #184]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001afe:	f002 fba3 	bl	8004248 <HAL_TIM_IC_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001b08:	f7ff fdba 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b0c:	482a      	ldr	r0, [pc, #168]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001b0e:	f002 fa7a 	bl	8004006 <HAL_TIM_PWM_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b18:	f7ff fdb2 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4823      	ldr	r0, [pc, #140]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001b2c:	f003 fb66 	bl	80051fc <HAL_TIMEx_MasterConfigSynchronization>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_TIM4_Init+0xce>
  {
    Error_Handler();
 8001b36:	f7ff fda3 	bl	8001680 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b4a:	f107 0320 	add.w	r3, r7, #32
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4619      	mov	r1, r3
 8001b52:	4819      	ldr	r0, [pc, #100]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001b54:	f002 fcae 	bl	80044b4 <HAL_TIM_IC_ConfigChannel>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 8001b5e:	f7ff fd8f 	bl	8001680 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b62:	2302      	movs	r3, #2
 8001b64:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b66:	2302      	movs	r3, #2
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b6a:	f107 0320 	add.w	r3, r7, #32
 8001b6e:	2204      	movs	r2, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4811      	ldr	r0, [pc, #68]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001b74:	f002 fc9e 	bl	80044b4 <HAL_TIM_IC_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM4_Init+0x116>
  {
    Error_Handler();
 8001b7e:	f7ff fd7f 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b82:	2360      	movs	r3, #96	; 0x60
 8001b84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8001b86:	230a      	movs	r3, #10
 8001b88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2208      	movs	r2, #8
 8001b96:	4619      	mov	r1, r3
 8001b98:	4807      	ldr	r0, [pc, #28]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001b9a:	f002 fd27 	bl	80045ec <HAL_TIM_PWM_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM4_Init+0x13c>
  {
    Error_Handler();
 8001ba4:	f7ff fd6c 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ba8:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <MX_TIM4_Init+0x14c>)
 8001baa:	f000 f865 	bl	8001c78 <HAL_TIM_MspPostInit>

}
 8001bae:	bf00      	nop
 8001bb0:	3748      	adds	r7, #72	; 0x48
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000364 	.word	0x20000364
 8001bbc:	40000800 	.word	0x40000800

08001bc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be0:	d10e      	bne.n	8001c00 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <HAL_TIM_Base_MspInit+0xac>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	4a20      	ldr	r2, [pc, #128]	; (8001c6c <HAL_TIM_Base_MspInit+0xac>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <HAL_TIM_Base_MspInit+0xac>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001bfe:	e031      	b.n	8001c64 <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM4)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <HAL_TIM_Base_MspInit+0xb0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d12c      	bne.n	8001c64 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_TIM_Base_MspInit+0xac>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a16      	ldr	r2, [pc, #88]	; (8001c6c <HAL_TIM_Base_MspInit+0xac>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_TIM_Base_MspInit+0xac>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_TIM_Base_MspInit+0xac>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	; (8001c6c <HAL_TIM_Base_MspInit+0xac>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_TIM_Base_MspInit+0xac>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c54:	2302      	movs	r3, #2
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <HAL_TIM_Base_MspInit+0xb4>)
 8001c60:	f000 fe9a 	bl	8002998 <HAL_GPIO_Init>
}
 8001c64:	bf00      	nop
 8001c66:	3728      	adds	r7, #40	; 0x28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40000800 	.word	0x40000800
 8001c74:	40020c00 	.word	0x40020c00

08001c78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	; 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c98:	d11e      	bne.n	8001cd8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <HAL_TIM_MspPostInit+0xb0>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <HAL_TIM_MspPostInit+0xb0>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <HAL_TIM_MspPostInit+0xb0>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001cb6:	2320      	movs	r3, #32
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4816      	ldr	r0, [pc, #88]	; (8001d2c <HAL_TIM_MspPostInit+0xb4>)
 8001cd2:	f000 fe61 	bl	8002998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001cd6:	e023      	b.n	8001d20 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM4)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <HAL_TIM_MspPostInit+0xb8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d11e      	bne.n	8001d20 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_TIM_MspPostInit+0xb0>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a0f      	ldr	r2, [pc, #60]	; (8001d28 <HAL_TIM_MspPostInit+0xb0>)
 8001cec:	f043 0308 	orr.w	r3, r3, #8
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_TIM_MspPostInit+0xb0>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001cfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d10:	2302      	movs	r3, #2
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4806      	ldr	r0, [pc, #24]	; (8001d34 <HAL_TIM_MspPostInit+0xbc>)
 8001d1c:	f000 fe3c 	bl	8002998 <HAL_GPIO_Init>
}
 8001d20:	bf00      	nop
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	40000800 	.word	0x40000800
 8001d34:	40020c00 	.word	0x40020c00

08001d38 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <MX_USART1_UART_Init+0x50>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d5e:	220c      	movs	r2, #12
 8001d60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <MX_USART1_UART_Init+0x4c>)
 8001d70:	f003 fac0 	bl	80052f4 <HAL_UART_Init>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d7a:	f7ff fc81 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200003ac 	.word	0x200003ac
 8001d88:	40011000 	.word	0x40011000

08001d8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_USART2_UART_Init+0x4c>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <MX_USART2_UART_Init+0x50>)
 8001d94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <MX_USART2_UART_Init+0x4c>)
 8001d98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d9e:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_USART2_UART_Init+0x4c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <MX_USART2_UART_Init+0x4c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <MX_USART2_UART_Init+0x4c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_USART2_UART_Init+0x4c>)
 8001db2:	220c      	movs	r2, #12
 8001db4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <MX_USART2_UART_Init+0x4c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_USART2_UART_Init+0x4c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_USART2_UART_Init+0x4c>)
 8001dc4:	f003 fa96 	bl	80052f4 <HAL_UART_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001dce:	f7ff fc57 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200003f0 	.word	0x200003f0
 8001ddc:	40004400 	.word	0x40004400

08001de0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08c      	sub	sp, #48	; 0x30
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a32      	ldr	r2, [pc, #200]	; (8001ec8 <HAL_UART_MspInit+0xe8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d12d      	bne.n	8001e5e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	61bb      	str	r3, [r7, #24]
 8001e06:	4b31      	ldr	r3, [pc, #196]	; (8001ecc <HAL_UART_MspInit+0xec>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	4a30      	ldr	r2, [pc, #192]	; (8001ecc <HAL_UART_MspInit+0xec>)
 8001e0c:	f043 0310 	orr.w	r3, r3, #16
 8001e10:	6453      	str	r3, [r2, #68]	; 0x44
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <HAL_UART_MspInit+0xec>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <HAL_UART_MspInit+0xec>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a29      	ldr	r2, [pc, #164]	; (8001ecc <HAL_UART_MspInit+0xec>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <HAL_UART_MspInit+0xec>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e4c:	2307      	movs	r3, #7
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	4619      	mov	r1, r3
 8001e56:	481e      	ldr	r0, [pc, #120]	; (8001ed0 <HAL_UART_MspInit+0xf0>)
 8001e58:	f000 fd9e 	bl	8002998 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e5c:	e030      	b.n	8001ec0 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1c      	ldr	r2, [pc, #112]	; (8001ed4 <HAL_UART_MspInit+0xf4>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d12b      	bne.n	8001ec0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_UART_MspInit+0xec>)
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	4a16      	ldr	r2, [pc, #88]	; (8001ecc <HAL_UART_MspInit+0xec>)
 8001e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e76:	6413      	str	r3, [r2, #64]	; 0x40
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_UART_MspInit+0xec>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_UART_MspInit+0xec>)
 8001e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8c:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <HAL_UART_MspInit+0xec>)
 8001e8e:	f043 0308 	orr.w	r3, r3, #8
 8001e92:	6313      	str	r3, [r2, #48]	; 0x30
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_UART_MspInit+0xec>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ea0:	2360      	movs	r3, #96	; 0x60
 8001ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4807      	ldr	r0, [pc, #28]	; (8001ed8 <HAL_UART_MspInit+0xf8>)
 8001ebc:	f000 fd6c 	bl	8002998 <HAL_GPIO_Init>
}
 8001ec0:	bf00      	nop
 8001ec2:	3730      	adds	r7, #48	; 0x30
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40011000 	.word	0x40011000
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40004400 	.word	0x40004400
 8001ed8:	40020c00 	.word	0x40020c00

08001edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f14 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ee2:	490e      	ldr	r1, [pc, #56]	; (8001f1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee8:	e002      	b.n	8001ef0 <LoopCopyDataInit>

08001eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eee:	3304      	adds	r3, #4

08001ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef4:	d3f9      	bcc.n	8001eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef6:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ef8:	4c0b      	ldr	r4, [pc, #44]	; (8001f28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001efc:	e001      	b.n	8001f02 <LoopFillZerobss>

08001efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f00:	3204      	adds	r2, #4

08001f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f04:	d3fb      	bcc.n	8001efe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f06:	f7ff fd29 	bl	800195c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f0a:	f003 fe5d 	bl	8005bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0e:	f7ff fa77 	bl	8001400 <main>
  bx  lr    
 8001f12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f14:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f1c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f20:	0800aa2c 	.word	0x0800aa2c
  ldr r2, =_sbss
 8001f24:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f28:	20000448 	.word	0x20000448

08001f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC_IRQHandler>
	...

08001f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f34:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0d      	ldr	r2, [pc, #52]	; (8001f70 <HAL_Init+0x40>)
 8001f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <HAL_Init+0x40>)
 8001f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_Init+0x40>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a07      	ldr	r2, [pc, #28]	; (8001f70 <HAL_Init+0x40>)
 8001f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f58:	2003      	movs	r0, #3
 8001f5a:	f000 fce9 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f000 f808 	bl	8001f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f64:	f7ff fbe2 	bl	800172c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023c00 	.word	0x40023c00

08001f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_InitTick+0x54>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_InitTick+0x58>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4619      	mov	r1, r3
 8001f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 fcf3 	bl	800297e <HAL_SYSTICK_Config>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00e      	b.n	8001fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b0f      	cmp	r3, #15
 8001fa6:	d80a      	bhi.n	8001fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f000 fcc9 	bl	8002946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <HAL_InitTick+0x5c>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e000      	b.n	8001fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000008 	.word	0x20000008
 8001fd0:	20000004 	.word	0x20000004

08001fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_IncTick+0x20>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_IncTick+0x24>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a04      	ldr	r2, [pc, #16]	; (8001ff8 <HAL_IncTick+0x24>)
 8001fe6:	6013      	str	r3, [r2, #0]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000008 	.word	0x20000008
 8001ff8:	20000434 	.word	0x20000434

08001ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HAL_GetTick+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000434 	.word	0x20000434

08002014 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e033      	b.n	8002092 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff f842 	bl	80010bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d118      	bne.n	8002084 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800205a:	f023 0302 	bic.w	r3, r3, #2
 800205e:	f043 0202 	orr.w	r2, r3, #2
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fab4 	bl	80025d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f023 0303 	bic.w	r3, r3, #3
 800207a:	f043 0201 	orr.w	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	641a      	str	r2, [r3, #64]	; 0x40
 8002082:	e001      	b.n	8002088 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_Start+0x1a>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e0b2      	b.n	800221c <HAL_ADC_Start+0x180>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d018      	beq.n	80020fe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020dc:	4b52      	ldr	r3, [pc, #328]	; (8002228 <HAL_ADC_Start+0x18c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a52      	ldr	r2, [pc, #328]	; (800222c <HAL_ADC_Start+0x190>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	0c9a      	lsrs	r2, r3, #18
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020f0:	e002      	b.n	80020f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f9      	bne.n	80020f2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d17a      	bne.n	8002202 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002136:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214a:	d106      	bne.n	800215a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	f023 0206 	bic.w	r2, r3, #6
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	645a      	str	r2, [r3, #68]	; 0x44
 8002158:	e002      	b.n	8002160 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002168:	4b31      	ldr	r3, [pc, #196]	; (8002230 <HAL_ADC_Start+0x194>)
 800216a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002174:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	2b00      	cmp	r3, #0
 8002180:	d12a      	bne.n	80021d8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a2b      	ldr	r2, [pc, #172]	; (8002234 <HAL_ADC_Start+0x198>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d015      	beq.n	80021b8 <HAL_ADC_Start+0x11c>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a29      	ldr	r2, [pc, #164]	; (8002238 <HAL_ADC_Start+0x19c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d105      	bne.n	80021a2 <HAL_ADC_Start+0x106>
 8002196:	4b26      	ldr	r3, [pc, #152]	; (8002230 <HAL_ADC_Start+0x194>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a25      	ldr	r2, [pc, #148]	; (800223c <HAL_ADC_Start+0x1a0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d136      	bne.n	800221a <HAL_ADC_Start+0x17e>
 80021ac:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_ADC_Start+0x194>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d130      	bne.n	800221a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d129      	bne.n	800221a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	e020      	b.n	800221a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a15      	ldr	r2, [pc, #84]	; (8002234 <HAL_ADC_Start+0x198>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d11b      	bne.n	800221a <HAL_ADC_Start+0x17e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d114      	bne.n	800221a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	e00b      	b.n	800221a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f043 0210 	orr.w	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f043 0201 	orr.w	r2, r3, #1
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	20000000 	.word	0x20000000
 800222c:	431bde83 	.word	0x431bde83
 8002230:	40012300 	.word	0x40012300
 8002234:	40012000 	.word	0x40012000
 8002238:	40012100 	.word	0x40012100
 800223c:	40012200 	.word	0x40012200

08002240 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225c:	d113      	bne.n	8002286 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800226c:	d10b      	bne.n	8002286 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f043 0220 	orr.w	r2, r3, #32
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e063      	b.n	800234e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002286:	f7ff feb9 	bl	8001ffc <HAL_GetTick>
 800228a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800228c:	e021      	b.n	80022d2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d01d      	beq.n	80022d2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_ADC_PollForConversion+0x6c>
 800229c:	f7ff feae 	bl	8001ffc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d212      	bcs.n	80022d2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d00b      	beq.n	80022d2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f043 0204 	orr.w	r2, r3, #4
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e03d      	b.n	800234e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d1d6      	bne.n	800228e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0212 	mvn.w	r2, #18
 80022e8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d123      	bne.n	800234c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002308:	2b00      	cmp	r3, #0
 800230a:	d11f      	bne.n	800234c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	d006      	beq.n	8002328 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002324:	2b00      	cmp	r3, #0
 8002326:	d111      	bne.n	800234c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x1c>
 8002388:	2302      	movs	r3, #2
 800238a:	e113      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x244>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b09      	cmp	r3, #9
 800239a:	d925      	bls.n	80023e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68d9      	ldr	r1, [r3, #12]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	3b1e      	subs	r3, #30
 80023b2:	2207      	movs	r2, #7
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43da      	mvns	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	400a      	ands	r2, r1
 80023c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68d9      	ldr	r1, [r3, #12]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	4603      	mov	r3, r0
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4403      	add	r3, r0
 80023da:	3b1e      	subs	r3, #30
 80023dc:	409a      	lsls	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	e022      	b.n	800242e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6919      	ldr	r1, [r3, #16]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	2207      	movs	r2, #7
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	400a      	ands	r2, r1
 800240a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6919      	ldr	r1, [r3, #16]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	4618      	mov	r0, r3
 800241e:	4603      	mov	r3, r0
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4403      	add	r3, r0
 8002424:	409a      	lsls	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b06      	cmp	r3, #6
 8002434:	d824      	bhi.n	8002480 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3b05      	subs	r3, #5
 8002448:	221f      	movs	r2, #31
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	400a      	ands	r2, r1
 8002456:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	3b05      	subs	r3, #5
 8002472:	fa00 f203 	lsl.w	r2, r0, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	635a      	str	r2, [r3, #52]	; 0x34
 800247e:	e04c      	b.n	800251a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d824      	bhi.n	80024d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	3b23      	subs	r3, #35	; 0x23
 800249a:	221f      	movs	r2, #31
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43da      	mvns	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	400a      	ands	r2, r1
 80024a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	4618      	mov	r0, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	3b23      	subs	r3, #35	; 0x23
 80024c4:	fa00 f203 	lsl.w	r2, r0, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
 80024d0:	e023      	b.n	800251a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	3b41      	subs	r3, #65	; 0x41
 80024e4:	221f      	movs	r2, #31
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	400a      	ands	r2, r1
 80024f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	4618      	mov	r0, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	3b41      	subs	r3, #65	; 0x41
 800250e:	fa00 f203 	lsl.w	r2, r0, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800251a:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <HAL_ADC_ConfigChannel+0x250>)
 800251c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a28      	ldr	r2, [pc, #160]	; (80025c4 <HAL_ADC_ConfigChannel+0x254>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d10f      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1d8>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b12      	cmp	r3, #18
 800252e:	d10b      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_ADC_ConfigChannel+0x254>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d12b      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x23a>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <HAL_ADC_ConfigChannel+0x258>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d003      	beq.n	8002564 <HAL_ADC_ConfigChannel+0x1f4>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b11      	cmp	r3, #17
 8002562:	d122      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <HAL_ADC_ConfigChannel+0x258>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d111      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_ADC_ConfigChannel+0x25c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <HAL_ADC_ConfigChannel+0x260>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	0c9a      	lsrs	r2, r3, #18
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800259c:	e002      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f9      	bne.n	800259e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	40012300 	.word	0x40012300
 80025c4:	40012000 	.word	0x40012000
 80025c8:	10000012 	.word	0x10000012
 80025cc:	20000000 	.word	0x20000000
 80025d0:	431bde83 	.word	0x431bde83

080025d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025dc:	4b79      	ldr	r3, [pc, #484]	; (80027c4 <ADC_Init+0x1f0>)
 80025de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	021a      	lsls	r2, r3, #8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800262c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800264e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <ADC_Init+0x1f4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d022      	beq.n	80026b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800267a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800269c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6899      	ldr	r1, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	e00f      	b.n	80026d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0202 	bic.w	r2, r2, #2
 80026e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6899      	ldr	r1, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7e1b      	ldrb	r3, [r3, #24]
 80026ec:	005a      	lsls	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01b      	beq.n	8002738 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800271e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	3b01      	subs	r3, #1
 800272c:	035a      	lsls	r2, r3, #13
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	e007      	b.n	8002748 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002746:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	3b01      	subs	r3, #1
 8002764:	051a      	lsls	r2, r3, #20
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800277c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6899      	ldr	r1, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800278a:	025a      	lsls	r2, r3, #9
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6899      	ldr	r1, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	029a      	lsls	r2, r3, #10
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	609a      	str	r2, [r3, #8]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40012300 	.word	0x40012300
 80027c8:	0f000001 	.word	0x0f000001

080027cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fe:	4a04      	ldr	r2, [pc, #16]	; (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	60d3      	str	r3, [r2, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <__NVIC_GetPriorityGrouping+0x18>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	f003 0307 	and.w	r3, r3, #7
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	2b00      	cmp	r3, #0
 8002842:	db0a      	blt.n	800285a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	490c      	ldr	r1, [pc, #48]	; (800287c <__NVIC_SetPriority+0x4c>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	440b      	add	r3, r1
 8002854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002858:	e00a      	b.n	8002870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4908      	ldr	r1, [pc, #32]	; (8002880 <__NVIC_SetPriority+0x50>)
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	3b04      	subs	r3, #4
 8002868:	0112      	lsls	r2, r2, #4
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	440b      	add	r3, r1
 800286e:	761a      	strb	r2, [r3, #24]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000e100 	.word	0xe000e100
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	; 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f1c3 0307 	rsb	r3, r3, #7
 800289e:	2b04      	cmp	r3, #4
 80028a0:	bf28      	it	cs
 80028a2:	2304      	movcs	r3, #4
 80028a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d902      	bls.n	80028b4 <NVIC_EncodePriority+0x30>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3b03      	subs	r3, #3
 80028b2:	e000      	b.n	80028b6 <NVIC_EncodePriority+0x32>
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	401a      	ands	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	43d9      	mvns	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	4313      	orrs	r3, r2
         );
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	d301      	bcc.n	8002902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fe:	2301      	movs	r3, #1
 8002900:	e00f      	b.n	8002922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <SysTick_Config+0x40>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290a:	210f      	movs	r1, #15
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	f7ff ff8e 	bl	8002830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SysTick_Config+0x40>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <SysTick_Config+0x40>)
 800291c:	2207      	movs	r2, #7
 800291e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010

08002930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff47 	bl	80027cc <__NVIC_SetPriorityGrouping>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002958:	f7ff ff5c 	bl	8002814 <__NVIC_GetPriorityGrouping>
 800295c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f7ff ff8e 	bl	8002884 <NVIC_EncodePriority>
 8002968:	4602      	mov	r2, r0
 800296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff5d 	bl	8002830 <__NVIC_SetPriority>
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff ffb0 	bl	80028ec <SysTick_Config>
 800298c:	4603      	mov	r3, r0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	e177      	b.n	8002ca4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b4:	2201      	movs	r2, #1
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	f040 8166 	bne.w	8002c9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d005      	beq.n	80029ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d130      	bne.n	8002a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	2203      	movs	r2, #3
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a20:	2201      	movs	r2, #1
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 0201 	and.w	r2, r3, #1
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d017      	beq.n	8002a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	2203      	movs	r2, #3
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d123      	bne.n	8002adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	08da      	lsrs	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3208      	adds	r2, #8
 8002a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	220f      	movs	r2, #15
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691a      	ldr	r2, [r3, #16]
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	08da      	lsrs	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3208      	adds	r2, #8
 8002ad6:	69b9      	ldr	r1, [r7, #24]
 8002ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 0203 	and.w	r2, r3, #3
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 80c0 	beq.w	8002c9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	4b66      	ldr	r3, [pc, #408]	; (8002cbc <HAL_GPIO_Init+0x324>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	4a65      	ldr	r2, [pc, #404]	; (8002cbc <HAL_GPIO_Init+0x324>)
 8002b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b2e:	4b63      	ldr	r3, [pc, #396]	; (8002cbc <HAL_GPIO_Init+0x324>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b3a:	4a61      	ldr	r2, [pc, #388]	; (8002cc0 <HAL_GPIO_Init+0x328>)
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	3302      	adds	r3, #2
 8002b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	220f      	movs	r2, #15
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a58      	ldr	r2, [pc, #352]	; (8002cc4 <HAL_GPIO_Init+0x32c>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d037      	beq.n	8002bd6 <HAL_GPIO_Init+0x23e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a57      	ldr	r2, [pc, #348]	; (8002cc8 <HAL_GPIO_Init+0x330>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d031      	beq.n	8002bd2 <HAL_GPIO_Init+0x23a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a56      	ldr	r2, [pc, #344]	; (8002ccc <HAL_GPIO_Init+0x334>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d02b      	beq.n	8002bce <HAL_GPIO_Init+0x236>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a55      	ldr	r2, [pc, #340]	; (8002cd0 <HAL_GPIO_Init+0x338>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d025      	beq.n	8002bca <HAL_GPIO_Init+0x232>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a54      	ldr	r2, [pc, #336]	; (8002cd4 <HAL_GPIO_Init+0x33c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d01f      	beq.n	8002bc6 <HAL_GPIO_Init+0x22e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a53      	ldr	r2, [pc, #332]	; (8002cd8 <HAL_GPIO_Init+0x340>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d019      	beq.n	8002bc2 <HAL_GPIO_Init+0x22a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a52      	ldr	r2, [pc, #328]	; (8002cdc <HAL_GPIO_Init+0x344>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_GPIO_Init+0x226>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a51      	ldr	r2, [pc, #324]	; (8002ce0 <HAL_GPIO_Init+0x348>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00d      	beq.n	8002bba <HAL_GPIO_Init+0x222>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a50      	ldr	r2, [pc, #320]	; (8002ce4 <HAL_GPIO_Init+0x34c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d007      	beq.n	8002bb6 <HAL_GPIO_Init+0x21e>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4f      	ldr	r2, [pc, #316]	; (8002ce8 <HAL_GPIO_Init+0x350>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_GPIO_Init+0x21a>
 8002bae:	2309      	movs	r3, #9
 8002bb0:	e012      	b.n	8002bd8 <HAL_GPIO_Init+0x240>
 8002bb2:	230a      	movs	r3, #10
 8002bb4:	e010      	b.n	8002bd8 <HAL_GPIO_Init+0x240>
 8002bb6:	2308      	movs	r3, #8
 8002bb8:	e00e      	b.n	8002bd8 <HAL_GPIO_Init+0x240>
 8002bba:	2307      	movs	r3, #7
 8002bbc:	e00c      	b.n	8002bd8 <HAL_GPIO_Init+0x240>
 8002bbe:	2306      	movs	r3, #6
 8002bc0:	e00a      	b.n	8002bd8 <HAL_GPIO_Init+0x240>
 8002bc2:	2305      	movs	r3, #5
 8002bc4:	e008      	b.n	8002bd8 <HAL_GPIO_Init+0x240>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	e006      	b.n	8002bd8 <HAL_GPIO_Init+0x240>
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e004      	b.n	8002bd8 <HAL_GPIO_Init+0x240>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e002      	b.n	8002bd8 <HAL_GPIO_Init+0x240>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <HAL_GPIO_Init+0x240>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	f002 0203 	and.w	r2, r2, #3
 8002bde:	0092      	lsls	r2, r2, #2
 8002be0:	4093      	lsls	r3, r2
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002be8:	4935      	ldr	r1, [pc, #212]	; (8002cc0 <HAL_GPIO_Init+0x328>)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bf6:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <HAL_GPIO_Init+0x354>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c1a:	4a34      	ldr	r2, [pc, #208]	; (8002cec <HAL_GPIO_Init+0x354>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c20:	4b32      	ldr	r3, [pc, #200]	; (8002cec <HAL_GPIO_Init+0x354>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c44:	4a29      	ldr	r2, [pc, #164]	; (8002cec <HAL_GPIO_Init+0x354>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c4a:	4b28      	ldr	r3, [pc, #160]	; (8002cec <HAL_GPIO_Init+0x354>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c6e:	4a1f      	ldr	r2, [pc, #124]	; (8002cec <HAL_GPIO_Init+0x354>)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c74:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_GPIO_Init+0x354>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c98:	4a14      	ldr	r2, [pc, #80]	; (8002cec <HAL_GPIO_Init+0x354>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b0f      	cmp	r3, #15
 8002ca8:	f67f ae84 	bls.w	80029b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	3724      	adds	r7, #36	; 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	40013800 	.word	0x40013800
 8002cc4:	40020000 	.word	0x40020000
 8002cc8:	40020400 	.word	0x40020400
 8002ccc:	40020800 	.word	0x40020800
 8002cd0:	40020c00 	.word	0x40020c00
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40021400 	.word	0x40021400
 8002cdc:	40021800 	.word	0x40021800
 8002ce0:	40021c00 	.word	0x40021c00
 8002ce4:	40022000 	.word	0x40022000
 8002ce8:	40022400 	.word	0x40022400
 8002cec:	40013c00 	.word	0x40013c00

08002cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d00:	787b      	ldrb	r3, [r7, #1]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d06:	887a      	ldrh	r2, [r7, #2]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d0c:	e003      	b.n	8002d16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d0e:	887b      	ldrh	r3, [r7, #2]
 8002d10:	041a      	lsls	r2, r3, #16
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	619a      	str	r2, [r3, #24]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e12b      	b.n	8002f8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7fe faba 	bl	80012c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	; 0x24
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d88:	f000 fe0c 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 8002d8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4a81      	ldr	r2, [pc, #516]	; (8002f98 <HAL_I2C_Init+0x274>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d807      	bhi.n	8002da8 <HAL_I2C_Init+0x84>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a80      	ldr	r2, [pc, #512]	; (8002f9c <HAL_I2C_Init+0x278>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	bf94      	ite	ls
 8002da0:	2301      	movls	r3, #1
 8002da2:	2300      	movhi	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e006      	b.n	8002db6 <HAL_I2C_Init+0x92>
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a7d      	ldr	r2, [pc, #500]	; (8002fa0 <HAL_I2C_Init+0x27c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	bf94      	ite	ls
 8002db0:	2301      	movls	r3, #1
 8002db2:	2300      	movhi	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0e7      	b.n	8002f8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	4a78      	ldr	r2, [pc, #480]	; (8002fa4 <HAL_I2C_Init+0x280>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	0c9b      	lsrs	r3, r3, #18
 8002dc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a6a      	ldr	r2, [pc, #424]	; (8002f98 <HAL_I2C_Init+0x274>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d802      	bhi.n	8002df8 <HAL_I2C_Init+0xd4>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	3301      	adds	r3, #1
 8002df6:	e009      	b.n	8002e0c <HAL_I2C_Init+0xe8>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dfe:	fb02 f303 	mul.w	r3, r2, r3
 8002e02:	4a69      	ldr	r2, [pc, #420]	; (8002fa8 <HAL_I2C_Init+0x284>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	099b      	lsrs	r3, r3, #6
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	495c      	ldr	r1, [pc, #368]	; (8002f98 <HAL_I2C_Init+0x274>)
 8002e28:	428b      	cmp	r3, r1
 8002e2a:	d819      	bhi.n	8002e60 <HAL_I2C_Init+0x13c>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	1e59      	subs	r1, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e3a:	1c59      	adds	r1, r3, #1
 8002e3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e40:	400b      	ands	r3, r1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_I2C_Init+0x138>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1e59      	subs	r1, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e54:	3301      	adds	r3, #1
 8002e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5a:	e051      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	e04f      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d111      	bne.n	8002e8c <HAL_I2C_Init+0x168>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e58      	subs	r0, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	440b      	add	r3, r1
 8002e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e012      	b.n	8002eb2 <HAL_I2C_Init+0x18e>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1e58      	subs	r0, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	0099      	lsls	r1, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Init+0x196>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e022      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_I2C_Init+0x1bc>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1e58      	subs	r0, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	440b      	add	r3, r1
 8002ed0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ede:	e00f      	b.n	8002f00 <HAL_I2C_Init+0x1dc>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1e58      	subs	r0, r3, #1
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	460b      	mov	r3, r1
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	0099      	lsls	r1, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	6809      	ldr	r1, [r1, #0]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69da      	ldr	r2, [r3, #28]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6911      	ldr	r1, [r2, #16]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68d2      	ldr	r2, [r2, #12]
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	000186a0 	.word	0x000186a0
 8002f9c:	001e847f 	.word	0x001e847f
 8002fa0:	003d08ff 	.word	0x003d08ff
 8002fa4:	431bde83 	.word	0x431bde83
 8002fa8:	10624dd3 	.word	0x10624dd3

08002fac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d129      	bne.n	8003016 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2224      	movs	r2, #36	; 0x24
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0210 	bic.w	r2, r2, #16
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f042 0201 	orr.w	r2, r2, #1
 8003008:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800302e:	2300      	movs	r3, #0
 8003030:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	d12a      	bne.n	8003094 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2224      	movs	r2, #36	; 0x24
 8003042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0201 	bic.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800305e:	89fb      	ldrh	r3, [r7, #14]
 8003060:	f023 030f 	bic.w	r3, r3, #15
 8003064:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	b29a      	uxth	r2, r3
 800306a:	89fb      	ldrh	r3, [r7, #14]
 800306c:	4313      	orrs	r3, r2
 800306e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	89fa      	ldrh	r2, [r7, #14]
 8003076:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_PWREx_EnableOverDrive+0x90>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	4a1f      	ldr	r2, [pc, #124]	; (8003134 <HAL_PWREx_EnableOverDrive+0x90>)
 80030b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030bc:	6413      	str	r3, [r2, #64]	; 0x40
 80030be:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <HAL_PWREx_EnableOverDrive+0x90>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_PWREx_EnableOverDrive+0x94>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030d0:	f7fe ff94 	bl	8001ffc <HAL_GetTick>
 80030d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030d6:	e009      	b.n	80030ec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030d8:	f7fe ff90 	bl	8001ffc <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030e6:	d901      	bls.n	80030ec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e01f      	b.n	800312c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <HAL_PWREx_EnableOverDrive+0x98>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f8:	d1ee      	bne.n	80030d8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80030fa:	4b11      	ldr	r3, [pc, #68]	; (8003140 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003100:	f7fe ff7c 	bl	8001ffc <HAL_GetTick>
 8003104:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003106:	e009      	b.n	800311c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003108:	f7fe ff78 	bl	8001ffc <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003116:	d901      	bls.n	800311c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e007      	b.n	800312c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800311c:	4b07      	ldr	r3, [pc, #28]	; (800313c <HAL_PWREx_EnableOverDrive+0x98>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003128:	d1ee      	bne.n	8003108 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40023800 	.word	0x40023800
 8003138:	420e0040 	.word	0x420e0040
 800313c:	40007000 	.word	0x40007000
 8003140:	420e0044 	.word	0x420e0044

08003144 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e267      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d075      	beq.n	800324e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003162:	4b88      	ldr	r3, [pc, #544]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	2b04      	cmp	r3, #4
 800316c:	d00c      	beq.n	8003188 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316e:	4b85      	ldr	r3, [pc, #532]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003176:	2b08      	cmp	r3, #8
 8003178:	d112      	bne.n	80031a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317a:	4b82      	ldr	r3, [pc, #520]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003186:	d10b      	bne.n	80031a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003188:	4b7e      	ldr	r3, [pc, #504]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d05b      	beq.n	800324c <HAL_RCC_OscConfig+0x108>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d157      	bne.n	800324c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e242      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a8:	d106      	bne.n	80031b8 <HAL_RCC_OscConfig+0x74>
 80031aa:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a75      	ldr	r2, [pc, #468]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e01d      	b.n	80031f4 <HAL_RCC_OscConfig+0xb0>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x98>
 80031c2:	4b70      	ldr	r3, [pc, #448]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6f      	ldr	r2, [pc, #444]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	4b6d      	ldr	r3, [pc, #436]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a6c      	ldr	r2, [pc, #432]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0xb0>
 80031dc:	4b69      	ldr	r3, [pc, #420]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a68      	ldr	r2, [pc, #416]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b66      	ldr	r3, [pc, #408]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a65      	ldr	r2, [pc, #404]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80031ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7fe fefe 	bl	8001ffc <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003204:	f7fe fefa 	bl	8001ffc <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e207      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b5b      	ldr	r3, [pc, #364]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0xc0>
 8003222:	e014      	b.n	800324e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fe feea 	bl	8001ffc <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800322c:	f7fe fee6 	bl	8001ffc <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b64      	cmp	r3, #100	; 0x64
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e1f3      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	4b51      	ldr	r3, [pc, #324]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f0      	bne.n	800322c <HAL_RCC_OscConfig+0xe8>
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d063      	beq.n	8003322 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800325a:	4b4a      	ldr	r3, [pc, #296]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00b      	beq.n	800327e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b47      	ldr	r3, [pc, #284]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800326e:	2b08      	cmp	r3, #8
 8003270:	d11c      	bne.n	80032ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003272:	4b44      	ldr	r3, [pc, #272]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d116      	bne.n	80032ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327e:	4b41      	ldr	r3, [pc, #260]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_RCC_OscConfig+0x152>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e1c7      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003296:	4b3b      	ldr	r3, [pc, #236]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4937      	ldr	r1, [pc, #220]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	e03a      	b.n	8003322 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d020      	beq.n	80032f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b4:	4b34      	ldr	r3, [pc, #208]	; (8003388 <HAL_RCC_OscConfig+0x244>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fe fe9f 	bl	8001ffc <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fe fe9b 	bl	8001ffc <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e1a8      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b28      	ldr	r3, [pc, #160]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	4925      	ldr	r1, [pc, #148]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
 80032f4:	e015      	b.n	8003322 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCC_OscConfig+0x244>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe fe7e 	bl	8001ffc <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003304:	f7fe fe7a 	bl	8001ffc <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e187      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f0      	bne.n	8003304 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d036      	beq.n	800339c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d016      	beq.n	8003364 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003336:	4b15      	ldr	r3, [pc, #84]	; (800338c <HAL_RCC_OscConfig+0x248>)
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333c:	f7fe fe5e 	bl	8001ffc <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003344:	f7fe fe5a 	bl	8001ffc <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e167      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_RCC_OscConfig+0x240>)
 8003358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0x200>
 8003362:	e01b      	b.n	800339c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003364:	4b09      	ldr	r3, [pc, #36]	; (800338c <HAL_RCC_OscConfig+0x248>)
 8003366:	2200      	movs	r2, #0
 8003368:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800336a:	f7fe fe47 	bl	8001ffc <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	e00e      	b.n	8003390 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003372:	f7fe fe43 	bl	8001ffc <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d907      	bls.n	8003390 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e150      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
 8003384:	40023800 	.word	0x40023800
 8003388:	42470000 	.word	0x42470000
 800338c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003390:	4b88      	ldr	r3, [pc, #544]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1ea      	bne.n	8003372 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8097 	beq.w	80034d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ae:	4b81      	ldr	r3, [pc, #516]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	4b7d      	ldr	r3, [pc, #500]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	4a7c      	ldr	r2, [pc, #496]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ca:	4b7a      	ldr	r3, [pc, #488]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d6:	2301      	movs	r3, #1
 80033d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033da:	4b77      	ldr	r3, [pc, #476]	; (80035b8 <HAL_RCC_OscConfig+0x474>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d118      	bne.n	8003418 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e6:	4b74      	ldr	r3, [pc, #464]	; (80035b8 <HAL_RCC_OscConfig+0x474>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a73      	ldr	r2, [pc, #460]	; (80035b8 <HAL_RCC_OscConfig+0x474>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033f2:	f7fe fe03 	bl	8001ffc <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fa:	f7fe fdff 	bl	8001ffc <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e10c      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340c:	4b6a      	ldr	r3, [pc, #424]	; (80035b8 <HAL_RCC_OscConfig+0x474>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x2ea>
 8003420:	4b64      	ldr	r3, [pc, #400]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	4a63      	ldr	r2, [pc, #396]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6713      	str	r3, [r2, #112]	; 0x70
 800342c:	e01c      	b.n	8003468 <HAL_RCC_OscConfig+0x324>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b05      	cmp	r3, #5
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x30c>
 8003436:	4b5f      	ldr	r3, [pc, #380]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a5e      	ldr	r2, [pc, #376]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 800343c:	f043 0304 	orr.w	r3, r3, #4
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
 8003442:	4b5c      	ldr	r3, [pc, #368]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	4a5b      	ldr	r2, [pc, #364]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6713      	str	r3, [r2, #112]	; 0x70
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0x324>
 8003450:	4b58      	ldr	r3, [pc, #352]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	4a57      	ldr	r2, [pc, #348]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	6713      	str	r3, [r2, #112]	; 0x70
 800345c:	4b55      	ldr	r3, [pc, #340]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	4a54      	ldr	r2, [pc, #336]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003462:	f023 0304 	bic.w	r3, r3, #4
 8003466:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d015      	beq.n	800349c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fe fdc4 	bl	8001ffc <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	e00a      	b.n	800348e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003478:	f7fe fdc0 	bl	8001ffc <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	; 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e0cb      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348e:	4b49      	ldr	r3, [pc, #292]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0ee      	beq.n	8003478 <HAL_RCC_OscConfig+0x334>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349c:	f7fe fdae 	bl	8001ffc <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7fe fdaa 	bl	8001ffc <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e0b5      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ba:	4b3e      	ldr	r3, [pc, #248]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1ee      	bne.n	80034a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d105      	bne.n	80034d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034cc:	4b39      	ldr	r3, [pc, #228]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	4a38      	ldr	r2, [pc, #224]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80034d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80a1 	beq.w	8003624 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e2:	4b34      	ldr	r3, [pc, #208]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d05c      	beq.n	80035a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d141      	bne.n	800357a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f6:	4b31      	ldr	r3, [pc, #196]	; (80035bc <HAL_RCC_OscConfig+0x478>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7fe fd7e 	bl	8001ffc <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003504:	f7fe fd7a 	bl	8001ffc <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e087      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003516:	4b27      	ldr	r3, [pc, #156]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	019b      	lsls	r3, r3, #6
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003538:	085b      	lsrs	r3, r3, #1
 800353a:	3b01      	subs	r3, #1
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	491b      	ldr	r1, [pc, #108]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <HAL_RCC_OscConfig+0x478>)
 800354e:	2201      	movs	r2, #1
 8003550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fe fd53 	bl	8001ffc <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355a:	f7fe fd4f 	bl	8001ffc <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e05c      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x416>
 8003578:	e054      	b.n	8003624 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <HAL_RCC_OscConfig+0x478>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fe fd3c 	bl	8001ffc <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003588:	f7fe fd38 	bl	8001ffc <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e045      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_RCC_OscConfig+0x470>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x444>
 80035a6:	e03d      	b.n	8003624 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d107      	bne.n	80035c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e038      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40007000 	.word	0x40007000
 80035bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035c0:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <HAL_RCC_OscConfig+0x4ec>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d028      	beq.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d8:	429a      	cmp	r2, r3
 80035da:	d121      	bne.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d11a      	bne.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035f0:	4013      	ands	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d111      	bne.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	3b01      	subs	r3, #1
 800360a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d107      	bne.n	8003620 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800

08003634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0cc      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b68      	ldr	r3, [pc, #416]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d90c      	bls.n	8003670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b65      	ldr	r3, [pc, #404]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b63      	ldr	r3, [pc, #396]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e0b8      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003688:	4b59      	ldr	r3, [pc, #356]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003692:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a0:	4b53      	ldr	r3, [pc, #332]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4a52      	ldr	r2, [pc, #328]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ac:	4b50      	ldr	r3, [pc, #320]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	494d      	ldr	r1, [pc, #308]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d044      	beq.n	8003754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d119      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e07f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d003      	beq.n	80036f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d107      	bne.n	8003702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f2:	4b3f      	ldr	r3, [pc, #252]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e06f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	4b3b      	ldr	r3, [pc, #236]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e067      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003712:	4b37      	ldr	r3, [pc, #220]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4934      	ldr	r1, [pc, #208]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003724:	f7fe fc6a 	bl	8001ffc <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	e00a      	b.n	8003742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372c:	f7fe fc66 	bl	8001ffc <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	; 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e04f      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003742:	4b2b      	ldr	r3, [pc, #172]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 020c 	and.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	429a      	cmp	r2, r3
 8003752:	d1eb      	bne.n	800372c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d20c      	bcs.n	800377c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b22      	ldr	r3, [pc, #136]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e032      	b.n	80037e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4916      	ldr	r1, [pc, #88]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	4313      	orrs	r3, r2
 8003798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d009      	beq.n	80037ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	00db      	lsls	r3, r3, #3
 80037b4:	490e      	ldr	r1, [pc, #56]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ba:	f000 f821 	bl	8003800 <HAL_RCC_GetSysClockFreq>
 80037be:	4602      	mov	r2, r0
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	490a      	ldr	r1, [pc, #40]	; (80037f4 <HAL_RCC_ClockConfig+0x1c0>)
 80037cc:	5ccb      	ldrb	r3, [r1, r3]
 80037ce:	fa22 f303 	lsr.w	r3, r2, r3
 80037d2:	4a09      	ldr	r2, [pc, #36]	; (80037f8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCC_ClockConfig+0x1c8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fbca 	bl	8001f74 <HAL_InitTick>

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	40023c00 	.word	0x40023c00
 80037f0:	40023800 	.word	0x40023800
 80037f4:	0800a558 	.word	0x0800a558
 80037f8:	20000000 	.word	0x20000000
 80037fc:	20000004 	.word	0x20000004

08003800 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003804:	b090      	sub	sp, #64	; 0x40
 8003806:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	637b      	str	r3, [r7, #52]	; 0x34
 800380c:	2300      	movs	r3, #0
 800380e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003810:	2300      	movs	r3, #0
 8003812:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003818:	4b59      	ldr	r3, [pc, #356]	; (8003980 <HAL_RCC_GetSysClockFreq+0x180>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 030c 	and.w	r3, r3, #12
 8003820:	2b08      	cmp	r3, #8
 8003822:	d00d      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x40>
 8003824:	2b08      	cmp	r3, #8
 8003826:	f200 80a1 	bhi.w	800396c <HAL_RCC_GetSysClockFreq+0x16c>
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x34>
 800382e:	2b04      	cmp	r3, #4
 8003830:	d003      	beq.n	800383a <HAL_RCC_GetSysClockFreq+0x3a>
 8003832:	e09b      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b53      	ldr	r3, [pc, #332]	; (8003984 <HAL_RCC_GetSysClockFreq+0x184>)
 8003836:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003838:	e09b      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800383a:	4b53      	ldr	r3, [pc, #332]	; (8003988 <HAL_RCC_GetSysClockFreq+0x188>)
 800383c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800383e:	e098      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003840:	4b4f      	ldr	r3, [pc, #316]	; (8003980 <HAL_RCC_GetSysClockFreq+0x180>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003848:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800384a:	4b4d      	ldr	r3, [pc, #308]	; (8003980 <HAL_RCC_GetSysClockFreq+0x180>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d028      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003856:	4b4a      	ldr	r3, [pc, #296]	; (8003980 <HAL_RCC_GetSysClockFreq+0x180>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	099b      	lsrs	r3, r3, #6
 800385c:	2200      	movs	r2, #0
 800385e:	623b      	str	r3, [r7, #32]
 8003860:	627a      	str	r2, [r7, #36]	; 0x24
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003868:	2100      	movs	r1, #0
 800386a:	4b47      	ldr	r3, [pc, #284]	; (8003988 <HAL_RCC_GetSysClockFreq+0x188>)
 800386c:	fb03 f201 	mul.w	r2, r3, r1
 8003870:	2300      	movs	r3, #0
 8003872:	fb00 f303 	mul.w	r3, r0, r3
 8003876:	4413      	add	r3, r2
 8003878:	4a43      	ldr	r2, [pc, #268]	; (8003988 <HAL_RCC_GetSysClockFreq+0x188>)
 800387a:	fba0 1202 	umull	r1, r2, r0, r2
 800387e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003880:	460a      	mov	r2, r1
 8003882:	62ba      	str	r2, [r7, #40]	; 0x28
 8003884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003886:	4413      	add	r3, r2
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388c:	2200      	movs	r2, #0
 800388e:	61bb      	str	r3, [r7, #24]
 8003890:	61fa      	str	r2, [r7, #28]
 8003892:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003896:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800389a:	f7fd fa05 	bl	8000ca8 <__aeabi_uldivmod>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4613      	mov	r3, r2
 80038a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a6:	e053      	b.n	8003950 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a8:	4b35      	ldr	r3, [pc, #212]	; (8003980 <HAL_RCC_GetSysClockFreq+0x180>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	099b      	lsrs	r3, r3, #6
 80038ae:	2200      	movs	r2, #0
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	617a      	str	r2, [r7, #20]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038ba:	f04f 0b00 	mov.w	fp, #0
 80038be:	4652      	mov	r2, sl
 80038c0:	465b      	mov	r3, fp
 80038c2:	f04f 0000 	mov.w	r0, #0
 80038c6:	f04f 0100 	mov.w	r1, #0
 80038ca:	0159      	lsls	r1, r3, #5
 80038cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d0:	0150      	lsls	r0, r2, #5
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	ebb2 080a 	subs.w	r8, r2, sl
 80038da:	eb63 090b 	sbc.w	r9, r3, fp
 80038de:	f04f 0200 	mov.w	r2, #0
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038f2:	ebb2 0408 	subs.w	r4, r2, r8
 80038f6:	eb63 0509 	sbc.w	r5, r3, r9
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	00eb      	lsls	r3, r5, #3
 8003904:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003908:	00e2      	lsls	r2, r4, #3
 800390a:	4614      	mov	r4, r2
 800390c:	461d      	mov	r5, r3
 800390e:	eb14 030a 	adds.w	r3, r4, sl
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	eb45 030b 	adc.w	r3, r5, fp
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003926:	4629      	mov	r1, r5
 8003928:	028b      	lsls	r3, r1, #10
 800392a:	4621      	mov	r1, r4
 800392c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003930:	4621      	mov	r1, r4
 8003932:	028a      	lsls	r2, r1, #10
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393a:	2200      	movs	r2, #0
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	60fa      	str	r2, [r7, #12]
 8003940:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003944:	f7fd f9b0 	bl	8000ca8 <__aeabi_uldivmod>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4613      	mov	r3, r2
 800394e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_RCC_GetSysClockFreq+0x180>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	0c1b      	lsrs	r3, r3, #16
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	3301      	adds	r3, #1
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003960:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	fbb2 f3f3 	udiv	r3, r2, r3
 8003968:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800396a:	e002      	b.n	8003972 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_RCC_GetSysClockFreq+0x184>)
 800396e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003974:	4618      	mov	r0, r3
 8003976:	3740      	adds	r7, #64	; 0x40
 8003978:	46bd      	mov	sp, r7
 800397a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800
 8003984:	00f42400 	.word	0x00f42400
 8003988:	017d7840 	.word	0x017d7840

0800398c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003990:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003992:	681b      	ldr	r3, [r3, #0]
}
 8003994:	4618      	mov	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000000 	.word	0x20000000

080039a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039a8:	f7ff fff0 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	0a9b      	lsrs	r3, r3, #10
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	; (80039c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40023800 	.word	0x40023800
 80039c8:	0800a568 	.word	0x0800a568

080039cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039d0:	f7ff ffdc 	bl	800398c <HAL_RCC_GetHCLKFreq>
 80039d4:	4602      	mov	r2, r0
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	0b5b      	lsrs	r3, r3, #13
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	4903      	ldr	r1, [pc, #12]	; (80039f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039e2:	5ccb      	ldrb	r3, [r1, r3]
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40023800 	.word	0x40023800
 80039f0:	0800a568 	.word	0x0800a568

080039f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10b      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d105      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d075      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a28:	4b91      	ldr	r3, [pc, #580]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a2e:	f7fe fae5 	bl	8001ffc <HAL_GetTick>
 8003a32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003a36:	f7fe fae1 	bl	8001ffc <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e189      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a48:	4b8a      	ldr	r3, [pc, #552]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f0      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	019a      	lsls	r2, r3, #6
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	071b      	lsls	r3, r3, #28
 8003a6c:	4981      	ldr	r1, [pc, #516]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01f      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a80:	4b7c      	ldr	r3, [pc, #496]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a86:	0f1b      	lsrs	r3, r3, #28
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	019a      	lsls	r2, r3, #6
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	071b      	lsls	r3, r3, #28
 8003aa0:	4974      	ldr	r1, [pc, #464]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003aa8:	4b72      	ldr	r3, [pc, #456]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aae:	f023 021f 	bic.w	r2, r3, #31
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	496e      	ldr	r1, [pc, #440]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00d      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	019a      	lsls	r2, r3, #6
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	061b      	lsls	r3, r3, #24
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	071b      	lsls	r3, r3, #28
 8003ae0:	4964      	ldr	r1, [pc, #400]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ae8:	4b61      	ldr	r3, [pc, #388]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aee:	f7fe fa85 	bl	8001ffc <HAL_GetTick>
 8003af2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003af6:	f7fe fa81 	bl	8001ffc <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e129      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b08:	4b5a      	ldr	r3, [pc, #360]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d079      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b2c:	4b52      	ldr	r3, [pc, #328]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b32:	f7fe fa63 	bl	8001ffc <HAL_GetTick>
 8003b36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003b3a:	f7fe fa5f 	bl	8001ffc <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e107      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b4c:	4b49      	ldr	r3, [pc, #292]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b58:	d0ef      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d020      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b66:	4b43      	ldr	r3, [pc, #268]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6c:	0f1b      	lsrs	r3, r3, #28
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	019a      	lsls	r2, r3, #6
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	061b      	lsls	r3, r3, #24
 8003b80:	431a      	orrs	r2, r3
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	071b      	lsls	r3, r3, #28
 8003b86:	493b      	ldr	r1, [pc, #236]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b8e:	4b39      	ldr	r3, [pc, #228]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	4934      	ldr	r1, [pc, #208]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01e      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bb4:	4b2f      	ldr	r3, [pc, #188]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	0e1b      	lsrs	r3, r3, #24
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	019a      	lsls	r2, r3, #6
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	061b      	lsls	r3, r3, #24
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	071b      	lsls	r3, r3, #28
 8003bd4:	4927      	ldr	r1, [pc, #156]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bdc:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	4922      	ldr	r1, [pc, #136]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bf2:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bf8:	f7fe fa00 	bl	8001ffc <HAL_GetTick>
 8003bfc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bfe:	e008      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c00:	f7fe f9fc 	bl	8001ffc <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e0a4      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c12:	4b18      	ldr	r3, [pc, #96]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c1e:	d1ef      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 808b 	beq.w	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a0f      	ldr	r2, [pc, #60]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a0b      	ldr	r2, [pc, #44]	; (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c56:	f7fe f9d1 	bl	8001ffc <HAL_GetTick>
 8003c5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c5c:	e010      	b.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003c5e:	f7fe f9cd 	bl	8001ffc <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d909      	bls.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e075      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003c70:	42470068 	.word	0x42470068
 8003c74:	40023800 	.word	0x40023800
 8003c78:	42470070 	.word	0x42470070
 8003c7c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c80:	4b38      	ldr	r3, [pc, #224]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0e8      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c8c:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c94:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d02f      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d028      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003caa:	4b2f      	ldr	r3, [pc, #188]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cb4:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cba:	4b2c      	ldr	r3, [pc, #176]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003cc0:	4a29      	ldr	r2, [pc, #164]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cc6:	4b28      	ldr	r3, [pc, #160]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d114      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003cd2:	f7fe f993 	bl	8001ffc <HAL_GetTick>
 8003cd6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd8:	e00a      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cda:	f7fe f98f 	bl	8001ffc <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e035      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0ee      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d08:	d10d      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003d0a:	4b17      	ldr	r3, [pc, #92]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1e:	4912      	ldr	r1, [pc, #72]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	608b      	str	r3, [r1, #8]
 8003d24:	e005      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	4a0f      	ldr	r2, [pc, #60]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d2c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d30:	6093      	str	r3, [r2, #8]
 8003d32:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3e:	490a      	ldr	r1, [pc, #40]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d004      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003d58:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40007000 	.word	0x40007000
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	42470e40 	.word	0x42470e40
 8003d70:	424711e0 	.word	0x424711e0

08003d74 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e066      	b.n	8003e58 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	7f5b      	ldrb	r3, [r3, #29]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d105      	bne.n	8003da0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fd fc9c 	bl	80016d8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	22ca      	movs	r2, #202	; 0xca
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2253      	movs	r2, #83	; 0x53
 8003db4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f87a 	bl	8003eb0 <RTC_EnterInitMode>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d12c      	bne.n	8003e20 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6899      	ldr	r1, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	68d2      	ldr	r2, [r2, #12]
 8003e00:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6919      	ldr	r1, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	041a      	lsls	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f881 	bl	8003f1e <RTC_ExitInitMode>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d113      	bne.n	8003e4e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699a      	ldr	r2, [r3, #24]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	22ff      	movs	r2, #255	; 0xff
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e7a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e7c:	f7fe f8be 	bl	8001ffc <HAL_GetTick>
 8003e80:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e82:	e009      	b.n	8003e98 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e84:	f7fe f8ba 	bl	8001ffc <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e92:	d901      	bls.n	8003e98 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e007      	b.n	8003ea8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0ee      	beq.n	8003e84 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d122      	bne.n	8003f14 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68da      	ldr	r2, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003edc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ede:	f7fe f88d 	bl	8001ffc <HAL_GetTick>
 8003ee2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003ee4:	e00c      	b.n	8003f00 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ee6:	f7fe f889 	bl	8001ffc <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ef4:	d904      	bls.n	8003f00 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2204      	movs	r2, #4
 8003efa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <RTC_EnterInitMode+0x64>
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d1e8      	bne.n	8003ee6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f38:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff89 	bl	8003e60 <HAL_RTC_WaitForSynchro>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d004      	beq.n	8003f5e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2204      	movs	r2, #4
 8003f58:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e041      	b.n	8003ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fd fe16 	bl	8001bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	f000 fcee 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e041      	b.n	800409c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d106      	bne.n	8004032 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f839 	bl	80040a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3304      	adds	r3, #4
 8004042:	4619      	mov	r1, r3
 8004044:	4610      	mov	r0, r2
 8004046:	f000 fc9f 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <HAL_TIM_PWM_Start+0x24>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e022      	b.n	8004122 <HAL_TIM_PWM_Start+0x6a>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d109      	bne.n	80040f6 <HAL_TIM_PWM_Start+0x3e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	bf14      	ite	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	2300      	moveq	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	e015      	b.n	8004122 <HAL_TIM_PWM_Start+0x6a>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d109      	bne.n	8004110 <HAL_TIM_PWM_Start+0x58>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b01      	cmp	r3, #1
 8004106:	bf14      	ite	ne
 8004108:	2301      	movne	r3, #1
 800410a:	2300      	moveq	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	e008      	b.n	8004122 <HAL_TIM_PWM_Start+0x6a>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	bf14      	ite	ne
 800411c:	2301      	movne	r3, #1
 800411e:	2300      	moveq	r3, #0
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e07c      	b.n	8004224 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d104      	bne.n	800413a <HAL_TIM_PWM_Start+0x82>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004138:	e013      	b.n	8004162 <HAL_TIM_PWM_Start+0xaa>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b04      	cmp	r3, #4
 800413e:	d104      	bne.n	800414a <HAL_TIM_PWM_Start+0x92>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004148:	e00b      	b.n	8004162 <HAL_TIM_PWM_Start+0xaa>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d104      	bne.n	800415a <HAL_TIM_PWM_Start+0xa2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004158:	e003      	b.n	8004162 <HAL_TIM_PWM_Start+0xaa>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2201      	movs	r2, #1
 8004168:	6839      	ldr	r1, [r7, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f001 f820 	bl	80051b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a2d      	ldr	r2, [pc, #180]	; (800422c <HAL_TIM_PWM_Start+0x174>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d004      	beq.n	8004184 <HAL_TIM_PWM_Start+0xcc>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a2c      	ldr	r2, [pc, #176]	; (8004230 <HAL_TIM_PWM_Start+0x178>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d101      	bne.n	8004188 <HAL_TIM_PWM_Start+0xd0>
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <HAL_TIM_PWM_Start+0xd2>
 8004188:	2300      	movs	r3, #0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800419c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a22      	ldr	r2, [pc, #136]	; (800422c <HAL_TIM_PWM_Start+0x174>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d022      	beq.n	80041ee <HAL_TIM_PWM_Start+0x136>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b0:	d01d      	beq.n	80041ee <HAL_TIM_PWM_Start+0x136>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a1f      	ldr	r2, [pc, #124]	; (8004234 <HAL_TIM_PWM_Start+0x17c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d018      	beq.n	80041ee <HAL_TIM_PWM_Start+0x136>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a1d      	ldr	r2, [pc, #116]	; (8004238 <HAL_TIM_PWM_Start+0x180>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <HAL_TIM_PWM_Start+0x136>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1c      	ldr	r2, [pc, #112]	; (800423c <HAL_TIM_PWM_Start+0x184>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_TIM_PWM_Start+0x136>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a16      	ldr	r2, [pc, #88]	; (8004230 <HAL_TIM_PWM_Start+0x178>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d009      	beq.n	80041ee <HAL_TIM_PWM_Start+0x136>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a18      	ldr	r2, [pc, #96]	; (8004240 <HAL_TIM_PWM_Start+0x188>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIM_PWM_Start+0x136>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a16      	ldr	r2, [pc, #88]	; (8004244 <HAL_TIM_PWM_Start+0x18c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d111      	bne.n	8004212 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b06      	cmp	r3, #6
 80041fe:	d010      	beq.n	8004222 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004210:	e007      	b.n	8004222 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	40010000 	.word	0x40010000
 8004230:	40010400 	.word	0x40010400
 8004234:	40000400 	.word	0x40000400
 8004238:	40000800 	.word	0x40000800
 800423c:	40000c00 	.word	0x40000c00
 8004240:	40014000 	.word	0x40014000
 8004244:	40001800 	.word	0x40001800

08004248 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e041      	b.n	80042de <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f839 	bl	80042e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	4619      	mov	r1, r3
 8004286:	4610      	mov	r0, r2
 8004288:	f000 fb7e 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d104      	bne.n	8004316 <HAL_TIM_IC_Start+0x1a>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004312:	b2db      	uxtb	r3, r3
 8004314:	e013      	b.n	800433e <HAL_TIM_IC_Start+0x42>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b04      	cmp	r3, #4
 800431a:	d104      	bne.n	8004326 <HAL_TIM_IC_Start+0x2a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e00b      	b.n	800433e <HAL_TIM_IC_Start+0x42>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d104      	bne.n	8004336 <HAL_TIM_IC_Start+0x3a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004332:	b2db      	uxtb	r3, r3
 8004334:	e003      	b.n	800433e <HAL_TIM_IC_Start+0x42>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433c:	b2db      	uxtb	r3, r3
 800433e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d104      	bne.n	8004350 <HAL_TIM_IC_Start+0x54>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e013      	b.n	8004378 <HAL_TIM_IC_Start+0x7c>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b04      	cmp	r3, #4
 8004354:	d104      	bne.n	8004360 <HAL_TIM_IC_Start+0x64>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800435c:	b2db      	uxtb	r3, r3
 800435e:	e00b      	b.n	8004378 <HAL_TIM_IC_Start+0x7c>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b08      	cmp	r3, #8
 8004364:	d104      	bne.n	8004370 <HAL_TIM_IC_Start+0x74>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800436c:	b2db      	uxtb	r3, r3
 800436e:	e003      	b.n	8004378 <HAL_TIM_IC_Start+0x7c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004376:	b2db      	uxtb	r3, r3
 8004378:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d102      	bne.n	8004386 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004380:	7bbb      	ldrb	r3, [r7, #14]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d001      	beq.n	800438a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e081      	b.n	800448e <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d104      	bne.n	800439a <HAL_TIM_IC_Start+0x9e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004398:	e013      	b.n	80043c2 <HAL_TIM_IC_Start+0xc6>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b04      	cmp	r3, #4
 800439e:	d104      	bne.n	80043aa <HAL_TIM_IC_Start+0xae>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a8:	e00b      	b.n	80043c2 <HAL_TIM_IC_Start+0xc6>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d104      	bne.n	80043ba <HAL_TIM_IC_Start+0xbe>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b8:	e003      	b.n	80043c2 <HAL_TIM_IC_Start+0xc6>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d104      	bne.n	80043d2 <HAL_TIM_IC_Start+0xd6>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043d0:	e013      	b.n	80043fa <HAL_TIM_IC_Start+0xfe>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d104      	bne.n	80043e2 <HAL_TIM_IC_Start+0xe6>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043e0:	e00b      	b.n	80043fa <HAL_TIM_IC_Start+0xfe>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d104      	bne.n	80043f2 <HAL_TIM_IC_Start+0xf6>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f0:	e003      	b.n	80043fa <HAL_TIM_IC_Start+0xfe>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2201      	movs	r2, #1
 8004400:	6839      	ldr	r1, [r7, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fed4 	bl	80051b0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a22      	ldr	r2, [pc, #136]	; (8004498 <HAL_TIM_IC_Start+0x19c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d022      	beq.n	8004458 <HAL_TIM_IC_Start+0x15c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441a:	d01d      	beq.n	8004458 <HAL_TIM_IC_Start+0x15c>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1e      	ldr	r2, [pc, #120]	; (800449c <HAL_TIM_IC_Start+0x1a0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d018      	beq.n	8004458 <HAL_TIM_IC_Start+0x15c>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1d      	ldr	r2, [pc, #116]	; (80044a0 <HAL_TIM_IC_Start+0x1a4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d013      	beq.n	8004458 <HAL_TIM_IC_Start+0x15c>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1b      	ldr	r2, [pc, #108]	; (80044a4 <HAL_TIM_IC_Start+0x1a8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00e      	beq.n	8004458 <HAL_TIM_IC_Start+0x15c>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1a      	ldr	r2, [pc, #104]	; (80044a8 <HAL_TIM_IC_Start+0x1ac>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d009      	beq.n	8004458 <HAL_TIM_IC_Start+0x15c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a18      	ldr	r2, [pc, #96]	; (80044ac <HAL_TIM_IC_Start+0x1b0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d004      	beq.n	8004458 <HAL_TIM_IC_Start+0x15c>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a17      	ldr	r2, [pc, #92]	; (80044b0 <HAL_TIM_IC_Start+0x1b4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d111      	bne.n	800447c <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b06      	cmp	r3, #6
 8004468:	d010      	beq.n	800448c <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0201 	orr.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447a:	e007      	b.n	800448c <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40010400 	.word	0x40010400
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40001800 	.word	0x40001800

080044b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80044ce:	2302      	movs	r3, #2
 80044d0:	e088      	b.n	80045e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d11b      	bne.n	8004518 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	6819      	ldr	r1, [r3, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f000 fc9a 	bl	8004e28 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f022 020c 	bic.w	r2, r2, #12
 8004502:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6999      	ldr	r1, [r3, #24]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	619a      	str	r2, [r3, #24]
 8004516:	e060      	b.n	80045da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b04      	cmp	r3, #4
 800451c:	d11c      	bne.n	8004558 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	6819      	ldr	r1, [r3, #0]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f000 fd1e 	bl	8004f6e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699a      	ldr	r2, [r3, #24]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004540:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6999      	ldr	r1, [r3, #24]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	021a      	lsls	r2, r3, #8
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	619a      	str	r2, [r3, #24]
 8004556:	e040      	b.n	80045da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b08      	cmp	r3, #8
 800455c:	d11b      	bne.n	8004596 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	6819      	ldr	r1, [r3, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f000 fd6b 	bl	8005048 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 020c 	bic.w	r2, r2, #12
 8004580:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69d9      	ldr	r1, [r3, #28]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	61da      	str	r2, [r3, #28]
 8004594:	e021      	b.n	80045da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b0c      	cmp	r3, #12
 800459a:	d11c      	bne.n	80045d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	6819      	ldr	r1, [r3, #0]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f000 fd88 	bl	80050c0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69d9      	ldr	r1, [r3, #28]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	021a      	lsls	r2, r3, #8
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	61da      	str	r2, [r3, #28]
 80045d4:	e001      	b.n	80045da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004606:	2302      	movs	r3, #2
 8004608:	e0ae      	b.n	8004768 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b0c      	cmp	r3, #12
 8004616:	f200 809f 	bhi.w	8004758 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004655 	.word	0x08004655
 8004624:	08004759 	.word	0x08004759
 8004628:	08004759 	.word	0x08004759
 800462c:	08004759 	.word	0x08004759
 8004630:	08004695 	.word	0x08004695
 8004634:	08004759 	.word	0x08004759
 8004638:	08004759 	.word	0x08004759
 800463c:	08004759 	.word	0x08004759
 8004640:	080046d7 	.word	0x080046d7
 8004644:	08004759 	.word	0x08004759
 8004648:	08004759 	.word	0x08004759
 800464c:	08004759 	.word	0x08004759
 8004650:	08004717 	.word	0x08004717
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fa34 	bl	8004ac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0208 	orr.w	r2, r2, #8
 800466e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699a      	ldr	r2, [r3, #24]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0204 	bic.w	r2, r2, #4
 800467e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6999      	ldr	r1, [r3, #24]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	619a      	str	r2, [r3, #24]
      break;
 8004692:	e064      	b.n	800475e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fa84 	bl	8004ba8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6999      	ldr	r1, [r3, #24]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	021a      	lsls	r2, r3, #8
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	619a      	str	r2, [r3, #24]
      break;
 80046d4:	e043      	b.n	800475e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fad9 	bl	8004c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0208 	orr.w	r2, r2, #8
 80046f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69da      	ldr	r2, [r3, #28]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0204 	bic.w	r2, r2, #4
 8004700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	69d9      	ldr	r1, [r3, #28]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	61da      	str	r2, [r3, #28]
      break;
 8004714:	e023      	b.n	800475e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fb2d 	bl	8004d7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69da      	ldr	r2, [r3, #28]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69da      	ldr	r2, [r3, #28]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	69d9      	ldr	r1, [r3, #28]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	021a      	lsls	r2, r3, #8
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	61da      	str	r2, [r3, #28]
      break;
 8004756:	e002      	b.n	800475e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	75fb      	strb	r3, [r7, #23]
      break;
 800475c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004766:	7dfb      	ldrb	r3, [r7, #23]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3718      	adds	r7, #24
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_TIM_ConfigClockSource+0x1c>
 8004788:	2302      	movs	r3, #2
 800478a:	e0b4      	b.n	80048f6 <HAL_TIM_ConfigClockSource+0x186>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c4:	d03e      	beq.n	8004844 <HAL_TIM_ConfigClockSource+0xd4>
 80047c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ca:	f200 8087 	bhi.w	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 80047ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d2:	f000 8086 	beq.w	80048e2 <HAL_TIM_ConfigClockSource+0x172>
 80047d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047da:	d87f      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 80047dc:	2b70      	cmp	r3, #112	; 0x70
 80047de:	d01a      	beq.n	8004816 <HAL_TIM_ConfigClockSource+0xa6>
 80047e0:	2b70      	cmp	r3, #112	; 0x70
 80047e2:	d87b      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 80047e4:	2b60      	cmp	r3, #96	; 0x60
 80047e6:	d050      	beq.n	800488a <HAL_TIM_ConfigClockSource+0x11a>
 80047e8:	2b60      	cmp	r3, #96	; 0x60
 80047ea:	d877      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 80047ec:	2b50      	cmp	r3, #80	; 0x50
 80047ee:	d03c      	beq.n	800486a <HAL_TIM_ConfigClockSource+0xfa>
 80047f0:	2b50      	cmp	r3, #80	; 0x50
 80047f2:	d873      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 80047f4:	2b40      	cmp	r3, #64	; 0x40
 80047f6:	d058      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0x13a>
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d86f      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 80047fc:	2b30      	cmp	r3, #48	; 0x30
 80047fe:	d064      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x15a>
 8004800:	2b30      	cmp	r3, #48	; 0x30
 8004802:	d86b      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b20      	cmp	r3, #32
 8004806:	d060      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x15a>
 8004808:	2b20      	cmp	r3, #32
 800480a:	d867      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d05c      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x15a>
 8004810:	2b10      	cmp	r3, #16
 8004812:	d05a      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x15a>
 8004814:	e062      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	6899      	ldr	r1, [r3, #8]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f000 fca3 	bl	8005170 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004838:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	609a      	str	r2, [r3, #8]
      break;
 8004842:	e04f      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	6899      	ldr	r1, [r3, #8]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f000 fc8c 	bl	8005170 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004866:	609a      	str	r2, [r3, #8]
      break;
 8004868:	e03c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6818      	ldr	r0, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6859      	ldr	r1, [r3, #4]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	461a      	mov	r2, r3
 8004878:	f000 fb4a 	bl	8004f10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2150      	movs	r1, #80	; 0x50
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fc59 	bl	800513a <TIM_ITRx_SetConfig>
      break;
 8004888:	e02c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6859      	ldr	r1, [r3, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	461a      	mov	r2, r3
 8004898:	f000 fba6 	bl	8004fe8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2160      	movs	r1, #96	; 0x60
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fc49 	bl	800513a <TIM_ITRx_SetConfig>
      break;
 80048a8:	e01c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6859      	ldr	r1, [r3, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	461a      	mov	r2, r3
 80048b8:	f000 fb2a 	bl	8004f10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2140      	movs	r1, #64	; 0x40
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fc39 	bl	800513a <TIM_ITRx_SetConfig>
      break;
 80048c8:	e00c      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f000 fc30 	bl	800513a <TIM_ITRx_SetConfig>
      break;
 80048da:	e003      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      break;
 80048e0:	e000      	b.n	80048e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b0c      	cmp	r3, #12
 8004912:	d831      	bhi.n	8004978 <HAL_TIM_ReadCapturedValue+0x78>
 8004914:	a201      	add	r2, pc, #4	; (adr r2, 800491c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004951 	.word	0x08004951
 8004920:	08004979 	.word	0x08004979
 8004924:	08004979 	.word	0x08004979
 8004928:	08004979 	.word	0x08004979
 800492c:	0800495b 	.word	0x0800495b
 8004930:	08004979 	.word	0x08004979
 8004934:	08004979 	.word	0x08004979
 8004938:	08004979 	.word	0x08004979
 800493c:	08004965 	.word	0x08004965
 8004940:	08004979 	.word	0x08004979
 8004944:	08004979 	.word	0x08004979
 8004948:	08004979 	.word	0x08004979
 800494c:	0800496f 	.word	0x0800496f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004956:	60fb      	str	r3, [r7, #12]

      break;
 8004958:	e00f      	b.n	800497a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	60fb      	str	r3, [r7, #12]

      break;
 8004962:	e00a      	b.n	800497a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	60fb      	str	r3, [r7, #12]

      break;
 800496c:	e005      	b.n	800497a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	60fb      	str	r3, [r7, #12]

      break;
 8004976:	e000      	b.n	800497a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004978:	bf00      	nop
  }

  return tmpreg;
 800497a:	68fb      	ldr	r3, [r7, #12]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a40      	ldr	r2, [pc, #256]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3d      	ldr	r2, [pc, #244]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3c      	ldr	r2, [pc, #240]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a3b      	ldr	r2, [pc, #236]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3a      	ldr	r2, [pc, #232]	; (8004aac <TIM_Base_SetConfig+0x124>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2f      	ldr	r2, [pc, #188]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e8:	d027      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2c      	ldr	r2, [pc, #176]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d023      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2b      	ldr	r2, [pc, #172]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2a      	ldr	r2, [pc, #168]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a29      	ldr	r2, [pc, #164]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d017      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a28      	ldr	r2, [pc, #160]	; (8004ab0 <TIM_Base_SetConfig+0x128>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a27      	ldr	r2, [pc, #156]	; (8004ab4 <TIM_Base_SetConfig+0x12c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a26      	ldr	r2, [pc, #152]	; (8004ab8 <TIM_Base_SetConfig+0x130>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a25      	ldr	r2, [pc, #148]	; (8004abc <TIM_Base_SetConfig+0x134>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d007      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a24      	ldr	r2, [pc, #144]	; (8004ac0 <TIM_Base_SetConfig+0x138>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a23      	ldr	r2, [pc, #140]	; (8004ac4 <TIM_Base_SetConfig+0x13c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0xf8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40010400 	.word	0x40010400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800
 8004abc:	40001800 	.word	0x40001800
 8004ac0:	40001c00 	.word	0x40001c00
 8004ac4:	40002000 	.word	0x40002000

08004ac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f023 0201 	bic.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0303 	bic.w	r3, r3, #3
 8004afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f023 0302 	bic.w	r3, r3, #2
 8004b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a20      	ldr	r2, [pc, #128]	; (8004ba0 <TIM_OC1_SetConfig+0xd8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d003      	beq.n	8004b2c <TIM_OC1_SetConfig+0x64>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a1f      	ldr	r2, [pc, #124]	; (8004ba4 <TIM_OC1_SetConfig+0xdc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d10c      	bne.n	8004b46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f023 0308 	bic.w	r3, r3, #8
 8004b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f023 0304 	bic.w	r3, r3, #4
 8004b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <TIM_OC1_SetConfig+0xd8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d003      	beq.n	8004b56 <TIM_OC1_SetConfig+0x8e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a14      	ldr	r2, [pc, #80]	; (8004ba4 <TIM_OC1_SetConfig+0xdc>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d111      	bne.n	8004b7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	621a      	str	r2, [r3, #32]
}
 8004b94:	bf00      	nop
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40010400 	.word	0x40010400

08004ba8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f023 0210 	bic.w	r2, r3, #16
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	021b      	lsls	r3, r3, #8
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f023 0320 	bic.w	r3, r3, #32
 8004bf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a22      	ldr	r2, [pc, #136]	; (8004c8c <TIM_OC2_SetConfig+0xe4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d003      	beq.n	8004c10 <TIM_OC2_SetConfig+0x68>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a21      	ldr	r2, [pc, #132]	; (8004c90 <TIM_OC2_SetConfig+0xe8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d10d      	bne.n	8004c2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a17      	ldr	r2, [pc, #92]	; (8004c8c <TIM_OC2_SetConfig+0xe4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_OC2_SetConfig+0x94>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a16      	ldr	r2, [pc, #88]	; (8004c90 <TIM_OC2_SetConfig+0xe8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d113      	bne.n	8004c64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	621a      	str	r2, [r3, #32]
}
 8004c7e:	bf00      	nop
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	40010400 	.word	0x40010400

08004c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0303 	bic.w	r3, r3, #3
 8004cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a21      	ldr	r2, [pc, #132]	; (8004d74 <TIM_OC3_SetConfig+0xe0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_OC3_SetConfig+0x66>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a20      	ldr	r2, [pc, #128]	; (8004d78 <TIM_OC3_SetConfig+0xe4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d10d      	bne.n	8004d16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a16      	ldr	r2, [pc, #88]	; (8004d74 <TIM_OC3_SetConfig+0xe0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d003      	beq.n	8004d26 <TIM_OC3_SetConfig+0x92>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a15      	ldr	r2, [pc, #84]	; (8004d78 <TIM_OC3_SetConfig+0xe4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d113      	bne.n	8004d4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	621a      	str	r2, [r3, #32]
}
 8004d68:	bf00      	nop
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40010400 	.word	0x40010400

08004d7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	031b      	lsls	r3, r3, #12
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a12      	ldr	r2, [pc, #72]	; (8004e20 <TIM_OC4_SetConfig+0xa4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_OC4_SetConfig+0x68>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a11      	ldr	r2, [pc, #68]	; (8004e24 <TIM_OC4_SetConfig+0xa8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d109      	bne.n	8004df8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	019b      	lsls	r3, r3, #6
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	621a      	str	r2, [r3, #32]
}
 8004e12:	bf00      	nop
 8004e14:	371c      	adds	r7, #28
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40010000 	.word	0x40010000
 8004e24:	40010400 	.word	0x40010400

08004e28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
 8004e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	f023 0201 	bic.w	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4a28      	ldr	r2, [pc, #160]	; (8004ef4 <TIM_TI1_SetConfig+0xcc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d01b      	beq.n	8004e8e <TIM_TI1_SetConfig+0x66>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5c:	d017      	beq.n	8004e8e <TIM_TI1_SetConfig+0x66>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a25      	ldr	r2, [pc, #148]	; (8004ef8 <TIM_TI1_SetConfig+0xd0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <TIM_TI1_SetConfig+0x66>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4a24      	ldr	r2, [pc, #144]	; (8004efc <TIM_TI1_SetConfig+0xd4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00f      	beq.n	8004e8e <TIM_TI1_SetConfig+0x66>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4a23      	ldr	r2, [pc, #140]	; (8004f00 <TIM_TI1_SetConfig+0xd8>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d00b      	beq.n	8004e8e <TIM_TI1_SetConfig+0x66>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a22      	ldr	r2, [pc, #136]	; (8004f04 <TIM_TI1_SetConfig+0xdc>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d007      	beq.n	8004e8e <TIM_TI1_SetConfig+0x66>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <TIM_TI1_SetConfig+0xe0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d003      	beq.n	8004e8e <TIM_TI1_SetConfig+0x66>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <TIM_TI1_SetConfig+0xe4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d101      	bne.n	8004e92 <TIM_TI1_SetConfig+0x6a>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <TIM_TI1_SetConfig+0x6c>
 8004e92:	2300      	movs	r3, #0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f023 0303 	bic.w	r3, r3, #3
 8004e9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	e003      	b.n	8004eb2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f043 0301 	orr.w	r3, r3, #1
 8004eb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f023 030a 	bic.w	r3, r3, #10
 8004ecc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f003 030a 	and.w	r3, r3, #10
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	621a      	str	r2, [r3, #32]
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40000800 	.word	0x40000800
 8004f00:	40000c00 	.word	0x40000c00
 8004f04:	40010400 	.word	0x40010400
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	40001800 	.word	0x40001800

08004f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f023 030a 	bic.w	r3, r3, #10
 8004f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	621a      	str	r2, [r3, #32]
}
 8004f62:	bf00      	nop
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b087      	sub	sp, #28
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f023 0210 	bic.w	r2, r3, #16
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	031b      	lsls	r3, r3, #12
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	011b      	lsls	r3, r3, #4
 8004fc6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	621a      	str	r2, [r3, #32]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f023 0210 	bic.w	r2, r3, #16
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005012:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	031b      	lsls	r3, r3, #12
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005024:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	621a      	str	r2, [r3, #32]
}
 800503c:	bf00      	nop
 800503e:	371c      	adds	r7, #28
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f023 0303 	bic.w	r3, r3, #3
 8005074:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005084:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	b2db      	uxtb	r3, r3
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005098:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	621a      	str	r2, [r3, #32]
}
 80050b4:	bf00      	nop
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	031b      	lsls	r3, r3, #12
 8005104:	b29b      	uxth	r3, r3
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005112:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	031b      	lsls	r3, r3, #12
 8005118:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	697a      	ldr	r2, [r7, #20]
 8005126:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	621a      	str	r2, [r3, #32]
}
 800512e:	bf00      	nop
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800513a:	b480      	push	{r7}
 800513c:	b085      	sub	sp, #20
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	f043 0307 	orr.w	r3, r3, #7
 800515c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	609a      	str	r2, [r3, #8]
}
 8005164:	bf00      	nop
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800518a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	021a      	lsls	r2, r3, #8
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	431a      	orrs	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4313      	orrs	r3, r2
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	609a      	str	r2, [r3, #8]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f003 031f 	and.w	r3, r3, #31
 80051c2:	2201      	movs	r2, #1
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a1a      	ldr	r2, [r3, #32]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	43db      	mvns	r3, r3
 80051d2:	401a      	ands	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a1a      	ldr	r2, [r3, #32]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	fa01 f303 	lsl.w	r3, r1, r3
 80051e8:	431a      	orrs	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	621a      	str	r2, [r3, #32]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
	...

080051fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005210:	2302      	movs	r3, #2
 8005212:	e05a      	b.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a21      	ldr	r2, [pc, #132]	; (80052d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d022      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d01d      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1d      	ldr	r2, [pc, #116]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d018      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1b      	ldr	r2, [pc, #108]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d013      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1a      	ldr	r2, [pc, #104]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d00e      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d009      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a17      	ldr	r2, [pc, #92]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d004      	beq.n	800529e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d10c      	bne.n	80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40010000 	.word	0x40010000
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800
 80052e4:	40000c00 	.word	0x40000c00
 80052e8:	40010400 	.word	0x40010400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40001800 	.word	0x40001800

080052f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e03f      	b.n	8005386 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fc fd60 	bl	8001de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2224      	movs	r2, #36	; 0x24
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68da      	ldr	r2, [r3, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005336:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f9cb 	bl	80056d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800534c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695a      	ldr	r2, [r3, #20]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800535c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800536c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b08a      	sub	sp, #40	; 0x28
 8005392:	af02      	add	r7, sp, #8
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	603b      	str	r3, [r7, #0]
 800539a:	4613      	mov	r3, r2
 800539c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d17c      	bne.n	80054a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HAL_UART_Transmit+0x2c>
 80053b4:	88fb      	ldrh	r3, [r7, #6]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e075      	b.n	80054aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_UART_Transmit+0x3e>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e06e      	b.n	80054aa <HAL_UART_Transmit+0x11c>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2221      	movs	r2, #33	; 0x21
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053e2:	f7fc fe0b 	bl	8001ffc <HAL_GetTick>
 80053e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	88fa      	ldrh	r2, [r7, #6]
 80053ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	88fa      	ldrh	r2, [r7, #6]
 80053f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fc:	d108      	bne.n	8005410 <HAL_UART_Transmit+0x82>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d104      	bne.n	8005410 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005406:	2300      	movs	r3, #0
 8005408:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	61bb      	str	r3, [r7, #24]
 800540e:	e003      	b.n	8005418 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005414:	2300      	movs	r3, #0
 8005416:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005420:	e02a      	b.n	8005478 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2200      	movs	r2, #0
 800542a:	2180      	movs	r1, #128	; 0x80
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f8e2 	bl	80055f6 <UART_WaitOnFlagUntilTimeout>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e036      	b.n	80054aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10b      	bne.n	800545a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	461a      	mov	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005450:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	3302      	adds	r3, #2
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	e007      	b.n	800546a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	781a      	ldrb	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	3301      	adds	r3, #1
 8005468:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1cf      	bne.n	8005422 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2200      	movs	r2, #0
 800548a:	2140      	movs	r1, #64	; 0x40
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f8b2 	bl	80055f6 <UART_WaitOnFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e006      	b.n	80054aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	e000      	b.n	80054aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054a8:	2302      	movs	r3, #2
  }
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3720      	adds	r7, #32
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b08a      	sub	sp, #40	; 0x28
 80054b6:	af02      	add	r7, sp, #8
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	f040 808c 	bne.w	80055ec <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <HAL_UART_Receive+0x2e>
 80054da:	88fb      	ldrh	r3, [r7, #6]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e084      	b.n	80055ee <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_UART_Receive+0x40>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e07d      	b.n	80055ee <HAL_UART_Receive+0x13c>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2222      	movs	r2, #34	; 0x22
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800550e:	f7fc fd75 	bl	8001ffc <HAL_GetTick>
 8005512:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	88fa      	ldrh	r2, [r7, #6]
 8005518:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	88fa      	ldrh	r2, [r7, #6]
 800551e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005528:	d108      	bne.n	800553c <HAL_UART_Receive+0x8a>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d104      	bne.n	800553c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	61bb      	str	r3, [r7, #24]
 800553a:	e003      	b.n	8005544 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005540:	2300      	movs	r3, #0
 8005542:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800554c:	e043      	b.n	80055d6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2200      	movs	r2, #0
 8005556:	2120      	movs	r1, #32
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 f84c 	bl	80055f6 <UART_WaitOnFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e042      	b.n	80055ee <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10c      	bne.n	8005588 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	b29b      	uxth	r3, r3
 8005576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557a:	b29a      	uxth	r2, r3
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	3302      	adds	r3, #2
 8005584:	61bb      	str	r3, [r7, #24]
 8005586:	e01f      	b.n	80055c8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005590:	d007      	beq.n	80055a2 <HAL_UART_Receive+0xf0>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <HAL_UART_Receive+0xfe>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	e008      	b.n	80055c2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3301      	adds	r3, #1
 80055c6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1b6      	bne.n	800554e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	e000      	b.n	80055ee <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80055ec:	2302      	movs	r3, #2
  }
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3720      	adds	r7, #32
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b090      	sub	sp, #64	; 0x40
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	603b      	str	r3, [r7, #0]
 8005602:	4613      	mov	r3, r2
 8005604:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005606:	e050      	b.n	80056aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	d04c      	beq.n	80056aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <UART_WaitOnFlagUntilTimeout+0x30>
 8005616:	f7fc fcf1 	bl	8001ffc <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005622:	429a      	cmp	r2, r3
 8005624:	d241      	bcs.n	80056aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	330c      	adds	r3, #12
 800562c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	330c      	adds	r3, #12
 8005644:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005646:	637a      	str	r2, [r7, #52]	; 0x34
 8005648:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800564c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e5      	bne.n	8005626 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3314      	adds	r3, #20
 8005660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	613b      	str	r3, [r7, #16]
   return(result);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	63bb      	str	r3, [r7, #56]	; 0x38
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3314      	adds	r3, #20
 8005678:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800567a:	623a      	str	r2, [r7, #32]
 800567c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	69f9      	ldr	r1, [r7, #28]
 8005680:	6a3a      	ldr	r2, [r7, #32]
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	61bb      	str	r3, [r7, #24]
   return(result);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e5      	bne.n	800565a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e00f      	b.n	80056ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4013      	ands	r3, r2
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	bf0c      	ite	eq
 80056ba:	2301      	moveq	r3, #1
 80056bc:	2300      	movne	r3, #0
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	461a      	mov	r2, r3
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d09f      	beq.n	8005608 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3740      	adds	r7, #64	; 0x40
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d8:	b0c0      	sub	sp, #256	; 0x100
 80056da:	af00      	add	r7, sp, #0
 80056dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f0:	68d9      	ldr	r1, [r3, #12]
 80056f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	ea40 0301 	orr.w	r3, r0, r1
 80056fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	431a      	orrs	r2, r3
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	431a      	orrs	r2, r3
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800572c:	f021 010c 	bic.w	r1, r1, #12
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800573a:	430b      	orrs	r3, r1
 800573c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800573e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800574a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574e:	6999      	ldr	r1, [r3, #24]
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	ea40 0301 	orr.w	r3, r0, r1
 800575a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b8f      	ldr	r3, [pc, #572]	; (80059a0 <UART_SetConfig+0x2cc>)
 8005764:	429a      	cmp	r2, r3
 8005766:	d005      	beq.n	8005774 <UART_SetConfig+0xa0>
 8005768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b8d      	ldr	r3, [pc, #564]	; (80059a4 <UART_SetConfig+0x2d0>)
 8005770:	429a      	cmp	r2, r3
 8005772:	d104      	bne.n	800577e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005774:	f7fe f92a 	bl	80039cc <HAL_RCC_GetPCLK2Freq>
 8005778:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800577c:	e003      	b.n	8005786 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800577e:	f7fe f911 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 8005782:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578a:	69db      	ldr	r3, [r3, #28]
 800578c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005790:	f040 810c 	bne.w	80059ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005798:	2200      	movs	r2, #0
 800579a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800579e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057a6:	4622      	mov	r2, r4
 80057a8:	462b      	mov	r3, r5
 80057aa:	1891      	adds	r1, r2, r2
 80057ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80057ae:	415b      	adcs	r3, r3
 80057b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057b6:	4621      	mov	r1, r4
 80057b8:	eb12 0801 	adds.w	r8, r2, r1
 80057bc:	4629      	mov	r1, r5
 80057be:	eb43 0901 	adc.w	r9, r3, r1
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057d6:	4690      	mov	r8, r2
 80057d8:	4699      	mov	r9, r3
 80057da:	4623      	mov	r3, r4
 80057dc:	eb18 0303 	adds.w	r3, r8, r3
 80057e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057e4:	462b      	mov	r3, r5
 80057e6:	eb49 0303 	adc.w	r3, r9, r3
 80057ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005802:	460b      	mov	r3, r1
 8005804:	18db      	adds	r3, r3, r3
 8005806:	653b      	str	r3, [r7, #80]	; 0x50
 8005808:	4613      	mov	r3, r2
 800580a:	eb42 0303 	adc.w	r3, r2, r3
 800580e:	657b      	str	r3, [r7, #84]	; 0x54
 8005810:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005814:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005818:	f7fb fa46 	bl	8000ca8 <__aeabi_uldivmod>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4b61      	ldr	r3, [pc, #388]	; (80059a8 <UART_SetConfig+0x2d4>)
 8005822:	fba3 2302 	umull	r2, r3, r3, r2
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	011c      	lsls	r4, r3, #4
 800582a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800582e:	2200      	movs	r2, #0
 8005830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005834:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005838:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800583c:	4642      	mov	r2, r8
 800583e:	464b      	mov	r3, r9
 8005840:	1891      	adds	r1, r2, r2
 8005842:	64b9      	str	r1, [r7, #72]	; 0x48
 8005844:	415b      	adcs	r3, r3
 8005846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005848:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800584c:	4641      	mov	r1, r8
 800584e:	eb12 0a01 	adds.w	sl, r2, r1
 8005852:	4649      	mov	r1, r9
 8005854:	eb43 0b01 	adc.w	fp, r3, r1
 8005858:	f04f 0200 	mov.w	r2, #0
 800585c:	f04f 0300 	mov.w	r3, #0
 8005860:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005864:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005868:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800586c:	4692      	mov	sl, r2
 800586e:	469b      	mov	fp, r3
 8005870:	4643      	mov	r3, r8
 8005872:	eb1a 0303 	adds.w	r3, sl, r3
 8005876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800587a:	464b      	mov	r3, r9
 800587c:	eb4b 0303 	adc.w	r3, fp, r3
 8005880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005890:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005894:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005898:	460b      	mov	r3, r1
 800589a:	18db      	adds	r3, r3, r3
 800589c:	643b      	str	r3, [r7, #64]	; 0x40
 800589e:	4613      	mov	r3, r2
 80058a0:	eb42 0303 	adc.w	r3, r2, r3
 80058a4:	647b      	str	r3, [r7, #68]	; 0x44
 80058a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058ae:	f7fb f9fb 	bl	8000ca8 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4611      	mov	r1, r2
 80058b8:	4b3b      	ldr	r3, [pc, #236]	; (80059a8 <UART_SetConfig+0x2d4>)
 80058ba:	fba3 2301 	umull	r2, r3, r3, r1
 80058be:	095b      	lsrs	r3, r3, #5
 80058c0:	2264      	movs	r2, #100	; 0x64
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	1acb      	subs	r3, r1, r3
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058ce:	4b36      	ldr	r3, [pc, #216]	; (80059a8 <UART_SetConfig+0x2d4>)
 80058d0:	fba3 2302 	umull	r2, r3, r3, r2
 80058d4:	095b      	lsrs	r3, r3, #5
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058dc:	441c      	add	r4, r3
 80058de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e2:	2200      	movs	r2, #0
 80058e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058f0:	4642      	mov	r2, r8
 80058f2:	464b      	mov	r3, r9
 80058f4:	1891      	adds	r1, r2, r2
 80058f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80058f8:	415b      	adcs	r3, r3
 80058fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005900:	4641      	mov	r1, r8
 8005902:	1851      	adds	r1, r2, r1
 8005904:	6339      	str	r1, [r7, #48]	; 0x30
 8005906:	4649      	mov	r1, r9
 8005908:	414b      	adcs	r3, r1
 800590a:	637b      	str	r3, [r7, #52]	; 0x34
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005918:	4659      	mov	r1, fp
 800591a:	00cb      	lsls	r3, r1, #3
 800591c:	4651      	mov	r1, sl
 800591e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005922:	4651      	mov	r1, sl
 8005924:	00ca      	lsls	r2, r1, #3
 8005926:	4610      	mov	r0, r2
 8005928:	4619      	mov	r1, r3
 800592a:	4603      	mov	r3, r0
 800592c:	4642      	mov	r2, r8
 800592e:	189b      	adds	r3, r3, r2
 8005930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005934:	464b      	mov	r3, r9
 8005936:	460a      	mov	r2, r1
 8005938:	eb42 0303 	adc.w	r3, r2, r3
 800593c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800594c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005950:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005954:	460b      	mov	r3, r1
 8005956:	18db      	adds	r3, r3, r3
 8005958:	62bb      	str	r3, [r7, #40]	; 0x28
 800595a:	4613      	mov	r3, r2
 800595c:	eb42 0303 	adc.w	r3, r2, r3
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005962:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005966:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800596a:	f7fb f99d 	bl	8000ca8 <__aeabi_uldivmod>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <UART_SetConfig+0x2d4>)
 8005974:	fba3 1302 	umull	r1, r3, r3, r2
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	2164      	movs	r1, #100	; 0x64
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	3332      	adds	r3, #50	; 0x32
 8005986:	4a08      	ldr	r2, [pc, #32]	; (80059a8 <UART_SetConfig+0x2d4>)
 8005988:	fba2 2303 	umull	r2, r3, r2, r3
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	f003 0207 	and.w	r2, r3, #7
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4422      	add	r2, r4
 800599a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800599c:	e105      	b.n	8005baa <UART_SetConfig+0x4d6>
 800599e:	bf00      	nop
 80059a0:	40011000 	.word	0x40011000
 80059a4:	40011400 	.word	0x40011400
 80059a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059b0:	2200      	movs	r2, #0
 80059b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059be:	4642      	mov	r2, r8
 80059c0:	464b      	mov	r3, r9
 80059c2:	1891      	adds	r1, r2, r2
 80059c4:	6239      	str	r1, [r7, #32]
 80059c6:	415b      	adcs	r3, r3
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
 80059ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ce:	4641      	mov	r1, r8
 80059d0:	1854      	adds	r4, r2, r1
 80059d2:	4649      	mov	r1, r9
 80059d4:	eb43 0501 	adc.w	r5, r3, r1
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	00eb      	lsls	r3, r5, #3
 80059e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059e6:	00e2      	lsls	r2, r4, #3
 80059e8:	4614      	mov	r4, r2
 80059ea:	461d      	mov	r5, r3
 80059ec:	4643      	mov	r3, r8
 80059ee:	18e3      	adds	r3, r4, r3
 80059f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059f4:	464b      	mov	r3, r9
 80059f6:	eb45 0303 	adc.w	r3, r5, r3
 80059fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	008b      	lsls	r3, r1, #2
 8005a1e:	4621      	mov	r1, r4
 8005a20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a24:	4621      	mov	r1, r4
 8005a26:	008a      	lsls	r2, r1, #2
 8005a28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a2c:	f7fb f93c 	bl	8000ca8 <__aeabi_uldivmod>
 8005a30:	4602      	mov	r2, r0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4b60      	ldr	r3, [pc, #384]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005a36:	fba3 2302 	umull	r2, r3, r3, r2
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	011c      	lsls	r4, r3, #4
 8005a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a50:	4642      	mov	r2, r8
 8005a52:	464b      	mov	r3, r9
 8005a54:	1891      	adds	r1, r2, r2
 8005a56:	61b9      	str	r1, [r7, #24]
 8005a58:	415b      	adcs	r3, r3
 8005a5a:	61fb      	str	r3, [r7, #28]
 8005a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a60:	4641      	mov	r1, r8
 8005a62:	1851      	adds	r1, r2, r1
 8005a64:	6139      	str	r1, [r7, #16]
 8005a66:	4649      	mov	r1, r9
 8005a68:	414b      	adcs	r3, r1
 8005a6a:	617b      	str	r3, [r7, #20]
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a78:	4659      	mov	r1, fp
 8005a7a:	00cb      	lsls	r3, r1, #3
 8005a7c:	4651      	mov	r1, sl
 8005a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a82:	4651      	mov	r1, sl
 8005a84:	00ca      	lsls	r2, r1, #3
 8005a86:	4610      	mov	r0, r2
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	189b      	adds	r3, r3, r2
 8005a90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a94:	464b      	mov	r3, r9
 8005a96:	460a      	mov	r2, r1
 8005a98:	eb42 0303 	adc.w	r3, r2, r3
 8005a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ab8:	4649      	mov	r1, r9
 8005aba:	008b      	lsls	r3, r1, #2
 8005abc:	4641      	mov	r1, r8
 8005abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ac2:	4641      	mov	r1, r8
 8005ac4:	008a      	lsls	r2, r1, #2
 8005ac6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005aca:	f7fb f8ed 	bl	8000ca8 <__aeabi_uldivmod>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4b39      	ldr	r3, [pc, #228]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	2164      	movs	r1, #100	; 0x64
 8005adc:	fb01 f303 	mul.w	r3, r1, r3
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	3332      	adds	r3, #50	; 0x32
 8005ae6:	4a34      	ldr	r2, [pc, #208]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af2:	441c      	add	r4, r3
 8005af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af8:	2200      	movs	r2, #0
 8005afa:	673b      	str	r3, [r7, #112]	; 0x70
 8005afc:	677a      	str	r2, [r7, #116]	; 0x74
 8005afe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b02:	4642      	mov	r2, r8
 8005b04:	464b      	mov	r3, r9
 8005b06:	1891      	adds	r1, r2, r2
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	415b      	adcs	r3, r3
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b12:	4641      	mov	r1, r8
 8005b14:	1851      	adds	r1, r2, r1
 8005b16:	6039      	str	r1, [r7, #0]
 8005b18:	4649      	mov	r1, r9
 8005b1a:	414b      	adcs	r3, r1
 8005b1c:	607b      	str	r3, [r7, #4]
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b2a:	4659      	mov	r1, fp
 8005b2c:	00cb      	lsls	r3, r1, #3
 8005b2e:	4651      	mov	r1, sl
 8005b30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b34:	4651      	mov	r1, sl
 8005b36:	00ca      	lsls	r2, r1, #3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	4642      	mov	r2, r8
 8005b40:	189b      	adds	r3, r3, r2
 8005b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b44:	464b      	mov	r3, r9
 8005b46:	460a      	mov	r2, r1
 8005b48:	eb42 0303 	adc.w	r3, r2, r3
 8005b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	663b      	str	r3, [r7, #96]	; 0x60
 8005b58:	667a      	str	r2, [r7, #100]	; 0x64
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	f04f 0300 	mov.w	r3, #0
 8005b62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b66:	4649      	mov	r1, r9
 8005b68:	008b      	lsls	r3, r1, #2
 8005b6a:	4641      	mov	r1, r8
 8005b6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b70:	4641      	mov	r1, r8
 8005b72:	008a      	lsls	r2, r1, #2
 8005b74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b78:	f7fb f896 	bl	8000ca8 <__aeabi_uldivmod>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4b0d      	ldr	r3, [pc, #52]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005b82:	fba3 1302 	umull	r1, r3, r3, r2
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	2164      	movs	r1, #100	; 0x64
 8005b8a:	fb01 f303 	mul.w	r3, r1, r3
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	3332      	adds	r3, #50	; 0x32
 8005b94:	4a08      	ldr	r2, [pc, #32]	; (8005bb8 <UART_SetConfig+0x4e4>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	f003 020f 	and.w	r2, r3, #15
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4422      	add	r2, r4
 8005ba8:	609a      	str	r2, [r3, #8]
}
 8005baa:	bf00      	nop
 8005bac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bb6:	bf00      	nop
 8005bb8:	51eb851f 	.word	0x51eb851f

08005bbc <__errno>:
 8005bbc:	4b01      	ldr	r3, [pc, #4]	; (8005bc4 <__errno+0x8>)
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	2000000c 	.word	0x2000000c

08005bc8 <__libc_init_array>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	4d0d      	ldr	r5, [pc, #52]	; (8005c00 <__libc_init_array+0x38>)
 8005bcc:	4c0d      	ldr	r4, [pc, #52]	; (8005c04 <__libc_init_array+0x3c>)
 8005bce:	1b64      	subs	r4, r4, r5
 8005bd0:	10a4      	asrs	r4, r4, #2
 8005bd2:	2600      	movs	r6, #0
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	d109      	bne.n	8005bec <__libc_init_array+0x24>
 8005bd8:	4d0b      	ldr	r5, [pc, #44]	; (8005c08 <__libc_init_array+0x40>)
 8005bda:	4c0c      	ldr	r4, [pc, #48]	; (8005c0c <__libc_init_array+0x44>)
 8005bdc:	f004 fca8 	bl	800a530 <_init>
 8005be0:	1b64      	subs	r4, r4, r5
 8005be2:	10a4      	asrs	r4, r4, #2
 8005be4:	2600      	movs	r6, #0
 8005be6:	42a6      	cmp	r6, r4
 8005be8:	d105      	bne.n	8005bf6 <__libc_init_array+0x2e>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf0:	4798      	blx	r3
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7ee      	b.n	8005bd4 <__libc_init_array+0xc>
 8005bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfa:	4798      	blx	r3
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	e7f2      	b.n	8005be6 <__libc_init_array+0x1e>
 8005c00:	0800aa24 	.word	0x0800aa24
 8005c04:	0800aa24 	.word	0x0800aa24
 8005c08:	0800aa24 	.word	0x0800aa24
 8005c0c:	0800aa28 	.word	0x0800aa28

08005c10 <memset>:
 8005c10:	4402      	add	r2, r0
 8005c12:	4603      	mov	r3, r0
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d100      	bne.n	8005c1a <memset+0xa>
 8005c18:	4770      	bx	lr
 8005c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1e:	e7f9      	b.n	8005c14 <memset+0x4>

08005c20 <__cvt>:
 8005c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c24:	ec55 4b10 	vmov	r4, r5, d0
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	460e      	mov	r6, r1
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	462b      	mov	r3, r5
 8005c30:	bfbb      	ittet	lt
 8005c32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c36:	461d      	movlt	r5, r3
 8005c38:	2300      	movge	r3, #0
 8005c3a:	232d      	movlt	r3, #45	; 0x2d
 8005c3c:	700b      	strb	r3, [r1, #0]
 8005c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c44:	4691      	mov	r9, r2
 8005c46:	f023 0820 	bic.w	r8, r3, #32
 8005c4a:	bfbc      	itt	lt
 8005c4c:	4622      	movlt	r2, r4
 8005c4e:	4614      	movlt	r4, r2
 8005c50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c54:	d005      	beq.n	8005c62 <__cvt+0x42>
 8005c56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c5a:	d100      	bne.n	8005c5e <__cvt+0x3e>
 8005c5c:	3601      	adds	r6, #1
 8005c5e:	2102      	movs	r1, #2
 8005c60:	e000      	b.n	8005c64 <__cvt+0x44>
 8005c62:	2103      	movs	r1, #3
 8005c64:	ab03      	add	r3, sp, #12
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	ab02      	add	r3, sp, #8
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	ec45 4b10 	vmov	d0, r4, r5
 8005c70:	4653      	mov	r3, sl
 8005c72:	4632      	mov	r2, r6
 8005c74:	f001 fdc4 	bl	8007800 <_dtoa_r>
 8005c78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c7c:	4607      	mov	r7, r0
 8005c7e:	d102      	bne.n	8005c86 <__cvt+0x66>
 8005c80:	f019 0f01 	tst.w	r9, #1
 8005c84:	d022      	beq.n	8005ccc <__cvt+0xac>
 8005c86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c8a:	eb07 0906 	add.w	r9, r7, r6
 8005c8e:	d110      	bne.n	8005cb2 <__cvt+0x92>
 8005c90:	783b      	ldrb	r3, [r7, #0]
 8005c92:	2b30      	cmp	r3, #48	; 0x30
 8005c94:	d10a      	bne.n	8005cac <__cvt+0x8c>
 8005c96:	2200      	movs	r2, #0
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	f7fa ff23 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ca2:	b918      	cbnz	r0, 8005cac <__cvt+0x8c>
 8005ca4:	f1c6 0601 	rsb	r6, r6, #1
 8005ca8:	f8ca 6000 	str.w	r6, [sl]
 8005cac:	f8da 3000 	ldr.w	r3, [sl]
 8005cb0:	4499      	add	r9, r3
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	4629      	mov	r1, r5
 8005cba:	f7fa ff15 	bl	8000ae8 <__aeabi_dcmpeq>
 8005cbe:	b108      	cbz	r0, 8005cc4 <__cvt+0xa4>
 8005cc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8005cc4:	2230      	movs	r2, #48	; 0x30
 8005cc6:	9b03      	ldr	r3, [sp, #12]
 8005cc8:	454b      	cmp	r3, r9
 8005cca:	d307      	bcc.n	8005cdc <__cvt+0xbc>
 8005ccc:	9b03      	ldr	r3, [sp, #12]
 8005cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cd0:	1bdb      	subs	r3, r3, r7
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	b004      	add	sp, #16
 8005cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cdc:	1c59      	adds	r1, r3, #1
 8005cde:	9103      	str	r1, [sp, #12]
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	e7f0      	b.n	8005cc6 <__cvt+0xa6>

08005ce4 <__exponent>:
 8005ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2900      	cmp	r1, #0
 8005cea:	bfb8      	it	lt
 8005cec:	4249      	neglt	r1, r1
 8005cee:	f803 2b02 	strb.w	r2, [r3], #2
 8005cf2:	bfb4      	ite	lt
 8005cf4:	222d      	movlt	r2, #45	; 0x2d
 8005cf6:	222b      	movge	r2, #43	; 0x2b
 8005cf8:	2909      	cmp	r1, #9
 8005cfa:	7042      	strb	r2, [r0, #1]
 8005cfc:	dd2a      	ble.n	8005d54 <__exponent+0x70>
 8005cfe:	f10d 0407 	add.w	r4, sp, #7
 8005d02:	46a4      	mov	ip, r4
 8005d04:	270a      	movs	r7, #10
 8005d06:	46a6      	mov	lr, r4
 8005d08:	460a      	mov	r2, r1
 8005d0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d0e:	fb07 1516 	mls	r5, r7, r6, r1
 8005d12:	3530      	adds	r5, #48	; 0x30
 8005d14:	2a63      	cmp	r2, #99	; 0x63
 8005d16:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d1e:	4631      	mov	r1, r6
 8005d20:	dcf1      	bgt.n	8005d06 <__exponent+0x22>
 8005d22:	3130      	adds	r1, #48	; 0x30
 8005d24:	f1ae 0502 	sub.w	r5, lr, #2
 8005d28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d2c:	1c44      	adds	r4, r0, #1
 8005d2e:	4629      	mov	r1, r5
 8005d30:	4561      	cmp	r1, ip
 8005d32:	d30a      	bcc.n	8005d4a <__exponent+0x66>
 8005d34:	f10d 0209 	add.w	r2, sp, #9
 8005d38:	eba2 020e 	sub.w	r2, r2, lr
 8005d3c:	4565      	cmp	r5, ip
 8005d3e:	bf88      	it	hi
 8005d40:	2200      	movhi	r2, #0
 8005d42:	4413      	add	r3, r2
 8005d44:	1a18      	subs	r0, r3, r0
 8005d46:	b003      	add	sp, #12
 8005d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d52:	e7ed      	b.n	8005d30 <__exponent+0x4c>
 8005d54:	2330      	movs	r3, #48	; 0x30
 8005d56:	3130      	adds	r1, #48	; 0x30
 8005d58:	7083      	strb	r3, [r0, #2]
 8005d5a:	70c1      	strb	r1, [r0, #3]
 8005d5c:	1d03      	adds	r3, r0, #4
 8005d5e:	e7f1      	b.n	8005d44 <__exponent+0x60>

08005d60 <_printf_float>:
 8005d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	ed2d 8b02 	vpush	{d8}
 8005d68:	b08d      	sub	sp, #52	; 0x34
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d70:	4616      	mov	r6, r2
 8005d72:	461f      	mov	r7, r3
 8005d74:	4605      	mov	r5, r0
 8005d76:	f002 ff95 	bl	8008ca4 <_localeconv_r>
 8005d7a:	f8d0 a000 	ldr.w	sl, [r0]
 8005d7e:	4650      	mov	r0, sl
 8005d80:	f7fa fa36 	bl	80001f0 <strlen>
 8005d84:	2300      	movs	r3, #0
 8005d86:	930a      	str	r3, [sp, #40]	; 0x28
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	9305      	str	r3, [sp, #20]
 8005d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d94:	3307      	adds	r3, #7
 8005d96:	f023 0307 	bic.w	r3, r3, #7
 8005d9a:	f103 0208 	add.w	r2, r3, #8
 8005d9e:	f8c8 2000 	str.w	r2, [r8]
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005daa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005dae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005db2:	9307      	str	r3, [sp, #28]
 8005db4:	f8cd 8018 	str.w	r8, [sp, #24]
 8005db8:	ee08 0a10 	vmov	s16, r0
 8005dbc:	4b9f      	ldr	r3, [pc, #636]	; (800603c <_printf_float+0x2dc>)
 8005dbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc6:	f7fa fec1 	bl	8000b4c <__aeabi_dcmpun>
 8005dca:	bb88      	cbnz	r0, 8005e30 <_printf_float+0xd0>
 8005dcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dd0:	4b9a      	ldr	r3, [pc, #616]	; (800603c <_printf_float+0x2dc>)
 8005dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd6:	f7fa fe9b 	bl	8000b10 <__aeabi_dcmple>
 8005dda:	bb48      	cbnz	r0, 8005e30 <_printf_float+0xd0>
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2300      	movs	r3, #0
 8005de0:	4640      	mov	r0, r8
 8005de2:	4649      	mov	r1, r9
 8005de4:	f7fa fe8a 	bl	8000afc <__aeabi_dcmplt>
 8005de8:	b110      	cbz	r0, 8005df0 <_printf_float+0x90>
 8005dea:	232d      	movs	r3, #45	; 0x2d
 8005dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df0:	4b93      	ldr	r3, [pc, #588]	; (8006040 <_printf_float+0x2e0>)
 8005df2:	4894      	ldr	r0, [pc, #592]	; (8006044 <_printf_float+0x2e4>)
 8005df4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005df8:	bf94      	ite	ls
 8005dfa:	4698      	movls	r8, r3
 8005dfc:	4680      	movhi	r8, r0
 8005dfe:	2303      	movs	r3, #3
 8005e00:	6123      	str	r3, [r4, #16]
 8005e02:	9b05      	ldr	r3, [sp, #20]
 8005e04:	f023 0204 	bic.w	r2, r3, #4
 8005e08:	6022      	str	r2, [r4, #0]
 8005e0a:	f04f 0900 	mov.w	r9, #0
 8005e0e:	9700      	str	r7, [sp, #0]
 8005e10:	4633      	mov	r3, r6
 8005e12:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e14:	4621      	mov	r1, r4
 8005e16:	4628      	mov	r0, r5
 8005e18:	f000 f9d8 	bl	80061cc <_printf_common>
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	f040 8090 	bne.w	8005f42 <_printf_float+0x1e2>
 8005e22:	f04f 30ff 	mov.w	r0, #4294967295
 8005e26:	b00d      	add	sp, #52	; 0x34
 8005e28:	ecbd 8b02 	vpop	{d8}
 8005e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e30:	4642      	mov	r2, r8
 8005e32:	464b      	mov	r3, r9
 8005e34:	4640      	mov	r0, r8
 8005e36:	4649      	mov	r1, r9
 8005e38:	f7fa fe88 	bl	8000b4c <__aeabi_dcmpun>
 8005e3c:	b140      	cbz	r0, 8005e50 <_printf_float+0xf0>
 8005e3e:	464b      	mov	r3, r9
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	bfbc      	itt	lt
 8005e44:	232d      	movlt	r3, #45	; 0x2d
 8005e46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e4a:	487f      	ldr	r0, [pc, #508]	; (8006048 <_printf_float+0x2e8>)
 8005e4c:	4b7f      	ldr	r3, [pc, #508]	; (800604c <_printf_float+0x2ec>)
 8005e4e:	e7d1      	b.n	8005df4 <_printf_float+0x94>
 8005e50:	6863      	ldr	r3, [r4, #4]
 8005e52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e56:	9206      	str	r2, [sp, #24]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	d13f      	bne.n	8005edc <_printf_float+0x17c>
 8005e5c:	2306      	movs	r3, #6
 8005e5e:	6063      	str	r3, [r4, #4]
 8005e60:	9b05      	ldr	r3, [sp, #20]
 8005e62:	6861      	ldr	r1, [r4, #4]
 8005e64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e68:	2300      	movs	r3, #0
 8005e6a:	9303      	str	r3, [sp, #12]
 8005e6c:	ab0a      	add	r3, sp, #40	; 0x28
 8005e6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e72:	ab09      	add	r3, sp, #36	; 0x24
 8005e74:	ec49 8b10 	vmov	d0, r8, r9
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	6022      	str	r2, [r4, #0]
 8005e7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e80:	4628      	mov	r0, r5
 8005e82:	f7ff fecd 	bl	8005c20 <__cvt>
 8005e86:	9b06      	ldr	r3, [sp, #24]
 8005e88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e8a:	2b47      	cmp	r3, #71	; 0x47
 8005e8c:	4680      	mov	r8, r0
 8005e8e:	d108      	bne.n	8005ea2 <_printf_float+0x142>
 8005e90:	1cc8      	adds	r0, r1, #3
 8005e92:	db02      	blt.n	8005e9a <_printf_float+0x13a>
 8005e94:	6863      	ldr	r3, [r4, #4]
 8005e96:	4299      	cmp	r1, r3
 8005e98:	dd41      	ble.n	8005f1e <_printf_float+0x1be>
 8005e9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005e9e:	fa5f fb8b 	uxtb.w	fp, fp
 8005ea2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ea6:	d820      	bhi.n	8005eea <_printf_float+0x18a>
 8005ea8:	3901      	subs	r1, #1
 8005eaa:	465a      	mov	r2, fp
 8005eac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005eb0:	9109      	str	r1, [sp, #36]	; 0x24
 8005eb2:	f7ff ff17 	bl	8005ce4 <__exponent>
 8005eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eb8:	1813      	adds	r3, r2, r0
 8005eba:	2a01      	cmp	r2, #1
 8005ebc:	4681      	mov	r9, r0
 8005ebe:	6123      	str	r3, [r4, #16]
 8005ec0:	dc02      	bgt.n	8005ec8 <_printf_float+0x168>
 8005ec2:	6822      	ldr	r2, [r4, #0]
 8005ec4:	07d2      	lsls	r2, r2, #31
 8005ec6:	d501      	bpl.n	8005ecc <_printf_float+0x16c>
 8005ec8:	3301      	adds	r3, #1
 8005eca:	6123      	str	r3, [r4, #16]
 8005ecc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d09c      	beq.n	8005e0e <_printf_float+0xae>
 8005ed4:	232d      	movs	r3, #45	; 0x2d
 8005ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eda:	e798      	b.n	8005e0e <_printf_float+0xae>
 8005edc:	9a06      	ldr	r2, [sp, #24]
 8005ede:	2a47      	cmp	r2, #71	; 0x47
 8005ee0:	d1be      	bne.n	8005e60 <_printf_float+0x100>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1bc      	bne.n	8005e60 <_printf_float+0x100>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e7b9      	b.n	8005e5e <_printf_float+0xfe>
 8005eea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005eee:	d118      	bne.n	8005f22 <_printf_float+0x1c2>
 8005ef0:	2900      	cmp	r1, #0
 8005ef2:	6863      	ldr	r3, [r4, #4]
 8005ef4:	dd0b      	ble.n	8005f0e <_printf_float+0x1ae>
 8005ef6:	6121      	str	r1, [r4, #16]
 8005ef8:	b913      	cbnz	r3, 8005f00 <_printf_float+0x1a0>
 8005efa:	6822      	ldr	r2, [r4, #0]
 8005efc:	07d0      	lsls	r0, r2, #31
 8005efe:	d502      	bpl.n	8005f06 <_printf_float+0x1a6>
 8005f00:	3301      	adds	r3, #1
 8005f02:	440b      	add	r3, r1
 8005f04:	6123      	str	r3, [r4, #16]
 8005f06:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f08:	f04f 0900 	mov.w	r9, #0
 8005f0c:	e7de      	b.n	8005ecc <_printf_float+0x16c>
 8005f0e:	b913      	cbnz	r3, 8005f16 <_printf_float+0x1b6>
 8005f10:	6822      	ldr	r2, [r4, #0]
 8005f12:	07d2      	lsls	r2, r2, #31
 8005f14:	d501      	bpl.n	8005f1a <_printf_float+0x1ba>
 8005f16:	3302      	adds	r3, #2
 8005f18:	e7f4      	b.n	8005f04 <_printf_float+0x1a4>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e7f2      	b.n	8005f04 <_printf_float+0x1a4>
 8005f1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f24:	4299      	cmp	r1, r3
 8005f26:	db05      	blt.n	8005f34 <_printf_float+0x1d4>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	6121      	str	r1, [r4, #16]
 8005f2c:	07d8      	lsls	r0, r3, #31
 8005f2e:	d5ea      	bpl.n	8005f06 <_printf_float+0x1a6>
 8005f30:	1c4b      	adds	r3, r1, #1
 8005f32:	e7e7      	b.n	8005f04 <_printf_float+0x1a4>
 8005f34:	2900      	cmp	r1, #0
 8005f36:	bfd4      	ite	le
 8005f38:	f1c1 0202 	rsble	r2, r1, #2
 8005f3c:	2201      	movgt	r2, #1
 8005f3e:	4413      	add	r3, r2
 8005f40:	e7e0      	b.n	8005f04 <_printf_float+0x1a4>
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	055a      	lsls	r2, r3, #21
 8005f46:	d407      	bmi.n	8005f58 <_printf_float+0x1f8>
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	4642      	mov	r2, r8
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4628      	mov	r0, r5
 8005f50:	47b8      	blx	r7
 8005f52:	3001      	adds	r0, #1
 8005f54:	d12c      	bne.n	8005fb0 <_printf_float+0x250>
 8005f56:	e764      	b.n	8005e22 <_printf_float+0xc2>
 8005f58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f5c:	f240 80e0 	bls.w	8006120 <_printf_float+0x3c0>
 8005f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f64:	2200      	movs	r2, #0
 8005f66:	2300      	movs	r3, #0
 8005f68:	f7fa fdbe 	bl	8000ae8 <__aeabi_dcmpeq>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d034      	beq.n	8005fda <_printf_float+0x27a>
 8005f70:	4a37      	ldr	r2, [pc, #220]	; (8006050 <_printf_float+0x2f0>)
 8005f72:	2301      	movs	r3, #1
 8005f74:	4631      	mov	r1, r6
 8005f76:	4628      	mov	r0, r5
 8005f78:	47b8      	blx	r7
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	f43f af51 	beq.w	8005e22 <_printf_float+0xc2>
 8005f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f84:	429a      	cmp	r2, r3
 8005f86:	db02      	blt.n	8005f8e <_printf_float+0x22e>
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	07d8      	lsls	r0, r3, #31
 8005f8c:	d510      	bpl.n	8005fb0 <_printf_float+0x250>
 8005f8e:	ee18 3a10 	vmov	r3, s16
 8005f92:	4652      	mov	r2, sl
 8005f94:	4631      	mov	r1, r6
 8005f96:	4628      	mov	r0, r5
 8005f98:	47b8      	blx	r7
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	f43f af41 	beq.w	8005e22 <_printf_float+0xc2>
 8005fa0:	f04f 0800 	mov.w	r8, #0
 8005fa4:	f104 091a 	add.w	r9, r4, #26
 8005fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005faa:	3b01      	subs	r3, #1
 8005fac:	4543      	cmp	r3, r8
 8005fae:	dc09      	bgt.n	8005fc4 <_printf_float+0x264>
 8005fb0:	6823      	ldr	r3, [r4, #0]
 8005fb2:	079b      	lsls	r3, r3, #30
 8005fb4:	f100 8105 	bmi.w	80061c2 <_printf_float+0x462>
 8005fb8:	68e0      	ldr	r0, [r4, #12]
 8005fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fbc:	4298      	cmp	r0, r3
 8005fbe:	bfb8      	it	lt
 8005fc0:	4618      	movlt	r0, r3
 8005fc2:	e730      	b.n	8005e26 <_printf_float+0xc6>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	464a      	mov	r2, r9
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4628      	mov	r0, r5
 8005fcc:	47b8      	blx	r7
 8005fce:	3001      	adds	r0, #1
 8005fd0:	f43f af27 	beq.w	8005e22 <_printf_float+0xc2>
 8005fd4:	f108 0801 	add.w	r8, r8, #1
 8005fd8:	e7e6      	b.n	8005fa8 <_printf_float+0x248>
 8005fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	dc39      	bgt.n	8006054 <_printf_float+0x2f4>
 8005fe0:	4a1b      	ldr	r2, [pc, #108]	; (8006050 <_printf_float+0x2f0>)
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	4631      	mov	r1, r6
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	47b8      	blx	r7
 8005fea:	3001      	adds	r0, #1
 8005fec:	f43f af19 	beq.w	8005e22 <_printf_float+0xc2>
 8005ff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	d102      	bne.n	8005ffe <_printf_float+0x29e>
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	07d9      	lsls	r1, r3, #31
 8005ffc:	d5d8      	bpl.n	8005fb0 <_printf_float+0x250>
 8005ffe:	ee18 3a10 	vmov	r3, s16
 8006002:	4652      	mov	r2, sl
 8006004:	4631      	mov	r1, r6
 8006006:	4628      	mov	r0, r5
 8006008:	47b8      	blx	r7
 800600a:	3001      	adds	r0, #1
 800600c:	f43f af09 	beq.w	8005e22 <_printf_float+0xc2>
 8006010:	f04f 0900 	mov.w	r9, #0
 8006014:	f104 0a1a 	add.w	sl, r4, #26
 8006018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800601a:	425b      	negs	r3, r3
 800601c:	454b      	cmp	r3, r9
 800601e:	dc01      	bgt.n	8006024 <_printf_float+0x2c4>
 8006020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006022:	e792      	b.n	8005f4a <_printf_float+0x1ea>
 8006024:	2301      	movs	r3, #1
 8006026:	4652      	mov	r2, sl
 8006028:	4631      	mov	r1, r6
 800602a:	4628      	mov	r0, r5
 800602c:	47b8      	blx	r7
 800602e:	3001      	adds	r0, #1
 8006030:	f43f aef7 	beq.w	8005e22 <_printf_float+0xc2>
 8006034:	f109 0901 	add.w	r9, r9, #1
 8006038:	e7ee      	b.n	8006018 <_printf_float+0x2b8>
 800603a:	bf00      	nop
 800603c:	7fefffff 	.word	0x7fefffff
 8006040:	0800a574 	.word	0x0800a574
 8006044:	0800a578 	.word	0x0800a578
 8006048:	0800a580 	.word	0x0800a580
 800604c:	0800a57c 	.word	0x0800a57c
 8006050:	0800a584 	.word	0x0800a584
 8006054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006056:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006058:	429a      	cmp	r2, r3
 800605a:	bfa8      	it	ge
 800605c:	461a      	movge	r2, r3
 800605e:	2a00      	cmp	r2, #0
 8006060:	4691      	mov	r9, r2
 8006062:	dc37      	bgt.n	80060d4 <_printf_float+0x374>
 8006064:	f04f 0b00 	mov.w	fp, #0
 8006068:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800606c:	f104 021a 	add.w	r2, r4, #26
 8006070:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006072:	9305      	str	r3, [sp, #20]
 8006074:	eba3 0309 	sub.w	r3, r3, r9
 8006078:	455b      	cmp	r3, fp
 800607a:	dc33      	bgt.n	80060e4 <_printf_float+0x384>
 800607c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006080:	429a      	cmp	r2, r3
 8006082:	db3b      	blt.n	80060fc <_printf_float+0x39c>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	07da      	lsls	r2, r3, #31
 8006088:	d438      	bmi.n	80060fc <_printf_float+0x39c>
 800608a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800608c:	9a05      	ldr	r2, [sp, #20]
 800608e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006090:	1a9a      	subs	r2, r3, r2
 8006092:	eba3 0901 	sub.w	r9, r3, r1
 8006096:	4591      	cmp	r9, r2
 8006098:	bfa8      	it	ge
 800609a:	4691      	movge	r9, r2
 800609c:	f1b9 0f00 	cmp.w	r9, #0
 80060a0:	dc35      	bgt.n	800610e <_printf_float+0x3ae>
 80060a2:	f04f 0800 	mov.w	r8, #0
 80060a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060aa:	f104 0a1a 	add.w	sl, r4, #26
 80060ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	eba3 0309 	sub.w	r3, r3, r9
 80060b8:	4543      	cmp	r3, r8
 80060ba:	f77f af79 	ble.w	8005fb0 <_printf_float+0x250>
 80060be:	2301      	movs	r3, #1
 80060c0:	4652      	mov	r2, sl
 80060c2:	4631      	mov	r1, r6
 80060c4:	4628      	mov	r0, r5
 80060c6:	47b8      	blx	r7
 80060c8:	3001      	adds	r0, #1
 80060ca:	f43f aeaa 	beq.w	8005e22 <_printf_float+0xc2>
 80060ce:	f108 0801 	add.w	r8, r8, #1
 80060d2:	e7ec      	b.n	80060ae <_printf_float+0x34e>
 80060d4:	4613      	mov	r3, r2
 80060d6:	4631      	mov	r1, r6
 80060d8:	4642      	mov	r2, r8
 80060da:	4628      	mov	r0, r5
 80060dc:	47b8      	blx	r7
 80060de:	3001      	adds	r0, #1
 80060e0:	d1c0      	bne.n	8006064 <_printf_float+0x304>
 80060e2:	e69e      	b.n	8005e22 <_printf_float+0xc2>
 80060e4:	2301      	movs	r3, #1
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	9205      	str	r2, [sp, #20]
 80060ec:	47b8      	blx	r7
 80060ee:	3001      	adds	r0, #1
 80060f0:	f43f ae97 	beq.w	8005e22 <_printf_float+0xc2>
 80060f4:	9a05      	ldr	r2, [sp, #20]
 80060f6:	f10b 0b01 	add.w	fp, fp, #1
 80060fa:	e7b9      	b.n	8006070 <_printf_float+0x310>
 80060fc:	ee18 3a10 	vmov	r3, s16
 8006100:	4652      	mov	r2, sl
 8006102:	4631      	mov	r1, r6
 8006104:	4628      	mov	r0, r5
 8006106:	47b8      	blx	r7
 8006108:	3001      	adds	r0, #1
 800610a:	d1be      	bne.n	800608a <_printf_float+0x32a>
 800610c:	e689      	b.n	8005e22 <_printf_float+0xc2>
 800610e:	9a05      	ldr	r2, [sp, #20]
 8006110:	464b      	mov	r3, r9
 8006112:	4442      	add	r2, r8
 8006114:	4631      	mov	r1, r6
 8006116:	4628      	mov	r0, r5
 8006118:	47b8      	blx	r7
 800611a:	3001      	adds	r0, #1
 800611c:	d1c1      	bne.n	80060a2 <_printf_float+0x342>
 800611e:	e680      	b.n	8005e22 <_printf_float+0xc2>
 8006120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006122:	2a01      	cmp	r2, #1
 8006124:	dc01      	bgt.n	800612a <_printf_float+0x3ca>
 8006126:	07db      	lsls	r3, r3, #31
 8006128:	d538      	bpl.n	800619c <_printf_float+0x43c>
 800612a:	2301      	movs	r3, #1
 800612c:	4642      	mov	r2, r8
 800612e:	4631      	mov	r1, r6
 8006130:	4628      	mov	r0, r5
 8006132:	47b8      	blx	r7
 8006134:	3001      	adds	r0, #1
 8006136:	f43f ae74 	beq.w	8005e22 <_printf_float+0xc2>
 800613a:	ee18 3a10 	vmov	r3, s16
 800613e:	4652      	mov	r2, sl
 8006140:	4631      	mov	r1, r6
 8006142:	4628      	mov	r0, r5
 8006144:	47b8      	blx	r7
 8006146:	3001      	adds	r0, #1
 8006148:	f43f ae6b 	beq.w	8005e22 <_printf_float+0xc2>
 800614c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006150:	2200      	movs	r2, #0
 8006152:	2300      	movs	r3, #0
 8006154:	f7fa fcc8 	bl	8000ae8 <__aeabi_dcmpeq>
 8006158:	b9d8      	cbnz	r0, 8006192 <_printf_float+0x432>
 800615a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615c:	f108 0201 	add.w	r2, r8, #1
 8006160:	3b01      	subs	r3, #1
 8006162:	4631      	mov	r1, r6
 8006164:	4628      	mov	r0, r5
 8006166:	47b8      	blx	r7
 8006168:	3001      	adds	r0, #1
 800616a:	d10e      	bne.n	800618a <_printf_float+0x42a>
 800616c:	e659      	b.n	8005e22 <_printf_float+0xc2>
 800616e:	2301      	movs	r3, #1
 8006170:	4652      	mov	r2, sl
 8006172:	4631      	mov	r1, r6
 8006174:	4628      	mov	r0, r5
 8006176:	47b8      	blx	r7
 8006178:	3001      	adds	r0, #1
 800617a:	f43f ae52 	beq.w	8005e22 <_printf_float+0xc2>
 800617e:	f108 0801 	add.w	r8, r8, #1
 8006182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006184:	3b01      	subs	r3, #1
 8006186:	4543      	cmp	r3, r8
 8006188:	dcf1      	bgt.n	800616e <_printf_float+0x40e>
 800618a:	464b      	mov	r3, r9
 800618c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006190:	e6dc      	b.n	8005f4c <_printf_float+0x1ec>
 8006192:	f04f 0800 	mov.w	r8, #0
 8006196:	f104 0a1a 	add.w	sl, r4, #26
 800619a:	e7f2      	b.n	8006182 <_printf_float+0x422>
 800619c:	2301      	movs	r3, #1
 800619e:	4642      	mov	r2, r8
 80061a0:	e7df      	b.n	8006162 <_printf_float+0x402>
 80061a2:	2301      	movs	r3, #1
 80061a4:	464a      	mov	r2, r9
 80061a6:	4631      	mov	r1, r6
 80061a8:	4628      	mov	r0, r5
 80061aa:	47b8      	blx	r7
 80061ac:	3001      	adds	r0, #1
 80061ae:	f43f ae38 	beq.w	8005e22 <_printf_float+0xc2>
 80061b2:	f108 0801 	add.w	r8, r8, #1
 80061b6:	68e3      	ldr	r3, [r4, #12]
 80061b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061ba:	1a5b      	subs	r3, r3, r1
 80061bc:	4543      	cmp	r3, r8
 80061be:	dcf0      	bgt.n	80061a2 <_printf_float+0x442>
 80061c0:	e6fa      	b.n	8005fb8 <_printf_float+0x258>
 80061c2:	f04f 0800 	mov.w	r8, #0
 80061c6:	f104 0919 	add.w	r9, r4, #25
 80061ca:	e7f4      	b.n	80061b6 <_printf_float+0x456>

080061cc <_printf_common>:
 80061cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061d0:	4616      	mov	r6, r2
 80061d2:	4699      	mov	r9, r3
 80061d4:	688a      	ldr	r2, [r1, #8]
 80061d6:	690b      	ldr	r3, [r1, #16]
 80061d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061dc:	4293      	cmp	r3, r2
 80061de:	bfb8      	it	lt
 80061e0:	4613      	movlt	r3, r2
 80061e2:	6033      	str	r3, [r6, #0]
 80061e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061e8:	4607      	mov	r7, r0
 80061ea:	460c      	mov	r4, r1
 80061ec:	b10a      	cbz	r2, 80061f2 <_printf_common+0x26>
 80061ee:	3301      	adds	r3, #1
 80061f0:	6033      	str	r3, [r6, #0]
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	0699      	lsls	r1, r3, #26
 80061f6:	bf42      	ittt	mi
 80061f8:	6833      	ldrmi	r3, [r6, #0]
 80061fa:	3302      	addmi	r3, #2
 80061fc:	6033      	strmi	r3, [r6, #0]
 80061fe:	6825      	ldr	r5, [r4, #0]
 8006200:	f015 0506 	ands.w	r5, r5, #6
 8006204:	d106      	bne.n	8006214 <_printf_common+0x48>
 8006206:	f104 0a19 	add.w	sl, r4, #25
 800620a:	68e3      	ldr	r3, [r4, #12]
 800620c:	6832      	ldr	r2, [r6, #0]
 800620e:	1a9b      	subs	r3, r3, r2
 8006210:	42ab      	cmp	r3, r5
 8006212:	dc26      	bgt.n	8006262 <_printf_common+0x96>
 8006214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006218:	1e13      	subs	r3, r2, #0
 800621a:	6822      	ldr	r2, [r4, #0]
 800621c:	bf18      	it	ne
 800621e:	2301      	movne	r3, #1
 8006220:	0692      	lsls	r2, r2, #26
 8006222:	d42b      	bmi.n	800627c <_printf_common+0xb0>
 8006224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006228:	4649      	mov	r1, r9
 800622a:	4638      	mov	r0, r7
 800622c:	47c0      	blx	r8
 800622e:	3001      	adds	r0, #1
 8006230:	d01e      	beq.n	8006270 <_printf_common+0xa4>
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	68e5      	ldr	r5, [r4, #12]
 8006236:	6832      	ldr	r2, [r6, #0]
 8006238:	f003 0306 	and.w	r3, r3, #6
 800623c:	2b04      	cmp	r3, #4
 800623e:	bf08      	it	eq
 8006240:	1aad      	subeq	r5, r5, r2
 8006242:	68a3      	ldr	r3, [r4, #8]
 8006244:	6922      	ldr	r2, [r4, #16]
 8006246:	bf0c      	ite	eq
 8006248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800624c:	2500      	movne	r5, #0
 800624e:	4293      	cmp	r3, r2
 8006250:	bfc4      	itt	gt
 8006252:	1a9b      	subgt	r3, r3, r2
 8006254:	18ed      	addgt	r5, r5, r3
 8006256:	2600      	movs	r6, #0
 8006258:	341a      	adds	r4, #26
 800625a:	42b5      	cmp	r5, r6
 800625c:	d11a      	bne.n	8006294 <_printf_common+0xc8>
 800625e:	2000      	movs	r0, #0
 8006260:	e008      	b.n	8006274 <_printf_common+0xa8>
 8006262:	2301      	movs	r3, #1
 8006264:	4652      	mov	r2, sl
 8006266:	4649      	mov	r1, r9
 8006268:	4638      	mov	r0, r7
 800626a:	47c0      	blx	r8
 800626c:	3001      	adds	r0, #1
 800626e:	d103      	bne.n	8006278 <_printf_common+0xac>
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006278:	3501      	adds	r5, #1
 800627a:	e7c6      	b.n	800620a <_printf_common+0x3e>
 800627c:	18e1      	adds	r1, r4, r3
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	2030      	movs	r0, #48	; 0x30
 8006282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006286:	4422      	add	r2, r4
 8006288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800628c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006290:	3302      	adds	r3, #2
 8006292:	e7c7      	b.n	8006224 <_printf_common+0x58>
 8006294:	2301      	movs	r3, #1
 8006296:	4622      	mov	r2, r4
 8006298:	4649      	mov	r1, r9
 800629a:	4638      	mov	r0, r7
 800629c:	47c0      	blx	r8
 800629e:	3001      	adds	r0, #1
 80062a0:	d0e6      	beq.n	8006270 <_printf_common+0xa4>
 80062a2:	3601      	adds	r6, #1
 80062a4:	e7d9      	b.n	800625a <_printf_common+0x8e>
	...

080062a8 <_printf_i>:
 80062a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062ac:	7e0f      	ldrb	r7, [r1, #24]
 80062ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062b0:	2f78      	cmp	r7, #120	; 0x78
 80062b2:	4691      	mov	r9, r2
 80062b4:	4680      	mov	r8, r0
 80062b6:	460c      	mov	r4, r1
 80062b8:	469a      	mov	sl, r3
 80062ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062be:	d807      	bhi.n	80062d0 <_printf_i+0x28>
 80062c0:	2f62      	cmp	r7, #98	; 0x62
 80062c2:	d80a      	bhi.n	80062da <_printf_i+0x32>
 80062c4:	2f00      	cmp	r7, #0
 80062c6:	f000 80d8 	beq.w	800647a <_printf_i+0x1d2>
 80062ca:	2f58      	cmp	r7, #88	; 0x58
 80062cc:	f000 80a3 	beq.w	8006416 <_printf_i+0x16e>
 80062d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062d8:	e03a      	b.n	8006350 <_printf_i+0xa8>
 80062da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062de:	2b15      	cmp	r3, #21
 80062e0:	d8f6      	bhi.n	80062d0 <_printf_i+0x28>
 80062e2:	a101      	add	r1, pc, #4	; (adr r1, 80062e8 <_printf_i+0x40>)
 80062e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062e8:	08006341 	.word	0x08006341
 80062ec:	08006355 	.word	0x08006355
 80062f0:	080062d1 	.word	0x080062d1
 80062f4:	080062d1 	.word	0x080062d1
 80062f8:	080062d1 	.word	0x080062d1
 80062fc:	080062d1 	.word	0x080062d1
 8006300:	08006355 	.word	0x08006355
 8006304:	080062d1 	.word	0x080062d1
 8006308:	080062d1 	.word	0x080062d1
 800630c:	080062d1 	.word	0x080062d1
 8006310:	080062d1 	.word	0x080062d1
 8006314:	08006461 	.word	0x08006461
 8006318:	08006385 	.word	0x08006385
 800631c:	08006443 	.word	0x08006443
 8006320:	080062d1 	.word	0x080062d1
 8006324:	080062d1 	.word	0x080062d1
 8006328:	08006483 	.word	0x08006483
 800632c:	080062d1 	.word	0x080062d1
 8006330:	08006385 	.word	0x08006385
 8006334:	080062d1 	.word	0x080062d1
 8006338:	080062d1 	.word	0x080062d1
 800633c:	0800644b 	.word	0x0800644b
 8006340:	682b      	ldr	r3, [r5, #0]
 8006342:	1d1a      	adds	r2, r3, #4
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	602a      	str	r2, [r5, #0]
 8006348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800634c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006350:	2301      	movs	r3, #1
 8006352:	e0a3      	b.n	800649c <_printf_i+0x1f4>
 8006354:	6820      	ldr	r0, [r4, #0]
 8006356:	6829      	ldr	r1, [r5, #0]
 8006358:	0606      	lsls	r6, r0, #24
 800635a:	f101 0304 	add.w	r3, r1, #4
 800635e:	d50a      	bpl.n	8006376 <_printf_i+0xce>
 8006360:	680e      	ldr	r6, [r1, #0]
 8006362:	602b      	str	r3, [r5, #0]
 8006364:	2e00      	cmp	r6, #0
 8006366:	da03      	bge.n	8006370 <_printf_i+0xc8>
 8006368:	232d      	movs	r3, #45	; 0x2d
 800636a:	4276      	negs	r6, r6
 800636c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006370:	485e      	ldr	r0, [pc, #376]	; (80064ec <_printf_i+0x244>)
 8006372:	230a      	movs	r3, #10
 8006374:	e019      	b.n	80063aa <_printf_i+0x102>
 8006376:	680e      	ldr	r6, [r1, #0]
 8006378:	602b      	str	r3, [r5, #0]
 800637a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800637e:	bf18      	it	ne
 8006380:	b236      	sxthne	r6, r6
 8006382:	e7ef      	b.n	8006364 <_printf_i+0xbc>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	6820      	ldr	r0, [r4, #0]
 8006388:	1d19      	adds	r1, r3, #4
 800638a:	6029      	str	r1, [r5, #0]
 800638c:	0601      	lsls	r1, r0, #24
 800638e:	d501      	bpl.n	8006394 <_printf_i+0xec>
 8006390:	681e      	ldr	r6, [r3, #0]
 8006392:	e002      	b.n	800639a <_printf_i+0xf2>
 8006394:	0646      	lsls	r6, r0, #25
 8006396:	d5fb      	bpl.n	8006390 <_printf_i+0xe8>
 8006398:	881e      	ldrh	r6, [r3, #0]
 800639a:	4854      	ldr	r0, [pc, #336]	; (80064ec <_printf_i+0x244>)
 800639c:	2f6f      	cmp	r7, #111	; 0x6f
 800639e:	bf0c      	ite	eq
 80063a0:	2308      	moveq	r3, #8
 80063a2:	230a      	movne	r3, #10
 80063a4:	2100      	movs	r1, #0
 80063a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063aa:	6865      	ldr	r5, [r4, #4]
 80063ac:	60a5      	str	r5, [r4, #8]
 80063ae:	2d00      	cmp	r5, #0
 80063b0:	bfa2      	ittt	ge
 80063b2:	6821      	ldrge	r1, [r4, #0]
 80063b4:	f021 0104 	bicge.w	r1, r1, #4
 80063b8:	6021      	strge	r1, [r4, #0]
 80063ba:	b90e      	cbnz	r6, 80063c0 <_printf_i+0x118>
 80063bc:	2d00      	cmp	r5, #0
 80063be:	d04d      	beq.n	800645c <_printf_i+0x1b4>
 80063c0:	4615      	mov	r5, r2
 80063c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80063c6:	fb03 6711 	mls	r7, r3, r1, r6
 80063ca:	5dc7      	ldrb	r7, [r0, r7]
 80063cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80063d0:	4637      	mov	r7, r6
 80063d2:	42bb      	cmp	r3, r7
 80063d4:	460e      	mov	r6, r1
 80063d6:	d9f4      	bls.n	80063c2 <_printf_i+0x11a>
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d10b      	bne.n	80063f4 <_printf_i+0x14c>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	07de      	lsls	r6, r3, #31
 80063e0:	d508      	bpl.n	80063f4 <_printf_i+0x14c>
 80063e2:	6923      	ldr	r3, [r4, #16]
 80063e4:	6861      	ldr	r1, [r4, #4]
 80063e6:	4299      	cmp	r1, r3
 80063e8:	bfde      	ittt	le
 80063ea:	2330      	movle	r3, #48	; 0x30
 80063ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80063f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80063f4:	1b52      	subs	r2, r2, r5
 80063f6:	6122      	str	r2, [r4, #16]
 80063f8:	f8cd a000 	str.w	sl, [sp]
 80063fc:	464b      	mov	r3, r9
 80063fe:	aa03      	add	r2, sp, #12
 8006400:	4621      	mov	r1, r4
 8006402:	4640      	mov	r0, r8
 8006404:	f7ff fee2 	bl	80061cc <_printf_common>
 8006408:	3001      	adds	r0, #1
 800640a:	d14c      	bne.n	80064a6 <_printf_i+0x1fe>
 800640c:	f04f 30ff 	mov.w	r0, #4294967295
 8006410:	b004      	add	sp, #16
 8006412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006416:	4835      	ldr	r0, [pc, #212]	; (80064ec <_printf_i+0x244>)
 8006418:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800641c:	6829      	ldr	r1, [r5, #0]
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	f851 6b04 	ldr.w	r6, [r1], #4
 8006424:	6029      	str	r1, [r5, #0]
 8006426:	061d      	lsls	r5, r3, #24
 8006428:	d514      	bpl.n	8006454 <_printf_i+0x1ac>
 800642a:	07df      	lsls	r7, r3, #31
 800642c:	bf44      	itt	mi
 800642e:	f043 0320 	orrmi.w	r3, r3, #32
 8006432:	6023      	strmi	r3, [r4, #0]
 8006434:	b91e      	cbnz	r6, 800643e <_printf_i+0x196>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	f023 0320 	bic.w	r3, r3, #32
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	2310      	movs	r3, #16
 8006440:	e7b0      	b.n	80063a4 <_printf_i+0xfc>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	f043 0320 	orr.w	r3, r3, #32
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	2378      	movs	r3, #120	; 0x78
 800644c:	4828      	ldr	r0, [pc, #160]	; (80064f0 <_printf_i+0x248>)
 800644e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006452:	e7e3      	b.n	800641c <_printf_i+0x174>
 8006454:	0659      	lsls	r1, r3, #25
 8006456:	bf48      	it	mi
 8006458:	b2b6      	uxthmi	r6, r6
 800645a:	e7e6      	b.n	800642a <_printf_i+0x182>
 800645c:	4615      	mov	r5, r2
 800645e:	e7bb      	b.n	80063d8 <_printf_i+0x130>
 8006460:	682b      	ldr	r3, [r5, #0]
 8006462:	6826      	ldr	r6, [r4, #0]
 8006464:	6961      	ldr	r1, [r4, #20]
 8006466:	1d18      	adds	r0, r3, #4
 8006468:	6028      	str	r0, [r5, #0]
 800646a:	0635      	lsls	r5, r6, #24
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	d501      	bpl.n	8006474 <_printf_i+0x1cc>
 8006470:	6019      	str	r1, [r3, #0]
 8006472:	e002      	b.n	800647a <_printf_i+0x1d2>
 8006474:	0670      	lsls	r0, r6, #25
 8006476:	d5fb      	bpl.n	8006470 <_printf_i+0x1c8>
 8006478:	8019      	strh	r1, [r3, #0]
 800647a:	2300      	movs	r3, #0
 800647c:	6123      	str	r3, [r4, #16]
 800647e:	4615      	mov	r5, r2
 8006480:	e7ba      	b.n	80063f8 <_printf_i+0x150>
 8006482:	682b      	ldr	r3, [r5, #0]
 8006484:	1d1a      	adds	r2, r3, #4
 8006486:	602a      	str	r2, [r5, #0]
 8006488:	681d      	ldr	r5, [r3, #0]
 800648a:	6862      	ldr	r2, [r4, #4]
 800648c:	2100      	movs	r1, #0
 800648e:	4628      	mov	r0, r5
 8006490:	f7f9 feb6 	bl	8000200 <memchr>
 8006494:	b108      	cbz	r0, 800649a <_printf_i+0x1f2>
 8006496:	1b40      	subs	r0, r0, r5
 8006498:	6060      	str	r0, [r4, #4]
 800649a:	6863      	ldr	r3, [r4, #4]
 800649c:	6123      	str	r3, [r4, #16]
 800649e:	2300      	movs	r3, #0
 80064a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a4:	e7a8      	b.n	80063f8 <_printf_i+0x150>
 80064a6:	6923      	ldr	r3, [r4, #16]
 80064a8:	462a      	mov	r2, r5
 80064aa:	4649      	mov	r1, r9
 80064ac:	4640      	mov	r0, r8
 80064ae:	47d0      	blx	sl
 80064b0:	3001      	adds	r0, #1
 80064b2:	d0ab      	beq.n	800640c <_printf_i+0x164>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	079b      	lsls	r3, r3, #30
 80064b8:	d413      	bmi.n	80064e2 <_printf_i+0x23a>
 80064ba:	68e0      	ldr	r0, [r4, #12]
 80064bc:	9b03      	ldr	r3, [sp, #12]
 80064be:	4298      	cmp	r0, r3
 80064c0:	bfb8      	it	lt
 80064c2:	4618      	movlt	r0, r3
 80064c4:	e7a4      	b.n	8006410 <_printf_i+0x168>
 80064c6:	2301      	movs	r3, #1
 80064c8:	4632      	mov	r2, r6
 80064ca:	4649      	mov	r1, r9
 80064cc:	4640      	mov	r0, r8
 80064ce:	47d0      	blx	sl
 80064d0:	3001      	adds	r0, #1
 80064d2:	d09b      	beq.n	800640c <_printf_i+0x164>
 80064d4:	3501      	adds	r5, #1
 80064d6:	68e3      	ldr	r3, [r4, #12]
 80064d8:	9903      	ldr	r1, [sp, #12]
 80064da:	1a5b      	subs	r3, r3, r1
 80064dc:	42ab      	cmp	r3, r5
 80064de:	dcf2      	bgt.n	80064c6 <_printf_i+0x21e>
 80064e0:	e7eb      	b.n	80064ba <_printf_i+0x212>
 80064e2:	2500      	movs	r5, #0
 80064e4:	f104 0619 	add.w	r6, r4, #25
 80064e8:	e7f5      	b.n	80064d6 <_printf_i+0x22e>
 80064ea:	bf00      	nop
 80064ec:	0800a586 	.word	0x0800a586
 80064f0:	0800a597 	.word	0x0800a597

080064f4 <_scanf_float>:
 80064f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f8:	b087      	sub	sp, #28
 80064fa:	4617      	mov	r7, r2
 80064fc:	9303      	str	r3, [sp, #12]
 80064fe:	688b      	ldr	r3, [r1, #8]
 8006500:	1e5a      	subs	r2, r3, #1
 8006502:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006506:	bf83      	ittte	hi
 8006508:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800650c:	195b      	addhi	r3, r3, r5
 800650e:	9302      	strhi	r3, [sp, #8]
 8006510:	2300      	movls	r3, #0
 8006512:	bf86      	itte	hi
 8006514:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006518:	608b      	strhi	r3, [r1, #8]
 800651a:	9302      	strls	r3, [sp, #8]
 800651c:	680b      	ldr	r3, [r1, #0]
 800651e:	468b      	mov	fp, r1
 8006520:	2500      	movs	r5, #0
 8006522:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006526:	f84b 3b1c 	str.w	r3, [fp], #28
 800652a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800652e:	4680      	mov	r8, r0
 8006530:	460c      	mov	r4, r1
 8006532:	465e      	mov	r6, fp
 8006534:	46aa      	mov	sl, r5
 8006536:	46a9      	mov	r9, r5
 8006538:	9501      	str	r5, [sp, #4]
 800653a:	68a2      	ldr	r2, [r4, #8]
 800653c:	b152      	cbz	r2, 8006554 <_scanf_float+0x60>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b4e      	cmp	r3, #78	; 0x4e
 8006544:	d864      	bhi.n	8006610 <_scanf_float+0x11c>
 8006546:	2b40      	cmp	r3, #64	; 0x40
 8006548:	d83c      	bhi.n	80065c4 <_scanf_float+0xd0>
 800654a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800654e:	b2c8      	uxtb	r0, r1
 8006550:	280e      	cmp	r0, #14
 8006552:	d93a      	bls.n	80065ca <_scanf_float+0xd6>
 8006554:	f1b9 0f00 	cmp.w	r9, #0
 8006558:	d003      	beq.n	8006562 <_scanf_float+0x6e>
 800655a:	6823      	ldr	r3, [r4, #0]
 800655c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006566:	f1ba 0f01 	cmp.w	sl, #1
 800656a:	f200 8113 	bhi.w	8006794 <_scanf_float+0x2a0>
 800656e:	455e      	cmp	r6, fp
 8006570:	f200 8105 	bhi.w	800677e <_scanf_float+0x28a>
 8006574:	2501      	movs	r5, #1
 8006576:	4628      	mov	r0, r5
 8006578:	b007      	add	sp, #28
 800657a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006582:	2a0d      	cmp	r2, #13
 8006584:	d8e6      	bhi.n	8006554 <_scanf_float+0x60>
 8006586:	a101      	add	r1, pc, #4	; (adr r1, 800658c <_scanf_float+0x98>)
 8006588:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800658c:	080066cb 	.word	0x080066cb
 8006590:	08006555 	.word	0x08006555
 8006594:	08006555 	.word	0x08006555
 8006598:	08006555 	.word	0x08006555
 800659c:	0800672b 	.word	0x0800672b
 80065a0:	08006703 	.word	0x08006703
 80065a4:	08006555 	.word	0x08006555
 80065a8:	08006555 	.word	0x08006555
 80065ac:	080066d9 	.word	0x080066d9
 80065b0:	08006555 	.word	0x08006555
 80065b4:	08006555 	.word	0x08006555
 80065b8:	08006555 	.word	0x08006555
 80065bc:	08006555 	.word	0x08006555
 80065c0:	08006691 	.word	0x08006691
 80065c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80065c8:	e7db      	b.n	8006582 <_scanf_float+0x8e>
 80065ca:	290e      	cmp	r1, #14
 80065cc:	d8c2      	bhi.n	8006554 <_scanf_float+0x60>
 80065ce:	a001      	add	r0, pc, #4	; (adr r0, 80065d4 <_scanf_float+0xe0>)
 80065d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80065d4:	08006683 	.word	0x08006683
 80065d8:	08006555 	.word	0x08006555
 80065dc:	08006683 	.word	0x08006683
 80065e0:	08006717 	.word	0x08006717
 80065e4:	08006555 	.word	0x08006555
 80065e8:	08006631 	.word	0x08006631
 80065ec:	0800666d 	.word	0x0800666d
 80065f0:	0800666d 	.word	0x0800666d
 80065f4:	0800666d 	.word	0x0800666d
 80065f8:	0800666d 	.word	0x0800666d
 80065fc:	0800666d 	.word	0x0800666d
 8006600:	0800666d 	.word	0x0800666d
 8006604:	0800666d 	.word	0x0800666d
 8006608:	0800666d 	.word	0x0800666d
 800660c:	0800666d 	.word	0x0800666d
 8006610:	2b6e      	cmp	r3, #110	; 0x6e
 8006612:	d809      	bhi.n	8006628 <_scanf_float+0x134>
 8006614:	2b60      	cmp	r3, #96	; 0x60
 8006616:	d8b2      	bhi.n	800657e <_scanf_float+0x8a>
 8006618:	2b54      	cmp	r3, #84	; 0x54
 800661a:	d077      	beq.n	800670c <_scanf_float+0x218>
 800661c:	2b59      	cmp	r3, #89	; 0x59
 800661e:	d199      	bne.n	8006554 <_scanf_float+0x60>
 8006620:	2d07      	cmp	r5, #7
 8006622:	d197      	bne.n	8006554 <_scanf_float+0x60>
 8006624:	2508      	movs	r5, #8
 8006626:	e029      	b.n	800667c <_scanf_float+0x188>
 8006628:	2b74      	cmp	r3, #116	; 0x74
 800662a:	d06f      	beq.n	800670c <_scanf_float+0x218>
 800662c:	2b79      	cmp	r3, #121	; 0x79
 800662e:	e7f6      	b.n	800661e <_scanf_float+0x12a>
 8006630:	6821      	ldr	r1, [r4, #0]
 8006632:	05c8      	lsls	r0, r1, #23
 8006634:	d51a      	bpl.n	800666c <_scanf_float+0x178>
 8006636:	9b02      	ldr	r3, [sp, #8]
 8006638:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800663c:	6021      	str	r1, [r4, #0]
 800663e:	f109 0901 	add.w	r9, r9, #1
 8006642:	b11b      	cbz	r3, 800664c <_scanf_float+0x158>
 8006644:	3b01      	subs	r3, #1
 8006646:	3201      	adds	r2, #1
 8006648:	9302      	str	r3, [sp, #8]
 800664a:	60a2      	str	r2, [r4, #8]
 800664c:	68a3      	ldr	r3, [r4, #8]
 800664e:	3b01      	subs	r3, #1
 8006650:	60a3      	str	r3, [r4, #8]
 8006652:	6923      	ldr	r3, [r4, #16]
 8006654:	3301      	adds	r3, #1
 8006656:	6123      	str	r3, [r4, #16]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3b01      	subs	r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	607b      	str	r3, [r7, #4]
 8006660:	f340 8084 	ble.w	800676c <_scanf_float+0x278>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	3301      	adds	r3, #1
 8006668:	603b      	str	r3, [r7, #0]
 800666a:	e766      	b.n	800653a <_scanf_float+0x46>
 800666c:	eb1a 0f05 	cmn.w	sl, r5
 8006670:	f47f af70 	bne.w	8006554 <_scanf_float+0x60>
 8006674:	6822      	ldr	r2, [r4, #0]
 8006676:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800667a:	6022      	str	r2, [r4, #0]
 800667c:	f806 3b01 	strb.w	r3, [r6], #1
 8006680:	e7e4      	b.n	800664c <_scanf_float+0x158>
 8006682:	6822      	ldr	r2, [r4, #0]
 8006684:	0610      	lsls	r0, r2, #24
 8006686:	f57f af65 	bpl.w	8006554 <_scanf_float+0x60>
 800668a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800668e:	e7f4      	b.n	800667a <_scanf_float+0x186>
 8006690:	f1ba 0f00 	cmp.w	sl, #0
 8006694:	d10e      	bne.n	80066b4 <_scanf_float+0x1c0>
 8006696:	f1b9 0f00 	cmp.w	r9, #0
 800669a:	d10e      	bne.n	80066ba <_scanf_float+0x1c6>
 800669c:	6822      	ldr	r2, [r4, #0]
 800669e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80066a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80066a6:	d108      	bne.n	80066ba <_scanf_float+0x1c6>
 80066a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80066ac:	6022      	str	r2, [r4, #0]
 80066ae:	f04f 0a01 	mov.w	sl, #1
 80066b2:	e7e3      	b.n	800667c <_scanf_float+0x188>
 80066b4:	f1ba 0f02 	cmp.w	sl, #2
 80066b8:	d055      	beq.n	8006766 <_scanf_float+0x272>
 80066ba:	2d01      	cmp	r5, #1
 80066bc:	d002      	beq.n	80066c4 <_scanf_float+0x1d0>
 80066be:	2d04      	cmp	r5, #4
 80066c0:	f47f af48 	bne.w	8006554 <_scanf_float+0x60>
 80066c4:	3501      	adds	r5, #1
 80066c6:	b2ed      	uxtb	r5, r5
 80066c8:	e7d8      	b.n	800667c <_scanf_float+0x188>
 80066ca:	f1ba 0f01 	cmp.w	sl, #1
 80066ce:	f47f af41 	bne.w	8006554 <_scanf_float+0x60>
 80066d2:	f04f 0a02 	mov.w	sl, #2
 80066d6:	e7d1      	b.n	800667c <_scanf_float+0x188>
 80066d8:	b97d      	cbnz	r5, 80066fa <_scanf_float+0x206>
 80066da:	f1b9 0f00 	cmp.w	r9, #0
 80066de:	f47f af3c 	bne.w	800655a <_scanf_float+0x66>
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80066e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80066ec:	f47f af39 	bne.w	8006562 <_scanf_float+0x6e>
 80066f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80066f4:	6022      	str	r2, [r4, #0]
 80066f6:	2501      	movs	r5, #1
 80066f8:	e7c0      	b.n	800667c <_scanf_float+0x188>
 80066fa:	2d03      	cmp	r5, #3
 80066fc:	d0e2      	beq.n	80066c4 <_scanf_float+0x1d0>
 80066fe:	2d05      	cmp	r5, #5
 8006700:	e7de      	b.n	80066c0 <_scanf_float+0x1cc>
 8006702:	2d02      	cmp	r5, #2
 8006704:	f47f af26 	bne.w	8006554 <_scanf_float+0x60>
 8006708:	2503      	movs	r5, #3
 800670a:	e7b7      	b.n	800667c <_scanf_float+0x188>
 800670c:	2d06      	cmp	r5, #6
 800670e:	f47f af21 	bne.w	8006554 <_scanf_float+0x60>
 8006712:	2507      	movs	r5, #7
 8006714:	e7b2      	b.n	800667c <_scanf_float+0x188>
 8006716:	6822      	ldr	r2, [r4, #0]
 8006718:	0591      	lsls	r1, r2, #22
 800671a:	f57f af1b 	bpl.w	8006554 <_scanf_float+0x60>
 800671e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006722:	6022      	str	r2, [r4, #0]
 8006724:	f8cd 9004 	str.w	r9, [sp, #4]
 8006728:	e7a8      	b.n	800667c <_scanf_float+0x188>
 800672a:	6822      	ldr	r2, [r4, #0]
 800672c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006730:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006734:	d006      	beq.n	8006744 <_scanf_float+0x250>
 8006736:	0550      	lsls	r0, r2, #21
 8006738:	f57f af0c 	bpl.w	8006554 <_scanf_float+0x60>
 800673c:	f1b9 0f00 	cmp.w	r9, #0
 8006740:	f43f af0f 	beq.w	8006562 <_scanf_float+0x6e>
 8006744:	0591      	lsls	r1, r2, #22
 8006746:	bf58      	it	pl
 8006748:	9901      	ldrpl	r1, [sp, #4]
 800674a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800674e:	bf58      	it	pl
 8006750:	eba9 0101 	subpl.w	r1, r9, r1
 8006754:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006758:	bf58      	it	pl
 800675a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800675e:	6022      	str	r2, [r4, #0]
 8006760:	f04f 0900 	mov.w	r9, #0
 8006764:	e78a      	b.n	800667c <_scanf_float+0x188>
 8006766:	f04f 0a03 	mov.w	sl, #3
 800676a:	e787      	b.n	800667c <_scanf_float+0x188>
 800676c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006770:	4639      	mov	r1, r7
 8006772:	4640      	mov	r0, r8
 8006774:	4798      	blx	r3
 8006776:	2800      	cmp	r0, #0
 8006778:	f43f aedf 	beq.w	800653a <_scanf_float+0x46>
 800677c:	e6ea      	b.n	8006554 <_scanf_float+0x60>
 800677e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006782:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006786:	463a      	mov	r2, r7
 8006788:	4640      	mov	r0, r8
 800678a:	4798      	blx	r3
 800678c:	6923      	ldr	r3, [r4, #16]
 800678e:	3b01      	subs	r3, #1
 8006790:	6123      	str	r3, [r4, #16]
 8006792:	e6ec      	b.n	800656e <_scanf_float+0x7a>
 8006794:	1e6b      	subs	r3, r5, #1
 8006796:	2b06      	cmp	r3, #6
 8006798:	d825      	bhi.n	80067e6 <_scanf_float+0x2f2>
 800679a:	2d02      	cmp	r5, #2
 800679c:	d836      	bhi.n	800680c <_scanf_float+0x318>
 800679e:	455e      	cmp	r6, fp
 80067a0:	f67f aee8 	bls.w	8006574 <_scanf_float+0x80>
 80067a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067a8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067ac:	463a      	mov	r2, r7
 80067ae:	4640      	mov	r0, r8
 80067b0:	4798      	blx	r3
 80067b2:	6923      	ldr	r3, [r4, #16]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	6123      	str	r3, [r4, #16]
 80067b8:	e7f1      	b.n	800679e <_scanf_float+0x2aa>
 80067ba:	9802      	ldr	r0, [sp, #8]
 80067bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067c0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80067c4:	9002      	str	r0, [sp, #8]
 80067c6:	463a      	mov	r2, r7
 80067c8:	4640      	mov	r0, r8
 80067ca:	4798      	blx	r3
 80067cc:	6923      	ldr	r3, [r4, #16]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	6123      	str	r3, [r4, #16]
 80067d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067d6:	fa5f fa8a 	uxtb.w	sl, sl
 80067da:	f1ba 0f02 	cmp.w	sl, #2
 80067de:	d1ec      	bne.n	80067ba <_scanf_float+0x2c6>
 80067e0:	3d03      	subs	r5, #3
 80067e2:	b2ed      	uxtb	r5, r5
 80067e4:	1b76      	subs	r6, r6, r5
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	05da      	lsls	r2, r3, #23
 80067ea:	d52f      	bpl.n	800684c <_scanf_float+0x358>
 80067ec:	055b      	lsls	r3, r3, #21
 80067ee:	d510      	bpl.n	8006812 <_scanf_float+0x31e>
 80067f0:	455e      	cmp	r6, fp
 80067f2:	f67f aebf 	bls.w	8006574 <_scanf_float+0x80>
 80067f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80067fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80067fe:	463a      	mov	r2, r7
 8006800:	4640      	mov	r0, r8
 8006802:	4798      	blx	r3
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	3b01      	subs	r3, #1
 8006808:	6123      	str	r3, [r4, #16]
 800680a:	e7f1      	b.n	80067f0 <_scanf_float+0x2fc>
 800680c:	46aa      	mov	sl, r5
 800680e:	9602      	str	r6, [sp, #8]
 8006810:	e7df      	b.n	80067d2 <_scanf_float+0x2de>
 8006812:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006816:	6923      	ldr	r3, [r4, #16]
 8006818:	2965      	cmp	r1, #101	; 0x65
 800681a:	f103 33ff 	add.w	r3, r3, #4294967295
 800681e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006822:	6123      	str	r3, [r4, #16]
 8006824:	d00c      	beq.n	8006840 <_scanf_float+0x34c>
 8006826:	2945      	cmp	r1, #69	; 0x45
 8006828:	d00a      	beq.n	8006840 <_scanf_float+0x34c>
 800682a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800682e:	463a      	mov	r2, r7
 8006830:	4640      	mov	r0, r8
 8006832:	4798      	blx	r3
 8006834:	6923      	ldr	r3, [r4, #16]
 8006836:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800683a:	3b01      	subs	r3, #1
 800683c:	1eb5      	subs	r5, r6, #2
 800683e:	6123      	str	r3, [r4, #16]
 8006840:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006844:	463a      	mov	r2, r7
 8006846:	4640      	mov	r0, r8
 8006848:	4798      	blx	r3
 800684a:	462e      	mov	r6, r5
 800684c:	6825      	ldr	r5, [r4, #0]
 800684e:	f015 0510 	ands.w	r5, r5, #16
 8006852:	d159      	bne.n	8006908 <_scanf_float+0x414>
 8006854:	7035      	strb	r5, [r6, #0]
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800685c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006860:	d11b      	bne.n	800689a <_scanf_float+0x3a6>
 8006862:	9b01      	ldr	r3, [sp, #4]
 8006864:	454b      	cmp	r3, r9
 8006866:	eba3 0209 	sub.w	r2, r3, r9
 800686a:	d123      	bne.n	80068b4 <_scanf_float+0x3c0>
 800686c:	2200      	movs	r2, #0
 800686e:	4659      	mov	r1, fp
 8006870:	4640      	mov	r0, r8
 8006872:	f000 feaf 	bl	80075d4 <_strtod_r>
 8006876:	6822      	ldr	r2, [r4, #0]
 8006878:	9b03      	ldr	r3, [sp, #12]
 800687a:	f012 0f02 	tst.w	r2, #2
 800687e:	ec57 6b10 	vmov	r6, r7, d0
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	d021      	beq.n	80068ca <_scanf_float+0x3d6>
 8006886:	9903      	ldr	r1, [sp, #12]
 8006888:	1d1a      	adds	r2, r3, #4
 800688a:	600a      	str	r2, [r1, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	e9c3 6700 	strd	r6, r7, [r3]
 8006892:	68e3      	ldr	r3, [r4, #12]
 8006894:	3301      	adds	r3, #1
 8006896:	60e3      	str	r3, [r4, #12]
 8006898:	e66d      	b.n	8006576 <_scanf_float+0x82>
 800689a:	9b04      	ldr	r3, [sp, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0e5      	beq.n	800686c <_scanf_float+0x378>
 80068a0:	9905      	ldr	r1, [sp, #20]
 80068a2:	230a      	movs	r3, #10
 80068a4:	462a      	mov	r2, r5
 80068a6:	3101      	adds	r1, #1
 80068a8:	4640      	mov	r0, r8
 80068aa:	f000 ff1b 	bl	80076e4 <_strtol_r>
 80068ae:	9b04      	ldr	r3, [sp, #16]
 80068b0:	9e05      	ldr	r6, [sp, #20]
 80068b2:	1ac2      	subs	r2, r0, r3
 80068b4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80068b8:	429e      	cmp	r6, r3
 80068ba:	bf28      	it	cs
 80068bc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80068c0:	4912      	ldr	r1, [pc, #72]	; (800690c <_scanf_float+0x418>)
 80068c2:	4630      	mov	r0, r6
 80068c4:	f000 f844 	bl	8006950 <siprintf>
 80068c8:	e7d0      	b.n	800686c <_scanf_float+0x378>
 80068ca:	9903      	ldr	r1, [sp, #12]
 80068cc:	f012 0f04 	tst.w	r2, #4
 80068d0:	f103 0204 	add.w	r2, r3, #4
 80068d4:	600a      	str	r2, [r1, #0]
 80068d6:	d1d9      	bne.n	800688c <_scanf_float+0x398>
 80068d8:	f8d3 8000 	ldr.w	r8, [r3]
 80068dc:	ee10 2a10 	vmov	r2, s0
 80068e0:	ee10 0a10 	vmov	r0, s0
 80068e4:	463b      	mov	r3, r7
 80068e6:	4639      	mov	r1, r7
 80068e8:	f7fa f930 	bl	8000b4c <__aeabi_dcmpun>
 80068ec:	b128      	cbz	r0, 80068fa <_scanf_float+0x406>
 80068ee:	4808      	ldr	r0, [pc, #32]	; (8006910 <_scanf_float+0x41c>)
 80068f0:	f000 f828 	bl	8006944 <nanf>
 80068f4:	ed88 0a00 	vstr	s0, [r8]
 80068f8:	e7cb      	b.n	8006892 <_scanf_float+0x39e>
 80068fa:	4630      	mov	r0, r6
 80068fc:	4639      	mov	r1, r7
 80068fe:	f7fa f983 	bl	8000c08 <__aeabi_d2f>
 8006902:	f8c8 0000 	str.w	r0, [r8]
 8006906:	e7c4      	b.n	8006892 <_scanf_float+0x39e>
 8006908:	2500      	movs	r5, #0
 800690a:	e634      	b.n	8006576 <_scanf_float+0x82>
 800690c:	0800a5a8 	.word	0x0800a5a8
 8006910:	0800aa18 	.word	0x0800aa18

08006914 <iprintf>:
 8006914:	b40f      	push	{r0, r1, r2, r3}
 8006916:	4b0a      	ldr	r3, [pc, #40]	; (8006940 <iprintf+0x2c>)
 8006918:	b513      	push	{r0, r1, r4, lr}
 800691a:	681c      	ldr	r4, [r3, #0]
 800691c:	b124      	cbz	r4, 8006928 <iprintf+0x14>
 800691e:	69a3      	ldr	r3, [r4, #24]
 8006920:	b913      	cbnz	r3, 8006928 <iprintf+0x14>
 8006922:	4620      	mov	r0, r4
 8006924:	f001 fdb2 	bl	800848c <__sinit>
 8006928:	ab05      	add	r3, sp, #20
 800692a:	9a04      	ldr	r2, [sp, #16]
 800692c:	68a1      	ldr	r1, [r4, #8]
 800692e:	9301      	str	r3, [sp, #4]
 8006930:	4620      	mov	r0, r4
 8006932:	f003 f925 	bl	8009b80 <_vfiprintf_r>
 8006936:	b002      	add	sp, #8
 8006938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800693c:	b004      	add	sp, #16
 800693e:	4770      	bx	lr
 8006940:	2000000c 	.word	0x2000000c

08006944 <nanf>:
 8006944:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800694c <nanf+0x8>
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	7fc00000 	.word	0x7fc00000

08006950 <siprintf>:
 8006950:	b40e      	push	{r1, r2, r3}
 8006952:	b500      	push	{lr}
 8006954:	b09c      	sub	sp, #112	; 0x70
 8006956:	ab1d      	add	r3, sp, #116	; 0x74
 8006958:	9002      	str	r0, [sp, #8]
 800695a:	9006      	str	r0, [sp, #24]
 800695c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006960:	4809      	ldr	r0, [pc, #36]	; (8006988 <siprintf+0x38>)
 8006962:	9107      	str	r1, [sp, #28]
 8006964:	9104      	str	r1, [sp, #16]
 8006966:	4909      	ldr	r1, [pc, #36]	; (800698c <siprintf+0x3c>)
 8006968:	f853 2b04 	ldr.w	r2, [r3], #4
 800696c:	9105      	str	r1, [sp, #20]
 800696e:	6800      	ldr	r0, [r0, #0]
 8006970:	9301      	str	r3, [sp, #4]
 8006972:	a902      	add	r1, sp, #8
 8006974:	f002 ffda 	bl	800992c <_svfiprintf_r>
 8006978:	9b02      	ldr	r3, [sp, #8]
 800697a:	2200      	movs	r2, #0
 800697c:	701a      	strb	r2, [r3, #0]
 800697e:	b01c      	add	sp, #112	; 0x70
 8006980:	f85d eb04 	ldr.w	lr, [sp], #4
 8006984:	b003      	add	sp, #12
 8006986:	4770      	bx	lr
 8006988:	2000000c 	.word	0x2000000c
 800698c:	ffff0208 	.word	0xffff0208

08006990 <sulp>:
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	4604      	mov	r4, r0
 8006994:	460d      	mov	r5, r1
 8006996:	ec45 4b10 	vmov	d0, r4, r5
 800699a:	4616      	mov	r6, r2
 800699c:	f002 fd24 	bl	80093e8 <__ulp>
 80069a0:	ec51 0b10 	vmov	r0, r1, d0
 80069a4:	b17e      	cbz	r6, 80069c6 <sulp+0x36>
 80069a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80069aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dd09      	ble.n	80069c6 <sulp+0x36>
 80069b2:	051b      	lsls	r3, r3, #20
 80069b4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80069b8:	2400      	movs	r4, #0
 80069ba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80069be:	4622      	mov	r2, r4
 80069c0:	462b      	mov	r3, r5
 80069c2:	f7f9 fe29 	bl	8000618 <__aeabi_dmul>
 80069c6:	bd70      	pop	{r4, r5, r6, pc}

080069c8 <_strtod_l>:
 80069c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069cc:	ed2d 8b02 	vpush	{d8}
 80069d0:	b09d      	sub	sp, #116	; 0x74
 80069d2:	461f      	mov	r7, r3
 80069d4:	2300      	movs	r3, #0
 80069d6:	9318      	str	r3, [sp, #96]	; 0x60
 80069d8:	4ba2      	ldr	r3, [pc, #648]	; (8006c64 <_strtod_l+0x29c>)
 80069da:	9213      	str	r2, [sp, #76]	; 0x4c
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	9305      	str	r3, [sp, #20]
 80069e0:	4604      	mov	r4, r0
 80069e2:	4618      	mov	r0, r3
 80069e4:	4688      	mov	r8, r1
 80069e6:	f7f9 fc03 	bl	80001f0 <strlen>
 80069ea:	f04f 0a00 	mov.w	sl, #0
 80069ee:	4605      	mov	r5, r0
 80069f0:	f04f 0b00 	mov.w	fp, #0
 80069f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80069f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	2a2b      	cmp	r2, #43	; 0x2b
 80069fe:	d04e      	beq.n	8006a9e <_strtod_l+0xd6>
 8006a00:	d83b      	bhi.n	8006a7a <_strtod_l+0xb2>
 8006a02:	2a0d      	cmp	r2, #13
 8006a04:	d834      	bhi.n	8006a70 <_strtod_l+0xa8>
 8006a06:	2a08      	cmp	r2, #8
 8006a08:	d834      	bhi.n	8006a74 <_strtod_l+0xac>
 8006a0a:	2a00      	cmp	r2, #0
 8006a0c:	d03e      	beq.n	8006a8c <_strtod_l+0xc4>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	930a      	str	r3, [sp, #40]	; 0x28
 8006a12:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006a14:	7833      	ldrb	r3, [r6, #0]
 8006a16:	2b30      	cmp	r3, #48	; 0x30
 8006a18:	f040 80b0 	bne.w	8006b7c <_strtod_l+0x1b4>
 8006a1c:	7873      	ldrb	r3, [r6, #1]
 8006a1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a22:	2b58      	cmp	r3, #88	; 0x58
 8006a24:	d168      	bne.n	8006af8 <_strtod_l+0x130>
 8006a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a28:	9301      	str	r3, [sp, #4]
 8006a2a:	ab18      	add	r3, sp, #96	; 0x60
 8006a2c:	9702      	str	r7, [sp, #8]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	4a8d      	ldr	r2, [pc, #564]	; (8006c68 <_strtod_l+0x2a0>)
 8006a32:	ab19      	add	r3, sp, #100	; 0x64
 8006a34:	a917      	add	r1, sp, #92	; 0x5c
 8006a36:	4620      	mov	r0, r4
 8006a38:	f001 fe2c 	bl	8008694 <__gethex>
 8006a3c:	f010 0707 	ands.w	r7, r0, #7
 8006a40:	4605      	mov	r5, r0
 8006a42:	d005      	beq.n	8006a50 <_strtod_l+0x88>
 8006a44:	2f06      	cmp	r7, #6
 8006a46:	d12c      	bne.n	8006aa2 <_strtod_l+0xda>
 8006a48:	3601      	adds	r6, #1
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	9617      	str	r6, [sp, #92]	; 0x5c
 8006a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006a50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f040 8590 	bne.w	8007578 <_strtod_l+0xbb0>
 8006a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a5a:	b1eb      	cbz	r3, 8006a98 <_strtod_l+0xd0>
 8006a5c:	4652      	mov	r2, sl
 8006a5e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006a62:	ec43 2b10 	vmov	d0, r2, r3
 8006a66:	b01d      	add	sp, #116	; 0x74
 8006a68:	ecbd 8b02 	vpop	{d8}
 8006a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a70:	2a20      	cmp	r2, #32
 8006a72:	d1cc      	bne.n	8006a0e <_strtod_l+0x46>
 8006a74:	3301      	adds	r3, #1
 8006a76:	9317      	str	r3, [sp, #92]	; 0x5c
 8006a78:	e7be      	b.n	80069f8 <_strtod_l+0x30>
 8006a7a:	2a2d      	cmp	r2, #45	; 0x2d
 8006a7c:	d1c7      	bne.n	8006a0e <_strtod_l+0x46>
 8006a7e:	2201      	movs	r2, #1
 8006a80:	920a      	str	r2, [sp, #40]	; 0x28
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	9217      	str	r2, [sp, #92]	; 0x5c
 8006a86:	785b      	ldrb	r3, [r3, #1]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1c2      	bne.n	8006a12 <_strtod_l+0x4a>
 8006a8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a8e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f040 856e 	bne.w	8007574 <_strtod_l+0xbac>
 8006a98:	4652      	mov	r2, sl
 8006a9a:	465b      	mov	r3, fp
 8006a9c:	e7e1      	b.n	8006a62 <_strtod_l+0x9a>
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	e7ee      	b.n	8006a80 <_strtod_l+0xb8>
 8006aa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006aa4:	b13a      	cbz	r2, 8006ab6 <_strtod_l+0xee>
 8006aa6:	2135      	movs	r1, #53	; 0x35
 8006aa8:	a81a      	add	r0, sp, #104	; 0x68
 8006aaa:	f002 fda8 	bl	80095fe <__copybits>
 8006aae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f002 f967 	bl	8008d84 <_Bfree>
 8006ab6:	3f01      	subs	r7, #1
 8006ab8:	2f04      	cmp	r7, #4
 8006aba:	d806      	bhi.n	8006aca <_strtod_l+0x102>
 8006abc:	e8df f007 	tbb	[pc, r7]
 8006ac0:	1714030a 	.word	0x1714030a
 8006ac4:	0a          	.byte	0x0a
 8006ac5:	00          	.byte	0x00
 8006ac6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006aca:	0728      	lsls	r0, r5, #28
 8006acc:	d5c0      	bpl.n	8006a50 <_strtod_l+0x88>
 8006ace:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006ad2:	e7bd      	b.n	8006a50 <_strtod_l+0x88>
 8006ad4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006ad8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ada:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006ade:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006ae2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006ae6:	e7f0      	b.n	8006aca <_strtod_l+0x102>
 8006ae8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006c6c <_strtod_l+0x2a4>
 8006aec:	e7ed      	b.n	8006aca <_strtod_l+0x102>
 8006aee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006af2:	f04f 3aff 	mov.w	sl, #4294967295
 8006af6:	e7e8      	b.n	8006aca <_strtod_l+0x102>
 8006af8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b30      	cmp	r3, #48	; 0x30
 8006b02:	d0f9      	beq.n	8006af8 <_strtod_l+0x130>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0a3      	beq.n	8006a50 <_strtod_l+0x88>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	f04f 0900 	mov.w	r9, #0
 8006b0e:	9304      	str	r3, [sp, #16]
 8006b10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b12:	9308      	str	r3, [sp, #32]
 8006b14:	f8cd 901c 	str.w	r9, [sp, #28]
 8006b18:	464f      	mov	r7, r9
 8006b1a:	220a      	movs	r2, #10
 8006b1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006b1e:	7806      	ldrb	r6, [r0, #0]
 8006b20:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006b24:	b2d9      	uxtb	r1, r3
 8006b26:	2909      	cmp	r1, #9
 8006b28:	d92a      	bls.n	8006b80 <_strtod_l+0x1b8>
 8006b2a:	9905      	ldr	r1, [sp, #20]
 8006b2c:	462a      	mov	r2, r5
 8006b2e:	f003 f9b2 	bl	8009e96 <strncmp>
 8006b32:	b398      	cbz	r0, 8006b9c <_strtod_l+0x1d4>
 8006b34:	2000      	movs	r0, #0
 8006b36:	4632      	mov	r2, r6
 8006b38:	463d      	mov	r5, r7
 8006b3a:	9005      	str	r0, [sp, #20]
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2a65      	cmp	r2, #101	; 0x65
 8006b40:	d001      	beq.n	8006b46 <_strtod_l+0x17e>
 8006b42:	2a45      	cmp	r2, #69	; 0x45
 8006b44:	d118      	bne.n	8006b78 <_strtod_l+0x1b0>
 8006b46:	b91d      	cbnz	r5, 8006b50 <_strtod_l+0x188>
 8006b48:	9a04      	ldr	r2, [sp, #16]
 8006b4a:	4302      	orrs	r2, r0
 8006b4c:	d09e      	beq.n	8006a8c <_strtod_l+0xc4>
 8006b4e:	2500      	movs	r5, #0
 8006b50:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006b54:	f108 0201 	add.w	r2, r8, #1
 8006b58:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006b5e:	2a2b      	cmp	r2, #43	; 0x2b
 8006b60:	d075      	beq.n	8006c4e <_strtod_l+0x286>
 8006b62:	2a2d      	cmp	r2, #45	; 0x2d
 8006b64:	d07b      	beq.n	8006c5e <_strtod_l+0x296>
 8006b66:	f04f 0c00 	mov.w	ip, #0
 8006b6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006b6e:	2909      	cmp	r1, #9
 8006b70:	f240 8082 	bls.w	8006c78 <_strtod_l+0x2b0>
 8006b74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006b78:	2600      	movs	r6, #0
 8006b7a:	e09d      	b.n	8006cb8 <_strtod_l+0x2f0>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e7c4      	b.n	8006b0a <_strtod_l+0x142>
 8006b80:	2f08      	cmp	r7, #8
 8006b82:	bfd8      	it	le
 8006b84:	9907      	ldrle	r1, [sp, #28]
 8006b86:	f100 0001 	add.w	r0, r0, #1
 8006b8a:	bfda      	itte	le
 8006b8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006b90:	9307      	strle	r3, [sp, #28]
 8006b92:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006b96:	3701      	adds	r7, #1
 8006b98:	9017      	str	r0, [sp, #92]	; 0x5c
 8006b9a:	e7bf      	b.n	8006b1c <_strtod_l+0x154>
 8006b9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b9e:	195a      	adds	r2, r3, r5
 8006ba0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ba2:	5d5a      	ldrb	r2, [r3, r5]
 8006ba4:	2f00      	cmp	r7, #0
 8006ba6:	d037      	beq.n	8006c18 <_strtod_l+0x250>
 8006ba8:	9005      	str	r0, [sp, #20]
 8006baa:	463d      	mov	r5, r7
 8006bac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006bb0:	2b09      	cmp	r3, #9
 8006bb2:	d912      	bls.n	8006bda <_strtod_l+0x212>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e7c2      	b.n	8006b3e <_strtod_l+0x176>
 8006bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006bbe:	785a      	ldrb	r2, [r3, #1]
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	2a30      	cmp	r2, #48	; 0x30
 8006bc4:	d0f8      	beq.n	8006bb8 <_strtod_l+0x1f0>
 8006bc6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	f200 84d9 	bhi.w	8007582 <_strtod_l+0xbba>
 8006bd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bd2:	9005      	str	r0, [sp, #20]
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	9308      	str	r3, [sp, #32]
 8006bd8:	4605      	mov	r5, r0
 8006bda:	3a30      	subs	r2, #48	; 0x30
 8006bdc:	f100 0301 	add.w	r3, r0, #1
 8006be0:	d014      	beq.n	8006c0c <_strtod_l+0x244>
 8006be2:	9905      	ldr	r1, [sp, #20]
 8006be4:	4419      	add	r1, r3
 8006be6:	9105      	str	r1, [sp, #20]
 8006be8:	462b      	mov	r3, r5
 8006bea:	eb00 0e05 	add.w	lr, r0, r5
 8006bee:	210a      	movs	r1, #10
 8006bf0:	4573      	cmp	r3, lr
 8006bf2:	d113      	bne.n	8006c1c <_strtod_l+0x254>
 8006bf4:	182b      	adds	r3, r5, r0
 8006bf6:	2b08      	cmp	r3, #8
 8006bf8:	f105 0501 	add.w	r5, r5, #1
 8006bfc:	4405      	add	r5, r0
 8006bfe:	dc1c      	bgt.n	8006c3a <_strtod_l+0x272>
 8006c00:	9907      	ldr	r1, [sp, #28]
 8006c02:	230a      	movs	r3, #10
 8006c04:	fb03 2301 	mla	r3, r3, r1, r2
 8006c08:	9307      	str	r3, [sp, #28]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c0e:	1c51      	adds	r1, r2, #1
 8006c10:	9117      	str	r1, [sp, #92]	; 0x5c
 8006c12:	7852      	ldrb	r2, [r2, #1]
 8006c14:	4618      	mov	r0, r3
 8006c16:	e7c9      	b.n	8006bac <_strtod_l+0x1e4>
 8006c18:	4638      	mov	r0, r7
 8006c1a:	e7d2      	b.n	8006bc2 <_strtod_l+0x1fa>
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	dc04      	bgt.n	8006c2a <_strtod_l+0x262>
 8006c20:	9e07      	ldr	r6, [sp, #28]
 8006c22:	434e      	muls	r6, r1
 8006c24:	9607      	str	r6, [sp, #28]
 8006c26:	3301      	adds	r3, #1
 8006c28:	e7e2      	b.n	8006bf0 <_strtod_l+0x228>
 8006c2a:	f103 0c01 	add.w	ip, r3, #1
 8006c2e:	f1bc 0f10 	cmp.w	ip, #16
 8006c32:	bfd8      	it	le
 8006c34:	fb01 f909 	mulle.w	r9, r1, r9
 8006c38:	e7f5      	b.n	8006c26 <_strtod_l+0x25e>
 8006c3a:	2d10      	cmp	r5, #16
 8006c3c:	bfdc      	itt	le
 8006c3e:	230a      	movle	r3, #10
 8006c40:	fb03 2909 	mlale	r9, r3, r9, r2
 8006c44:	e7e1      	b.n	8006c0a <_strtod_l+0x242>
 8006c46:	2300      	movs	r3, #0
 8006c48:	9305      	str	r3, [sp, #20]
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e77c      	b.n	8006b48 <_strtod_l+0x180>
 8006c4e:	f04f 0c00 	mov.w	ip, #0
 8006c52:	f108 0202 	add.w	r2, r8, #2
 8006c56:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c58:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006c5c:	e785      	b.n	8006b6a <_strtod_l+0x1a2>
 8006c5e:	f04f 0c01 	mov.w	ip, #1
 8006c62:	e7f6      	b.n	8006c52 <_strtod_l+0x28a>
 8006c64:	0800a85c 	.word	0x0800a85c
 8006c68:	0800a5b0 	.word	0x0800a5b0
 8006c6c:	7ff00000 	.word	0x7ff00000
 8006c70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c72:	1c51      	adds	r1, r2, #1
 8006c74:	9117      	str	r1, [sp, #92]	; 0x5c
 8006c76:	7852      	ldrb	r2, [r2, #1]
 8006c78:	2a30      	cmp	r2, #48	; 0x30
 8006c7a:	d0f9      	beq.n	8006c70 <_strtod_l+0x2a8>
 8006c7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006c80:	2908      	cmp	r1, #8
 8006c82:	f63f af79 	bhi.w	8006b78 <_strtod_l+0x1b0>
 8006c86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006c8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c8c:	9206      	str	r2, [sp, #24]
 8006c8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c90:	1c51      	adds	r1, r2, #1
 8006c92:	9117      	str	r1, [sp, #92]	; 0x5c
 8006c94:	7852      	ldrb	r2, [r2, #1]
 8006c96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006c9a:	2e09      	cmp	r6, #9
 8006c9c:	d937      	bls.n	8006d0e <_strtod_l+0x346>
 8006c9e:	9e06      	ldr	r6, [sp, #24]
 8006ca0:	1b89      	subs	r1, r1, r6
 8006ca2:	2908      	cmp	r1, #8
 8006ca4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006ca8:	dc02      	bgt.n	8006cb0 <_strtod_l+0x2e8>
 8006caa:	4576      	cmp	r6, lr
 8006cac:	bfa8      	it	ge
 8006cae:	4676      	movge	r6, lr
 8006cb0:	f1bc 0f00 	cmp.w	ip, #0
 8006cb4:	d000      	beq.n	8006cb8 <_strtod_l+0x2f0>
 8006cb6:	4276      	negs	r6, r6
 8006cb8:	2d00      	cmp	r5, #0
 8006cba:	d14d      	bne.n	8006d58 <_strtod_l+0x390>
 8006cbc:	9904      	ldr	r1, [sp, #16]
 8006cbe:	4301      	orrs	r1, r0
 8006cc0:	f47f aec6 	bne.w	8006a50 <_strtod_l+0x88>
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f47f aee1 	bne.w	8006a8c <_strtod_l+0xc4>
 8006cca:	2a69      	cmp	r2, #105	; 0x69
 8006ccc:	d027      	beq.n	8006d1e <_strtod_l+0x356>
 8006cce:	dc24      	bgt.n	8006d1a <_strtod_l+0x352>
 8006cd0:	2a49      	cmp	r2, #73	; 0x49
 8006cd2:	d024      	beq.n	8006d1e <_strtod_l+0x356>
 8006cd4:	2a4e      	cmp	r2, #78	; 0x4e
 8006cd6:	f47f aed9 	bne.w	8006a8c <_strtod_l+0xc4>
 8006cda:	499f      	ldr	r1, [pc, #636]	; (8006f58 <_strtod_l+0x590>)
 8006cdc:	a817      	add	r0, sp, #92	; 0x5c
 8006cde:	f001 ff31 	bl	8008b44 <__match>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	f43f aed2 	beq.w	8006a8c <_strtod_l+0xc4>
 8006ce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b28      	cmp	r3, #40	; 0x28
 8006cee:	d12d      	bne.n	8006d4c <_strtod_l+0x384>
 8006cf0:	499a      	ldr	r1, [pc, #616]	; (8006f5c <_strtod_l+0x594>)
 8006cf2:	aa1a      	add	r2, sp, #104	; 0x68
 8006cf4:	a817      	add	r0, sp, #92	; 0x5c
 8006cf6:	f001 ff39 	bl	8008b6c <__hexnan>
 8006cfa:	2805      	cmp	r0, #5
 8006cfc:	d126      	bne.n	8006d4c <_strtod_l+0x384>
 8006cfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006d04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006d08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006d0c:	e6a0      	b.n	8006a50 <_strtod_l+0x88>
 8006d0e:	210a      	movs	r1, #10
 8006d10:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006d14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006d18:	e7b9      	b.n	8006c8e <_strtod_l+0x2c6>
 8006d1a:	2a6e      	cmp	r2, #110	; 0x6e
 8006d1c:	e7db      	b.n	8006cd6 <_strtod_l+0x30e>
 8006d1e:	4990      	ldr	r1, [pc, #576]	; (8006f60 <_strtod_l+0x598>)
 8006d20:	a817      	add	r0, sp, #92	; 0x5c
 8006d22:	f001 ff0f 	bl	8008b44 <__match>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	f43f aeb0 	beq.w	8006a8c <_strtod_l+0xc4>
 8006d2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d2e:	498d      	ldr	r1, [pc, #564]	; (8006f64 <_strtod_l+0x59c>)
 8006d30:	3b01      	subs	r3, #1
 8006d32:	a817      	add	r0, sp, #92	; 0x5c
 8006d34:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d36:	f001 ff05 	bl	8008b44 <__match>
 8006d3a:	b910      	cbnz	r0, 8006d42 <_strtod_l+0x37a>
 8006d3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d3e:	3301      	adds	r3, #1
 8006d40:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d42:	f8df b230 	ldr.w	fp, [pc, #560]	; 8006f74 <_strtod_l+0x5ac>
 8006d46:	f04f 0a00 	mov.w	sl, #0
 8006d4a:	e681      	b.n	8006a50 <_strtod_l+0x88>
 8006d4c:	4886      	ldr	r0, [pc, #536]	; (8006f68 <_strtod_l+0x5a0>)
 8006d4e:	f003 f847 	bl	8009de0 <nan>
 8006d52:	ec5b ab10 	vmov	sl, fp, d0
 8006d56:	e67b      	b.n	8006a50 <_strtod_l+0x88>
 8006d58:	9b05      	ldr	r3, [sp, #20]
 8006d5a:	9807      	ldr	r0, [sp, #28]
 8006d5c:	1af3      	subs	r3, r6, r3
 8006d5e:	2f00      	cmp	r7, #0
 8006d60:	bf08      	it	eq
 8006d62:	462f      	moveq	r7, r5
 8006d64:	2d10      	cmp	r5, #16
 8006d66:	9306      	str	r3, [sp, #24]
 8006d68:	46a8      	mov	r8, r5
 8006d6a:	bfa8      	it	ge
 8006d6c:	f04f 0810 	movge.w	r8, #16
 8006d70:	f7f9 fbd8 	bl	8000524 <__aeabi_ui2d>
 8006d74:	2d09      	cmp	r5, #9
 8006d76:	4682      	mov	sl, r0
 8006d78:	468b      	mov	fp, r1
 8006d7a:	dd13      	ble.n	8006da4 <_strtod_l+0x3dc>
 8006d7c:	4b7b      	ldr	r3, [pc, #492]	; (8006f6c <_strtod_l+0x5a4>)
 8006d7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006d82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006d86:	f7f9 fc47 	bl	8000618 <__aeabi_dmul>
 8006d8a:	4682      	mov	sl, r0
 8006d8c:	4648      	mov	r0, r9
 8006d8e:	468b      	mov	fp, r1
 8006d90:	f7f9 fbc8 	bl	8000524 <__aeabi_ui2d>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4650      	mov	r0, sl
 8006d9a:	4659      	mov	r1, fp
 8006d9c:	f7f9 fa86 	bl	80002ac <__adddf3>
 8006da0:	4682      	mov	sl, r0
 8006da2:	468b      	mov	fp, r1
 8006da4:	2d0f      	cmp	r5, #15
 8006da6:	dc38      	bgt.n	8006e1a <_strtod_l+0x452>
 8006da8:	9b06      	ldr	r3, [sp, #24]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f43f ae50 	beq.w	8006a50 <_strtod_l+0x88>
 8006db0:	dd24      	ble.n	8006dfc <_strtod_l+0x434>
 8006db2:	2b16      	cmp	r3, #22
 8006db4:	dc0b      	bgt.n	8006dce <_strtod_l+0x406>
 8006db6:	496d      	ldr	r1, [pc, #436]	; (8006f6c <_strtod_l+0x5a4>)
 8006db8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dc0:	4652      	mov	r2, sl
 8006dc2:	465b      	mov	r3, fp
 8006dc4:	f7f9 fc28 	bl	8000618 <__aeabi_dmul>
 8006dc8:	4682      	mov	sl, r0
 8006dca:	468b      	mov	fp, r1
 8006dcc:	e640      	b.n	8006a50 <_strtod_l+0x88>
 8006dce:	9a06      	ldr	r2, [sp, #24]
 8006dd0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	db20      	blt.n	8006e1a <_strtod_l+0x452>
 8006dd8:	4c64      	ldr	r4, [pc, #400]	; (8006f6c <_strtod_l+0x5a4>)
 8006dda:	f1c5 050f 	rsb	r5, r5, #15
 8006dde:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006de2:	4652      	mov	r2, sl
 8006de4:	465b      	mov	r3, fp
 8006de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006dea:	f7f9 fc15 	bl	8000618 <__aeabi_dmul>
 8006dee:	9b06      	ldr	r3, [sp, #24]
 8006df0:	1b5d      	subs	r5, r3, r5
 8006df2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006df6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006dfa:	e7e3      	b.n	8006dc4 <_strtod_l+0x3fc>
 8006dfc:	9b06      	ldr	r3, [sp, #24]
 8006dfe:	3316      	adds	r3, #22
 8006e00:	db0b      	blt.n	8006e1a <_strtod_l+0x452>
 8006e02:	9b05      	ldr	r3, [sp, #20]
 8006e04:	1b9e      	subs	r6, r3, r6
 8006e06:	4b59      	ldr	r3, [pc, #356]	; (8006f6c <_strtod_l+0x5a4>)
 8006e08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006e0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e10:	4650      	mov	r0, sl
 8006e12:	4659      	mov	r1, fp
 8006e14:	f7f9 fd2a 	bl	800086c <__aeabi_ddiv>
 8006e18:	e7d6      	b.n	8006dc8 <_strtod_l+0x400>
 8006e1a:	9b06      	ldr	r3, [sp, #24]
 8006e1c:	eba5 0808 	sub.w	r8, r5, r8
 8006e20:	4498      	add	r8, r3
 8006e22:	f1b8 0f00 	cmp.w	r8, #0
 8006e26:	dd74      	ble.n	8006f12 <_strtod_l+0x54a>
 8006e28:	f018 030f 	ands.w	r3, r8, #15
 8006e2c:	d00a      	beq.n	8006e44 <_strtod_l+0x47c>
 8006e2e:	494f      	ldr	r1, [pc, #316]	; (8006f6c <_strtod_l+0x5a4>)
 8006e30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e34:	4652      	mov	r2, sl
 8006e36:	465b      	mov	r3, fp
 8006e38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e3c:	f7f9 fbec 	bl	8000618 <__aeabi_dmul>
 8006e40:	4682      	mov	sl, r0
 8006e42:	468b      	mov	fp, r1
 8006e44:	f038 080f 	bics.w	r8, r8, #15
 8006e48:	d04f      	beq.n	8006eea <_strtod_l+0x522>
 8006e4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006e4e:	dd22      	ble.n	8006e96 <_strtod_l+0x4ce>
 8006e50:	2500      	movs	r5, #0
 8006e52:	462e      	mov	r6, r5
 8006e54:	9507      	str	r5, [sp, #28]
 8006e56:	9505      	str	r5, [sp, #20]
 8006e58:	2322      	movs	r3, #34	; 0x22
 8006e5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8006f74 <_strtod_l+0x5ac>
 8006e5e:	6023      	str	r3, [r4, #0]
 8006e60:	f04f 0a00 	mov.w	sl, #0
 8006e64:	9b07      	ldr	r3, [sp, #28]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f43f adf2 	beq.w	8006a50 <_strtod_l+0x88>
 8006e6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f001 ff88 	bl	8008d84 <_Bfree>
 8006e74:	9905      	ldr	r1, [sp, #20]
 8006e76:	4620      	mov	r0, r4
 8006e78:	f001 ff84 	bl	8008d84 <_Bfree>
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f001 ff80 	bl	8008d84 <_Bfree>
 8006e84:	9907      	ldr	r1, [sp, #28]
 8006e86:	4620      	mov	r0, r4
 8006e88:	f001 ff7c 	bl	8008d84 <_Bfree>
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	4620      	mov	r0, r4
 8006e90:	f001 ff78 	bl	8008d84 <_Bfree>
 8006e94:	e5dc      	b.n	8006a50 <_strtod_l+0x88>
 8006e96:	4b36      	ldr	r3, [pc, #216]	; (8006f70 <_strtod_l+0x5a8>)
 8006e98:	9304      	str	r3, [sp, #16]
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006ea0:	4650      	mov	r0, sl
 8006ea2:	4659      	mov	r1, fp
 8006ea4:	4699      	mov	r9, r3
 8006ea6:	f1b8 0f01 	cmp.w	r8, #1
 8006eaa:	dc21      	bgt.n	8006ef0 <_strtod_l+0x528>
 8006eac:	b10b      	cbz	r3, 8006eb2 <_strtod_l+0x4ea>
 8006eae:	4682      	mov	sl, r0
 8006eb0:	468b      	mov	fp, r1
 8006eb2:	4b2f      	ldr	r3, [pc, #188]	; (8006f70 <_strtod_l+0x5a8>)
 8006eb4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006eb8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006ebc:	4652      	mov	r2, sl
 8006ebe:	465b      	mov	r3, fp
 8006ec0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006ec4:	f7f9 fba8 	bl	8000618 <__aeabi_dmul>
 8006ec8:	4b2a      	ldr	r3, [pc, #168]	; (8006f74 <_strtod_l+0x5ac>)
 8006eca:	460a      	mov	r2, r1
 8006ecc:	400b      	ands	r3, r1
 8006ece:	492a      	ldr	r1, [pc, #168]	; (8006f78 <_strtod_l+0x5b0>)
 8006ed0:	428b      	cmp	r3, r1
 8006ed2:	4682      	mov	sl, r0
 8006ed4:	d8bc      	bhi.n	8006e50 <_strtod_l+0x488>
 8006ed6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006eda:	428b      	cmp	r3, r1
 8006edc:	bf86      	itte	hi
 8006ede:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006f7c <_strtod_l+0x5b4>
 8006ee2:	f04f 3aff 	movhi.w	sl, #4294967295
 8006ee6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006eea:	2300      	movs	r3, #0
 8006eec:	9304      	str	r3, [sp, #16]
 8006eee:	e084      	b.n	8006ffa <_strtod_l+0x632>
 8006ef0:	f018 0f01 	tst.w	r8, #1
 8006ef4:	d005      	beq.n	8006f02 <_strtod_l+0x53a>
 8006ef6:	9b04      	ldr	r3, [sp, #16]
 8006ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efc:	f7f9 fb8c 	bl	8000618 <__aeabi_dmul>
 8006f00:	2301      	movs	r3, #1
 8006f02:	9a04      	ldr	r2, [sp, #16]
 8006f04:	3208      	adds	r2, #8
 8006f06:	f109 0901 	add.w	r9, r9, #1
 8006f0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006f0e:	9204      	str	r2, [sp, #16]
 8006f10:	e7c9      	b.n	8006ea6 <_strtod_l+0x4de>
 8006f12:	d0ea      	beq.n	8006eea <_strtod_l+0x522>
 8006f14:	f1c8 0800 	rsb	r8, r8, #0
 8006f18:	f018 020f 	ands.w	r2, r8, #15
 8006f1c:	d00a      	beq.n	8006f34 <_strtod_l+0x56c>
 8006f1e:	4b13      	ldr	r3, [pc, #76]	; (8006f6c <_strtod_l+0x5a4>)
 8006f20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f24:	4650      	mov	r0, sl
 8006f26:	4659      	mov	r1, fp
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	f7f9 fc9e 	bl	800086c <__aeabi_ddiv>
 8006f30:	4682      	mov	sl, r0
 8006f32:	468b      	mov	fp, r1
 8006f34:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006f38:	d0d7      	beq.n	8006eea <_strtod_l+0x522>
 8006f3a:	f1b8 0f1f 	cmp.w	r8, #31
 8006f3e:	dd1f      	ble.n	8006f80 <_strtod_l+0x5b8>
 8006f40:	2500      	movs	r5, #0
 8006f42:	462e      	mov	r6, r5
 8006f44:	9507      	str	r5, [sp, #28]
 8006f46:	9505      	str	r5, [sp, #20]
 8006f48:	2322      	movs	r3, #34	; 0x22
 8006f4a:	f04f 0a00 	mov.w	sl, #0
 8006f4e:	f04f 0b00 	mov.w	fp, #0
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	e786      	b.n	8006e64 <_strtod_l+0x49c>
 8006f56:	bf00      	nop
 8006f58:	0800a581 	.word	0x0800a581
 8006f5c:	0800a5c4 	.word	0x0800a5c4
 8006f60:	0800a579 	.word	0x0800a579
 8006f64:	0800a704 	.word	0x0800a704
 8006f68:	0800aa18 	.word	0x0800aa18
 8006f6c:	0800a8f8 	.word	0x0800a8f8
 8006f70:	0800a8d0 	.word	0x0800a8d0
 8006f74:	7ff00000 	.word	0x7ff00000
 8006f78:	7ca00000 	.word	0x7ca00000
 8006f7c:	7fefffff 	.word	0x7fefffff
 8006f80:	f018 0310 	ands.w	r3, r8, #16
 8006f84:	bf18      	it	ne
 8006f86:	236a      	movne	r3, #106	; 0x6a
 8006f88:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007338 <_strtod_l+0x970>
 8006f8c:	9304      	str	r3, [sp, #16]
 8006f8e:	4650      	mov	r0, sl
 8006f90:	4659      	mov	r1, fp
 8006f92:	2300      	movs	r3, #0
 8006f94:	f018 0f01 	tst.w	r8, #1
 8006f98:	d004      	beq.n	8006fa4 <_strtod_l+0x5dc>
 8006f9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006f9e:	f7f9 fb3b 	bl	8000618 <__aeabi_dmul>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006fa8:	f109 0908 	add.w	r9, r9, #8
 8006fac:	d1f2      	bne.n	8006f94 <_strtod_l+0x5cc>
 8006fae:	b10b      	cbz	r3, 8006fb4 <_strtod_l+0x5ec>
 8006fb0:	4682      	mov	sl, r0
 8006fb2:	468b      	mov	fp, r1
 8006fb4:	9b04      	ldr	r3, [sp, #16]
 8006fb6:	b1c3      	cbz	r3, 8006fea <_strtod_l+0x622>
 8006fb8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006fbc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	4659      	mov	r1, fp
 8006fc4:	dd11      	ble.n	8006fea <_strtod_l+0x622>
 8006fc6:	2b1f      	cmp	r3, #31
 8006fc8:	f340 8124 	ble.w	8007214 <_strtod_l+0x84c>
 8006fcc:	2b34      	cmp	r3, #52	; 0x34
 8006fce:	bfde      	ittt	le
 8006fd0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006fd4:	f04f 33ff 	movle.w	r3, #4294967295
 8006fd8:	fa03 f202 	lslle.w	r2, r3, r2
 8006fdc:	f04f 0a00 	mov.w	sl, #0
 8006fe0:	bfcc      	ite	gt
 8006fe2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006fe6:	ea02 0b01 	andle.w	fp, r2, r1
 8006fea:	2200      	movs	r2, #0
 8006fec:	2300      	movs	r3, #0
 8006fee:	4650      	mov	r0, sl
 8006ff0:	4659      	mov	r1, fp
 8006ff2:	f7f9 fd79 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d1a2      	bne.n	8006f40 <_strtod_l+0x578>
 8006ffa:	9b07      	ldr	r3, [sp, #28]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	9908      	ldr	r1, [sp, #32]
 8007000:	462b      	mov	r3, r5
 8007002:	463a      	mov	r2, r7
 8007004:	4620      	mov	r0, r4
 8007006:	f001 ff25 	bl	8008e54 <__s2b>
 800700a:	9007      	str	r0, [sp, #28]
 800700c:	2800      	cmp	r0, #0
 800700e:	f43f af1f 	beq.w	8006e50 <_strtod_l+0x488>
 8007012:	9b05      	ldr	r3, [sp, #20]
 8007014:	1b9e      	subs	r6, r3, r6
 8007016:	9b06      	ldr	r3, [sp, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	bfb4      	ite	lt
 800701c:	4633      	movlt	r3, r6
 800701e:	2300      	movge	r3, #0
 8007020:	930c      	str	r3, [sp, #48]	; 0x30
 8007022:	9b06      	ldr	r3, [sp, #24]
 8007024:	2500      	movs	r5, #0
 8007026:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800702a:	9312      	str	r3, [sp, #72]	; 0x48
 800702c:	462e      	mov	r6, r5
 800702e:	9b07      	ldr	r3, [sp, #28]
 8007030:	4620      	mov	r0, r4
 8007032:	6859      	ldr	r1, [r3, #4]
 8007034:	f001 fe66 	bl	8008d04 <_Balloc>
 8007038:	9005      	str	r0, [sp, #20]
 800703a:	2800      	cmp	r0, #0
 800703c:	f43f af0c 	beq.w	8006e58 <_strtod_l+0x490>
 8007040:	9b07      	ldr	r3, [sp, #28]
 8007042:	691a      	ldr	r2, [r3, #16]
 8007044:	3202      	adds	r2, #2
 8007046:	f103 010c 	add.w	r1, r3, #12
 800704a:	0092      	lsls	r2, r2, #2
 800704c:	300c      	adds	r0, #12
 800704e:	f001 fe4b 	bl	8008ce8 <memcpy>
 8007052:	ec4b ab10 	vmov	d0, sl, fp
 8007056:	aa1a      	add	r2, sp, #104	; 0x68
 8007058:	a919      	add	r1, sp, #100	; 0x64
 800705a:	4620      	mov	r0, r4
 800705c:	f002 fa40 	bl	80094e0 <__d2b>
 8007060:	ec4b ab18 	vmov	d8, sl, fp
 8007064:	9018      	str	r0, [sp, #96]	; 0x60
 8007066:	2800      	cmp	r0, #0
 8007068:	f43f aef6 	beq.w	8006e58 <_strtod_l+0x490>
 800706c:	2101      	movs	r1, #1
 800706e:	4620      	mov	r0, r4
 8007070:	f001 ff8a 	bl	8008f88 <__i2b>
 8007074:	4606      	mov	r6, r0
 8007076:	2800      	cmp	r0, #0
 8007078:	f43f aeee 	beq.w	8006e58 <_strtod_l+0x490>
 800707c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800707e:	9904      	ldr	r1, [sp, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	bfab      	itete	ge
 8007084:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007086:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007088:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800708a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800708e:	bfac      	ite	ge
 8007090:	eb03 0902 	addge.w	r9, r3, r2
 8007094:	1ad7      	sublt	r7, r2, r3
 8007096:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007098:	eba3 0801 	sub.w	r8, r3, r1
 800709c:	4490      	add	r8, r2
 800709e:	4ba1      	ldr	r3, [pc, #644]	; (8007324 <_strtod_l+0x95c>)
 80070a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80070a4:	4598      	cmp	r8, r3
 80070a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80070aa:	f280 80c7 	bge.w	800723c <_strtod_l+0x874>
 80070ae:	eba3 0308 	sub.w	r3, r3, r8
 80070b2:	2b1f      	cmp	r3, #31
 80070b4:	eba2 0203 	sub.w	r2, r2, r3
 80070b8:	f04f 0101 	mov.w	r1, #1
 80070bc:	f300 80b1 	bgt.w	8007222 <_strtod_l+0x85a>
 80070c0:	fa01 f303 	lsl.w	r3, r1, r3
 80070c4:	930d      	str	r3, [sp, #52]	; 0x34
 80070c6:	2300      	movs	r3, #0
 80070c8:	9308      	str	r3, [sp, #32]
 80070ca:	eb09 0802 	add.w	r8, r9, r2
 80070ce:	9b04      	ldr	r3, [sp, #16]
 80070d0:	45c1      	cmp	r9, r8
 80070d2:	4417      	add	r7, r2
 80070d4:	441f      	add	r7, r3
 80070d6:	464b      	mov	r3, r9
 80070d8:	bfa8      	it	ge
 80070da:	4643      	movge	r3, r8
 80070dc:	42bb      	cmp	r3, r7
 80070de:	bfa8      	it	ge
 80070e0:	463b      	movge	r3, r7
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	bfc2      	ittt	gt
 80070e6:	eba8 0803 	subgt.w	r8, r8, r3
 80070ea:	1aff      	subgt	r7, r7, r3
 80070ec:	eba9 0903 	subgt.w	r9, r9, r3
 80070f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	dd17      	ble.n	8007126 <_strtod_l+0x75e>
 80070f6:	4631      	mov	r1, r6
 80070f8:	461a      	mov	r2, r3
 80070fa:	4620      	mov	r0, r4
 80070fc:	f002 f804 	bl	8009108 <__pow5mult>
 8007100:	4606      	mov	r6, r0
 8007102:	2800      	cmp	r0, #0
 8007104:	f43f aea8 	beq.w	8006e58 <_strtod_l+0x490>
 8007108:	4601      	mov	r1, r0
 800710a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800710c:	4620      	mov	r0, r4
 800710e:	f001 ff51 	bl	8008fb4 <__multiply>
 8007112:	900b      	str	r0, [sp, #44]	; 0x2c
 8007114:	2800      	cmp	r0, #0
 8007116:	f43f ae9f 	beq.w	8006e58 <_strtod_l+0x490>
 800711a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800711c:	4620      	mov	r0, r4
 800711e:	f001 fe31 	bl	8008d84 <_Bfree>
 8007122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007124:	9318      	str	r3, [sp, #96]	; 0x60
 8007126:	f1b8 0f00 	cmp.w	r8, #0
 800712a:	f300 808c 	bgt.w	8007246 <_strtod_l+0x87e>
 800712e:	9b06      	ldr	r3, [sp, #24]
 8007130:	2b00      	cmp	r3, #0
 8007132:	dd08      	ble.n	8007146 <_strtod_l+0x77e>
 8007134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007136:	9905      	ldr	r1, [sp, #20]
 8007138:	4620      	mov	r0, r4
 800713a:	f001 ffe5 	bl	8009108 <__pow5mult>
 800713e:	9005      	str	r0, [sp, #20]
 8007140:	2800      	cmp	r0, #0
 8007142:	f43f ae89 	beq.w	8006e58 <_strtod_l+0x490>
 8007146:	2f00      	cmp	r7, #0
 8007148:	dd08      	ble.n	800715c <_strtod_l+0x794>
 800714a:	9905      	ldr	r1, [sp, #20]
 800714c:	463a      	mov	r2, r7
 800714e:	4620      	mov	r0, r4
 8007150:	f002 f834 	bl	80091bc <__lshift>
 8007154:	9005      	str	r0, [sp, #20]
 8007156:	2800      	cmp	r0, #0
 8007158:	f43f ae7e 	beq.w	8006e58 <_strtod_l+0x490>
 800715c:	f1b9 0f00 	cmp.w	r9, #0
 8007160:	dd08      	ble.n	8007174 <_strtod_l+0x7ac>
 8007162:	4631      	mov	r1, r6
 8007164:	464a      	mov	r2, r9
 8007166:	4620      	mov	r0, r4
 8007168:	f002 f828 	bl	80091bc <__lshift>
 800716c:	4606      	mov	r6, r0
 800716e:	2800      	cmp	r0, #0
 8007170:	f43f ae72 	beq.w	8006e58 <_strtod_l+0x490>
 8007174:	9a05      	ldr	r2, [sp, #20]
 8007176:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007178:	4620      	mov	r0, r4
 800717a:	f002 f8ab 	bl	80092d4 <__mdiff>
 800717e:	4605      	mov	r5, r0
 8007180:	2800      	cmp	r0, #0
 8007182:	f43f ae69 	beq.w	8006e58 <_strtod_l+0x490>
 8007186:	68c3      	ldr	r3, [r0, #12]
 8007188:	930b      	str	r3, [sp, #44]	; 0x2c
 800718a:	2300      	movs	r3, #0
 800718c:	60c3      	str	r3, [r0, #12]
 800718e:	4631      	mov	r1, r6
 8007190:	f002 f884 	bl	800929c <__mcmp>
 8007194:	2800      	cmp	r0, #0
 8007196:	da60      	bge.n	800725a <_strtod_l+0x892>
 8007198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800719a:	ea53 030a 	orrs.w	r3, r3, sl
 800719e:	f040 8082 	bne.w	80072a6 <_strtod_l+0x8de>
 80071a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d17d      	bne.n	80072a6 <_strtod_l+0x8de>
 80071aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80071ae:	0d1b      	lsrs	r3, r3, #20
 80071b0:	051b      	lsls	r3, r3, #20
 80071b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80071b6:	d976      	bls.n	80072a6 <_strtod_l+0x8de>
 80071b8:	696b      	ldr	r3, [r5, #20]
 80071ba:	b913      	cbnz	r3, 80071c2 <_strtod_l+0x7fa>
 80071bc:	692b      	ldr	r3, [r5, #16]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	dd71      	ble.n	80072a6 <_strtod_l+0x8de>
 80071c2:	4629      	mov	r1, r5
 80071c4:	2201      	movs	r2, #1
 80071c6:	4620      	mov	r0, r4
 80071c8:	f001 fff8 	bl	80091bc <__lshift>
 80071cc:	4631      	mov	r1, r6
 80071ce:	4605      	mov	r5, r0
 80071d0:	f002 f864 	bl	800929c <__mcmp>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	dd66      	ble.n	80072a6 <_strtod_l+0x8de>
 80071d8:	9904      	ldr	r1, [sp, #16]
 80071da:	4a53      	ldr	r2, [pc, #332]	; (8007328 <_strtod_l+0x960>)
 80071dc:	465b      	mov	r3, fp
 80071de:	2900      	cmp	r1, #0
 80071e0:	f000 8081 	beq.w	80072e6 <_strtod_l+0x91e>
 80071e4:	ea02 010b 	and.w	r1, r2, fp
 80071e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80071ec:	dc7b      	bgt.n	80072e6 <_strtod_l+0x91e>
 80071ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80071f2:	f77f aea9 	ble.w	8006f48 <_strtod_l+0x580>
 80071f6:	4b4d      	ldr	r3, [pc, #308]	; (800732c <_strtod_l+0x964>)
 80071f8:	4650      	mov	r0, sl
 80071fa:	4659      	mov	r1, fp
 80071fc:	2200      	movs	r2, #0
 80071fe:	f7f9 fa0b 	bl	8000618 <__aeabi_dmul>
 8007202:	460b      	mov	r3, r1
 8007204:	4303      	orrs	r3, r0
 8007206:	bf08      	it	eq
 8007208:	2322      	moveq	r3, #34	; 0x22
 800720a:	4682      	mov	sl, r0
 800720c:	468b      	mov	fp, r1
 800720e:	bf08      	it	eq
 8007210:	6023      	streq	r3, [r4, #0]
 8007212:	e62b      	b.n	8006e6c <_strtod_l+0x4a4>
 8007214:	f04f 32ff 	mov.w	r2, #4294967295
 8007218:	fa02 f303 	lsl.w	r3, r2, r3
 800721c:	ea03 0a0a 	and.w	sl, r3, sl
 8007220:	e6e3      	b.n	8006fea <_strtod_l+0x622>
 8007222:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007226:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800722a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800722e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007232:	fa01 f308 	lsl.w	r3, r1, r8
 8007236:	9308      	str	r3, [sp, #32]
 8007238:	910d      	str	r1, [sp, #52]	; 0x34
 800723a:	e746      	b.n	80070ca <_strtod_l+0x702>
 800723c:	2300      	movs	r3, #0
 800723e:	9308      	str	r3, [sp, #32]
 8007240:	2301      	movs	r3, #1
 8007242:	930d      	str	r3, [sp, #52]	; 0x34
 8007244:	e741      	b.n	80070ca <_strtod_l+0x702>
 8007246:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007248:	4642      	mov	r2, r8
 800724a:	4620      	mov	r0, r4
 800724c:	f001 ffb6 	bl	80091bc <__lshift>
 8007250:	9018      	str	r0, [sp, #96]	; 0x60
 8007252:	2800      	cmp	r0, #0
 8007254:	f47f af6b 	bne.w	800712e <_strtod_l+0x766>
 8007258:	e5fe      	b.n	8006e58 <_strtod_l+0x490>
 800725a:	465f      	mov	r7, fp
 800725c:	d16e      	bne.n	800733c <_strtod_l+0x974>
 800725e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007260:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007264:	b342      	cbz	r2, 80072b8 <_strtod_l+0x8f0>
 8007266:	4a32      	ldr	r2, [pc, #200]	; (8007330 <_strtod_l+0x968>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d128      	bne.n	80072be <_strtod_l+0x8f6>
 800726c:	9b04      	ldr	r3, [sp, #16]
 800726e:	4651      	mov	r1, sl
 8007270:	b1eb      	cbz	r3, 80072ae <_strtod_l+0x8e6>
 8007272:	4b2d      	ldr	r3, [pc, #180]	; (8007328 <_strtod_l+0x960>)
 8007274:	403b      	ands	r3, r7
 8007276:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800727a:	f04f 32ff 	mov.w	r2, #4294967295
 800727e:	d819      	bhi.n	80072b4 <_strtod_l+0x8ec>
 8007280:	0d1b      	lsrs	r3, r3, #20
 8007282:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007286:	fa02 f303 	lsl.w	r3, r2, r3
 800728a:	4299      	cmp	r1, r3
 800728c:	d117      	bne.n	80072be <_strtod_l+0x8f6>
 800728e:	4b29      	ldr	r3, [pc, #164]	; (8007334 <_strtod_l+0x96c>)
 8007290:	429f      	cmp	r7, r3
 8007292:	d102      	bne.n	800729a <_strtod_l+0x8d2>
 8007294:	3101      	adds	r1, #1
 8007296:	f43f addf 	beq.w	8006e58 <_strtod_l+0x490>
 800729a:	4b23      	ldr	r3, [pc, #140]	; (8007328 <_strtod_l+0x960>)
 800729c:	403b      	ands	r3, r7
 800729e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80072a2:	f04f 0a00 	mov.w	sl, #0
 80072a6:	9b04      	ldr	r3, [sp, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1a4      	bne.n	80071f6 <_strtod_l+0x82e>
 80072ac:	e5de      	b.n	8006e6c <_strtod_l+0x4a4>
 80072ae:	f04f 33ff 	mov.w	r3, #4294967295
 80072b2:	e7ea      	b.n	800728a <_strtod_l+0x8c2>
 80072b4:	4613      	mov	r3, r2
 80072b6:	e7e8      	b.n	800728a <_strtod_l+0x8c2>
 80072b8:	ea53 030a 	orrs.w	r3, r3, sl
 80072bc:	d08c      	beq.n	80071d8 <_strtod_l+0x810>
 80072be:	9b08      	ldr	r3, [sp, #32]
 80072c0:	b1db      	cbz	r3, 80072fa <_strtod_l+0x932>
 80072c2:	423b      	tst	r3, r7
 80072c4:	d0ef      	beq.n	80072a6 <_strtod_l+0x8de>
 80072c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072c8:	9a04      	ldr	r2, [sp, #16]
 80072ca:	4650      	mov	r0, sl
 80072cc:	4659      	mov	r1, fp
 80072ce:	b1c3      	cbz	r3, 8007302 <_strtod_l+0x93a>
 80072d0:	f7ff fb5e 	bl	8006990 <sulp>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	ec51 0b18 	vmov	r0, r1, d8
 80072dc:	f7f8 ffe6 	bl	80002ac <__adddf3>
 80072e0:	4682      	mov	sl, r0
 80072e2:	468b      	mov	fp, r1
 80072e4:	e7df      	b.n	80072a6 <_strtod_l+0x8de>
 80072e6:	4013      	ands	r3, r2
 80072e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80072ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80072f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80072f4:	f04f 3aff 	mov.w	sl, #4294967295
 80072f8:	e7d5      	b.n	80072a6 <_strtod_l+0x8de>
 80072fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072fc:	ea13 0f0a 	tst.w	r3, sl
 8007300:	e7e0      	b.n	80072c4 <_strtod_l+0x8fc>
 8007302:	f7ff fb45 	bl	8006990 <sulp>
 8007306:	4602      	mov	r2, r0
 8007308:	460b      	mov	r3, r1
 800730a:	ec51 0b18 	vmov	r0, r1, d8
 800730e:	f7f8 ffcb 	bl	80002a8 <__aeabi_dsub>
 8007312:	2200      	movs	r2, #0
 8007314:	2300      	movs	r3, #0
 8007316:	4682      	mov	sl, r0
 8007318:	468b      	mov	fp, r1
 800731a:	f7f9 fbe5 	bl	8000ae8 <__aeabi_dcmpeq>
 800731e:	2800      	cmp	r0, #0
 8007320:	d0c1      	beq.n	80072a6 <_strtod_l+0x8de>
 8007322:	e611      	b.n	8006f48 <_strtod_l+0x580>
 8007324:	fffffc02 	.word	0xfffffc02
 8007328:	7ff00000 	.word	0x7ff00000
 800732c:	39500000 	.word	0x39500000
 8007330:	000fffff 	.word	0x000fffff
 8007334:	7fefffff 	.word	0x7fefffff
 8007338:	0800a5d8 	.word	0x0800a5d8
 800733c:	4631      	mov	r1, r6
 800733e:	4628      	mov	r0, r5
 8007340:	f002 f92a 	bl	8009598 <__ratio>
 8007344:	ec59 8b10 	vmov	r8, r9, d0
 8007348:	ee10 0a10 	vmov	r0, s0
 800734c:	2200      	movs	r2, #0
 800734e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007352:	4649      	mov	r1, r9
 8007354:	f7f9 fbdc 	bl	8000b10 <__aeabi_dcmple>
 8007358:	2800      	cmp	r0, #0
 800735a:	d07a      	beq.n	8007452 <_strtod_l+0xa8a>
 800735c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800735e:	2b00      	cmp	r3, #0
 8007360:	d04a      	beq.n	80073f8 <_strtod_l+0xa30>
 8007362:	4b95      	ldr	r3, [pc, #596]	; (80075b8 <_strtod_l+0xbf0>)
 8007364:	2200      	movs	r2, #0
 8007366:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800736a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80075b8 <_strtod_l+0xbf0>
 800736e:	f04f 0800 	mov.w	r8, #0
 8007372:	4b92      	ldr	r3, [pc, #584]	; (80075bc <_strtod_l+0xbf4>)
 8007374:	403b      	ands	r3, r7
 8007376:	930d      	str	r3, [sp, #52]	; 0x34
 8007378:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800737a:	4b91      	ldr	r3, [pc, #580]	; (80075c0 <_strtod_l+0xbf8>)
 800737c:	429a      	cmp	r2, r3
 800737e:	f040 80b0 	bne.w	80074e2 <_strtod_l+0xb1a>
 8007382:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007386:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800738a:	ec4b ab10 	vmov	d0, sl, fp
 800738e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007392:	f002 f829 	bl	80093e8 <__ulp>
 8007396:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800739a:	ec53 2b10 	vmov	r2, r3, d0
 800739e:	f7f9 f93b 	bl	8000618 <__aeabi_dmul>
 80073a2:	4652      	mov	r2, sl
 80073a4:	465b      	mov	r3, fp
 80073a6:	f7f8 ff81 	bl	80002ac <__adddf3>
 80073aa:	460b      	mov	r3, r1
 80073ac:	4983      	ldr	r1, [pc, #524]	; (80075bc <_strtod_l+0xbf4>)
 80073ae:	4a85      	ldr	r2, [pc, #532]	; (80075c4 <_strtod_l+0xbfc>)
 80073b0:	4019      	ands	r1, r3
 80073b2:	4291      	cmp	r1, r2
 80073b4:	4682      	mov	sl, r0
 80073b6:	d960      	bls.n	800747a <_strtod_l+0xab2>
 80073b8:	ee18 3a90 	vmov	r3, s17
 80073bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d104      	bne.n	80073ce <_strtod_l+0xa06>
 80073c4:	ee18 3a10 	vmov	r3, s16
 80073c8:	3301      	adds	r3, #1
 80073ca:	f43f ad45 	beq.w	8006e58 <_strtod_l+0x490>
 80073ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 80075d0 <_strtod_l+0xc08>
 80073d2:	f04f 3aff 	mov.w	sl, #4294967295
 80073d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80073d8:	4620      	mov	r0, r4
 80073da:	f001 fcd3 	bl	8008d84 <_Bfree>
 80073de:	9905      	ldr	r1, [sp, #20]
 80073e0:	4620      	mov	r0, r4
 80073e2:	f001 fccf 	bl	8008d84 <_Bfree>
 80073e6:	4631      	mov	r1, r6
 80073e8:	4620      	mov	r0, r4
 80073ea:	f001 fccb 	bl	8008d84 <_Bfree>
 80073ee:	4629      	mov	r1, r5
 80073f0:	4620      	mov	r0, r4
 80073f2:	f001 fcc7 	bl	8008d84 <_Bfree>
 80073f6:	e61a      	b.n	800702e <_strtod_l+0x666>
 80073f8:	f1ba 0f00 	cmp.w	sl, #0
 80073fc:	d11b      	bne.n	8007436 <_strtod_l+0xa6e>
 80073fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007402:	b9f3      	cbnz	r3, 8007442 <_strtod_l+0xa7a>
 8007404:	4b6c      	ldr	r3, [pc, #432]	; (80075b8 <_strtod_l+0xbf0>)
 8007406:	2200      	movs	r2, #0
 8007408:	4640      	mov	r0, r8
 800740a:	4649      	mov	r1, r9
 800740c:	f7f9 fb76 	bl	8000afc <__aeabi_dcmplt>
 8007410:	b9d0      	cbnz	r0, 8007448 <_strtod_l+0xa80>
 8007412:	4640      	mov	r0, r8
 8007414:	4649      	mov	r1, r9
 8007416:	4b6c      	ldr	r3, [pc, #432]	; (80075c8 <_strtod_l+0xc00>)
 8007418:	2200      	movs	r2, #0
 800741a:	f7f9 f8fd 	bl	8000618 <__aeabi_dmul>
 800741e:	4680      	mov	r8, r0
 8007420:	4689      	mov	r9, r1
 8007422:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007426:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800742a:	9315      	str	r3, [sp, #84]	; 0x54
 800742c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007430:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007434:	e79d      	b.n	8007372 <_strtod_l+0x9aa>
 8007436:	f1ba 0f01 	cmp.w	sl, #1
 800743a:	d102      	bne.n	8007442 <_strtod_l+0xa7a>
 800743c:	2f00      	cmp	r7, #0
 800743e:	f43f ad83 	beq.w	8006f48 <_strtod_l+0x580>
 8007442:	4b62      	ldr	r3, [pc, #392]	; (80075cc <_strtod_l+0xc04>)
 8007444:	2200      	movs	r2, #0
 8007446:	e78e      	b.n	8007366 <_strtod_l+0x99e>
 8007448:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80075c8 <_strtod_l+0xc00>
 800744c:	f04f 0800 	mov.w	r8, #0
 8007450:	e7e7      	b.n	8007422 <_strtod_l+0xa5a>
 8007452:	4b5d      	ldr	r3, [pc, #372]	; (80075c8 <_strtod_l+0xc00>)
 8007454:	4640      	mov	r0, r8
 8007456:	4649      	mov	r1, r9
 8007458:	2200      	movs	r2, #0
 800745a:	f7f9 f8dd 	bl	8000618 <__aeabi_dmul>
 800745e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007460:	4680      	mov	r8, r0
 8007462:	4689      	mov	r9, r1
 8007464:	b933      	cbnz	r3, 8007474 <_strtod_l+0xaac>
 8007466:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800746a:	900e      	str	r0, [sp, #56]	; 0x38
 800746c:	930f      	str	r3, [sp, #60]	; 0x3c
 800746e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007472:	e7dd      	b.n	8007430 <_strtod_l+0xa68>
 8007474:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007478:	e7f9      	b.n	800746e <_strtod_l+0xaa6>
 800747a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800747e:	9b04      	ldr	r3, [sp, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1a8      	bne.n	80073d6 <_strtod_l+0xa0e>
 8007484:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007488:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800748a:	0d1b      	lsrs	r3, r3, #20
 800748c:	051b      	lsls	r3, r3, #20
 800748e:	429a      	cmp	r2, r3
 8007490:	d1a1      	bne.n	80073d6 <_strtod_l+0xa0e>
 8007492:	4640      	mov	r0, r8
 8007494:	4649      	mov	r1, r9
 8007496:	f7f9 fc1f 	bl	8000cd8 <__aeabi_d2lz>
 800749a:	f7f9 f88f 	bl	80005bc <__aeabi_l2d>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4640      	mov	r0, r8
 80074a4:	4649      	mov	r1, r9
 80074a6:	f7f8 feff 	bl	80002a8 <__aeabi_dsub>
 80074aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074b0:	ea43 030a 	orr.w	r3, r3, sl
 80074b4:	4313      	orrs	r3, r2
 80074b6:	4680      	mov	r8, r0
 80074b8:	4689      	mov	r9, r1
 80074ba:	d055      	beq.n	8007568 <_strtod_l+0xba0>
 80074bc:	a336      	add	r3, pc, #216	; (adr r3, 8007598 <_strtod_l+0xbd0>)
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	f7f9 fb1b 	bl	8000afc <__aeabi_dcmplt>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	f47f acd0 	bne.w	8006e6c <_strtod_l+0x4a4>
 80074cc:	a334      	add	r3, pc, #208	; (adr r3, 80075a0 <_strtod_l+0xbd8>)
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	4640      	mov	r0, r8
 80074d4:	4649      	mov	r1, r9
 80074d6:	f7f9 fb2f 	bl	8000b38 <__aeabi_dcmpgt>
 80074da:	2800      	cmp	r0, #0
 80074dc:	f43f af7b 	beq.w	80073d6 <_strtod_l+0xa0e>
 80074e0:	e4c4      	b.n	8006e6c <_strtod_l+0x4a4>
 80074e2:	9b04      	ldr	r3, [sp, #16]
 80074e4:	b333      	cbz	r3, 8007534 <_strtod_l+0xb6c>
 80074e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80074ec:	d822      	bhi.n	8007534 <_strtod_l+0xb6c>
 80074ee:	a32e      	add	r3, pc, #184	; (adr r3, 80075a8 <_strtod_l+0xbe0>)
 80074f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f4:	4640      	mov	r0, r8
 80074f6:	4649      	mov	r1, r9
 80074f8:	f7f9 fb0a 	bl	8000b10 <__aeabi_dcmple>
 80074fc:	b1a0      	cbz	r0, 8007528 <_strtod_l+0xb60>
 80074fe:	4649      	mov	r1, r9
 8007500:	4640      	mov	r0, r8
 8007502:	f7f9 fb61 	bl	8000bc8 <__aeabi_d2uiz>
 8007506:	2801      	cmp	r0, #1
 8007508:	bf38      	it	cc
 800750a:	2001      	movcc	r0, #1
 800750c:	f7f9 f80a 	bl	8000524 <__aeabi_ui2d>
 8007510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007512:	4680      	mov	r8, r0
 8007514:	4689      	mov	r9, r1
 8007516:	bb23      	cbnz	r3, 8007562 <_strtod_l+0xb9a>
 8007518:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800751c:	9010      	str	r0, [sp, #64]	; 0x40
 800751e:	9311      	str	r3, [sp, #68]	; 0x44
 8007520:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007524:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800752a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800752c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007530:	1a9b      	subs	r3, r3, r2
 8007532:	9309      	str	r3, [sp, #36]	; 0x24
 8007534:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007538:	eeb0 0a48 	vmov.f32	s0, s16
 800753c:	eef0 0a68 	vmov.f32	s1, s17
 8007540:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007544:	f001 ff50 	bl	80093e8 <__ulp>
 8007548:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800754c:	ec53 2b10 	vmov	r2, r3, d0
 8007550:	f7f9 f862 	bl	8000618 <__aeabi_dmul>
 8007554:	ec53 2b18 	vmov	r2, r3, d8
 8007558:	f7f8 fea8 	bl	80002ac <__adddf3>
 800755c:	4682      	mov	sl, r0
 800755e:	468b      	mov	fp, r1
 8007560:	e78d      	b.n	800747e <_strtod_l+0xab6>
 8007562:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007566:	e7db      	b.n	8007520 <_strtod_l+0xb58>
 8007568:	a311      	add	r3, pc, #68	; (adr r3, 80075b0 <_strtod_l+0xbe8>)
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	f7f9 fac5 	bl	8000afc <__aeabi_dcmplt>
 8007572:	e7b2      	b.n	80074da <_strtod_l+0xb12>
 8007574:	2300      	movs	r3, #0
 8007576:	930a      	str	r3, [sp, #40]	; 0x28
 8007578:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800757a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800757c:	6013      	str	r3, [r2, #0]
 800757e:	f7ff ba6b 	b.w	8006a58 <_strtod_l+0x90>
 8007582:	2a65      	cmp	r2, #101	; 0x65
 8007584:	f43f ab5f 	beq.w	8006c46 <_strtod_l+0x27e>
 8007588:	2a45      	cmp	r2, #69	; 0x45
 800758a:	f43f ab5c 	beq.w	8006c46 <_strtod_l+0x27e>
 800758e:	2301      	movs	r3, #1
 8007590:	f7ff bb94 	b.w	8006cbc <_strtod_l+0x2f4>
 8007594:	f3af 8000 	nop.w
 8007598:	94a03595 	.word	0x94a03595
 800759c:	3fdfffff 	.word	0x3fdfffff
 80075a0:	35afe535 	.word	0x35afe535
 80075a4:	3fe00000 	.word	0x3fe00000
 80075a8:	ffc00000 	.word	0xffc00000
 80075ac:	41dfffff 	.word	0x41dfffff
 80075b0:	94a03595 	.word	0x94a03595
 80075b4:	3fcfffff 	.word	0x3fcfffff
 80075b8:	3ff00000 	.word	0x3ff00000
 80075bc:	7ff00000 	.word	0x7ff00000
 80075c0:	7fe00000 	.word	0x7fe00000
 80075c4:	7c9fffff 	.word	0x7c9fffff
 80075c8:	3fe00000 	.word	0x3fe00000
 80075cc:	bff00000 	.word	0xbff00000
 80075d0:	7fefffff 	.word	0x7fefffff

080075d4 <_strtod_r>:
 80075d4:	4b01      	ldr	r3, [pc, #4]	; (80075dc <_strtod_r+0x8>)
 80075d6:	f7ff b9f7 	b.w	80069c8 <_strtod_l>
 80075da:	bf00      	nop
 80075dc:	20000074 	.word	0x20000074

080075e0 <_strtol_l.constprop.0>:
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e6:	d001      	beq.n	80075ec <_strtol_l.constprop.0+0xc>
 80075e8:	2b24      	cmp	r3, #36	; 0x24
 80075ea:	d906      	bls.n	80075fa <_strtol_l.constprop.0+0x1a>
 80075ec:	f7fe fae6 	bl	8005bbc <__errno>
 80075f0:	2316      	movs	r3, #22
 80075f2:	6003      	str	r3, [r0, #0]
 80075f4:	2000      	movs	r0, #0
 80075f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80076e0 <_strtol_l.constprop.0+0x100>
 80075fe:	460d      	mov	r5, r1
 8007600:	462e      	mov	r6, r5
 8007602:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007606:	f814 700c 	ldrb.w	r7, [r4, ip]
 800760a:	f017 0708 	ands.w	r7, r7, #8
 800760e:	d1f7      	bne.n	8007600 <_strtol_l.constprop.0+0x20>
 8007610:	2c2d      	cmp	r4, #45	; 0x2d
 8007612:	d132      	bne.n	800767a <_strtol_l.constprop.0+0x9a>
 8007614:	782c      	ldrb	r4, [r5, #0]
 8007616:	2701      	movs	r7, #1
 8007618:	1cb5      	adds	r5, r6, #2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d05b      	beq.n	80076d6 <_strtol_l.constprop.0+0xf6>
 800761e:	2b10      	cmp	r3, #16
 8007620:	d109      	bne.n	8007636 <_strtol_l.constprop.0+0x56>
 8007622:	2c30      	cmp	r4, #48	; 0x30
 8007624:	d107      	bne.n	8007636 <_strtol_l.constprop.0+0x56>
 8007626:	782c      	ldrb	r4, [r5, #0]
 8007628:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800762c:	2c58      	cmp	r4, #88	; 0x58
 800762e:	d14d      	bne.n	80076cc <_strtol_l.constprop.0+0xec>
 8007630:	786c      	ldrb	r4, [r5, #1]
 8007632:	2310      	movs	r3, #16
 8007634:	3502      	adds	r5, #2
 8007636:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800763a:	f108 38ff 	add.w	r8, r8, #4294967295
 800763e:	f04f 0c00 	mov.w	ip, #0
 8007642:	fbb8 f9f3 	udiv	r9, r8, r3
 8007646:	4666      	mov	r6, ip
 8007648:	fb03 8a19 	mls	sl, r3, r9, r8
 800764c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007650:	f1be 0f09 	cmp.w	lr, #9
 8007654:	d816      	bhi.n	8007684 <_strtol_l.constprop.0+0xa4>
 8007656:	4674      	mov	r4, lr
 8007658:	42a3      	cmp	r3, r4
 800765a:	dd24      	ble.n	80076a6 <_strtol_l.constprop.0+0xc6>
 800765c:	f1bc 0f00 	cmp.w	ip, #0
 8007660:	db1e      	blt.n	80076a0 <_strtol_l.constprop.0+0xc0>
 8007662:	45b1      	cmp	r9, r6
 8007664:	d31c      	bcc.n	80076a0 <_strtol_l.constprop.0+0xc0>
 8007666:	d101      	bne.n	800766c <_strtol_l.constprop.0+0x8c>
 8007668:	45a2      	cmp	sl, r4
 800766a:	db19      	blt.n	80076a0 <_strtol_l.constprop.0+0xc0>
 800766c:	fb06 4603 	mla	r6, r6, r3, r4
 8007670:	f04f 0c01 	mov.w	ip, #1
 8007674:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007678:	e7e8      	b.n	800764c <_strtol_l.constprop.0+0x6c>
 800767a:	2c2b      	cmp	r4, #43	; 0x2b
 800767c:	bf04      	itt	eq
 800767e:	782c      	ldrbeq	r4, [r5, #0]
 8007680:	1cb5      	addeq	r5, r6, #2
 8007682:	e7ca      	b.n	800761a <_strtol_l.constprop.0+0x3a>
 8007684:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007688:	f1be 0f19 	cmp.w	lr, #25
 800768c:	d801      	bhi.n	8007692 <_strtol_l.constprop.0+0xb2>
 800768e:	3c37      	subs	r4, #55	; 0x37
 8007690:	e7e2      	b.n	8007658 <_strtol_l.constprop.0+0x78>
 8007692:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007696:	f1be 0f19 	cmp.w	lr, #25
 800769a:	d804      	bhi.n	80076a6 <_strtol_l.constprop.0+0xc6>
 800769c:	3c57      	subs	r4, #87	; 0x57
 800769e:	e7db      	b.n	8007658 <_strtol_l.constprop.0+0x78>
 80076a0:	f04f 3cff 	mov.w	ip, #4294967295
 80076a4:	e7e6      	b.n	8007674 <_strtol_l.constprop.0+0x94>
 80076a6:	f1bc 0f00 	cmp.w	ip, #0
 80076aa:	da05      	bge.n	80076b8 <_strtol_l.constprop.0+0xd8>
 80076ac:	2322      	movs	r3, #34	; 0x22
 80076ae:	6003      	str	r3, [r0, #0]
 80076b0:	4646      	mov	r6, r8
 80076b2:	b942      	cbnz	r2, 80076c6 <_strtol_l.constprop.0+0xe6>
 80076b4:	4630      	mov	r0, r6
 80076b6:	e79e      	b.n	80075f6 <_strtol_l.constprop.0+0x16>
 80076b8:	b107      	cbz	r7, 80076bc <_strtol_l.constprop.0+0xdc>
 80076ba:	4276      	negs	r6, r6
 80076bc:	2a00      	cmp	r2, #0
 80076be:	d0f9      	beq.n	80076b4 <_strtol_l.constprop.0+0xd4>
 80076c0:	f1bc 0f00 	cmp.w	ip, #0
 80076c4:	d000      	beq.n	80076c8 <_strtol_l.constprop.0+0xe8>
 80076c6:	1e69      	subs	r1, r5, #1
 80076c8:	6011      	str	r1, [r2, #0]
 80076ca:	e7f3      	b.n	80076b4 <_strtol_l.constprop.0+0xd4>
 80076cc:	2430      	movs	r4, #48	; 0x30
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1b1      	bne.n	8007636 <_strtol_l.constprop.0+0x56>
 80076d2:	2308      	movs	r3, #8
 80076d4:	e7af      	b.n	8007636 <_strtol_l.constprop.0+0x56>
 80076d6:	2c30      	cmp	r4, #48	; 0x30
 80076d8:	d0a5      	beq.n	8007626 <_strtol_l.constprop.0+0x46>
 80076da:	230a      	movs	r3, #10
 80076dc:	e7ab      	b.n	8007636 <_strtol_l.constprop.0+0x56>
 80076de:	bf00      	nop
 80076e0:	0800a601 	.word	0x0800a601

080076e4 <_strtol_r>:
 80076e4:	f7ff bf7c 	b.w	80075e0 <_strtol_l.constprop.0>

080076e8 <quorem>:
 80076e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	6903      	ldr	r3, [r0, #16]
 80076ee:	690c      	ldr	r4, [r1, #16]
 80076f0:	42a3      	cmp	r3, r4
 80076f2:	4607      	mov	r7, r0
 80076f4:	f2c0 8081 	blt.w	80077fa <quorem+0x112>
 80076f8:	3c01      	subs	r4, #1
 80076fa:	f101 0814 	add.w	r8, r1, #20
 80076fe:	f100 0514 	add.w	r5, r0, #20
 8007702:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007706:	9301      	str	r3, [sp, #4]
 8007708:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800770c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007710:	3301      	adds	r3, #1
 8007712:	429a      	cmp	r2, r3
 8007714:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007718:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800771c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007720:	d331      	bcc.n	8007786 <quorem+0x9e>
 8007722:	f04f 0e00 	mov.w	lr, #0
 8007726:	4640      	mov	r0, r8
 8007728:	46ac      	mov	ip, r5
 800772a:	46f2      	mov	sl, lr
 800772c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007730:	b293      	uxth	r3, r2
 8007732:	fb06 e303 	mla	r3, r6, r3, lr
 8007736:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800773a:	b29b      	uxth	r3, r3
 800773c:	ebaa 0303 	sub.w	r3, sl, r3
 8007740:	f8dc a000 	ldr.w	sl, [ip]
 8007744:	0c12      	lsrs	r2, r2, #16
 8007746:	fa13 f38a 	uxtah	r3, r3, sl
 800774a:	fb06 e202 	mla	r2, r6, r2, lr
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	9b00      	ldr	r3, [sp, #0]
 8007752:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007756:	b292      	uxth	r2, r2
 8007758:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800775c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007760:	f8bd 3000 	ldrh.w	r3, [sp]
 8007764:	4581      	cmp	r9, r0
 8007766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800776a:	f84c 3b04 	str.w	r3, [ip], #4
 800776e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007772:	d2db      	bcs.n	800772c <quorem+0x44>
 8007774:	f855 300b 	ldr.w	r3, [r5, fp]
 8007778:	b92b      	cbnz	r3, 8007786 <quorem+0x9e>
 800777a:	9b01      	ldr	r3, [sp, #4]
 800777c:	3b04      	subs	r3, #4
 800777e:	429d      	cmp	r5, r3
 8007780:	461a      	mov	r2, r3
 8007782:	d32e      	bcc.n	80077e2 <quorem+0xfa>
 8007784:	613c      	str	r4, [r7, #16]
 8007786:	4638      	mov	r0, r7
 8007788:	f001 fd88 	bl	800929c <__mcmp>
 800778c:	2800      	cmp	r0, #0
 800778e:	db24      	blt.n	80077da <quorem+0xf2>
 8007790:	3601      	adds	r6, #1
 8007792:	4628      	mov	r0, r5
 8007794:	f04f 0c00 	mov.w	ip, #0
 8007798:	f858 2b04 	ldr.w	r2, [r8], #4
 800779c:	f8d0 e000 	ldr.w	lr, [r0]
 80077a0:	b293      	uxth	r3, r2
 80077a2:	ebac 0303 	sub.w	r3, ip, r3
 80077a6:	0c12      	lsrs	r2, r2, #16
 80077a8:	fa13 f38e 	uxtah	r3, r3, lr
 80077ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077ba:	45c1      	cmp	r9, r8
 80077bc:	f840 3b04 	str.w	r3, [r0], #4
 80077c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077c4:	d2e8      	bcs.n	8007798 <quorem+0xb0>
 80077c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077ce:	b922      	cbnz	r2, 80077da <quorem+0xf2>
 80077d0:	3b04      	subs	r3, #4
 80077d2:	429d      	cmp	r5, r3
 80077d4:	461a      	mov	r2, r3
 80077d6:	d30a      	bcc.n	80077ee <quorem+0x106>
 80077d8:	613c      	str	r4, [r7, #16]
 80077da:	4630      	mov	r0, r6
 80077dc:	b003      	add	sp, #12
 80077de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077e2:	6812      	ldr	r2, [r2, #0]
 80077e4:	3b04      	subs	r3, #4
 80077e6:	2a00      	cmp	r2, #0
 80077e8:	d1cc      	bne.n	8007784 <quorem+0x9c>
 80077ea:	3c01      	subs	r4, #1
 80077ec:	e7c7      	b.n	800777e <quorem+0x96>
 80077ee:	6812      	ldr	r2, [r2, #0]
 80077f0:	3b04      	subs	r3, #4
 80077f2:	2a00      	cmp	r2, #0
 80077f4:	d1f0      	bne.n	80077d8 <quorem+0xf0>
 80077f6:	3c01      	subs	r4, #1
 80077f8:	e7eb      	b.n	80077d2 <quorem+0xea>
 80077fa:	2000      	movs	r0, #0
 80077fc:	e7ee      	b.n	80077dc <quorem+0xf4>
	...

08007800 <_dtoa_r>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	ed2d 8b04 	vpush	{d8-d9}
 8007808:	ec57 6b10 	vmov	r6, r7, d0
 800780c:	b093      	sub	sp, #76	; 0x4c
 800780e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007810:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007814:	9106      	str	r1, [sp, #24]
 8007816:	ee10 aa10 	vmov	sl, s0
 800781a:	4604      	mov	r4, r0
 800781c:	9209      	str	r2, [sp, #36]	; 0x24
 800781e:	930c      	str	r3, [sp, #48]	; 0x30
 8007820:	46bb      	mov	fp, r7
 8007822:	b975      	cbnz	r5, 8007842 <_dtoa_r+0x42>
 8007824:	2010      	movs	r0, #16
 8007826:	f001 fa45 	bl	8008cb4 <malloc>
 800782a:	4602      	mov	r2, r0
 800782c:	6260      	str	r0, [r4, #36]	; 0x24
 800782e:	b920      	cbnz	r0, 800783a <_dtoa_r+0x3a>
 8007830:	4ba7      	ldr	r3, [pc, #668]	; (8007ad0 <_dtoa_r+0x2d0>)
 8007832:	21ea      	movs	r1, #234	; 0xea
 8007834:	48a7      	ldr	r0, [pc, #668]	; (8007ad4 <_dtoa_r+0x2d4>)
 8007836:	f002 fc23 	bl	800a080 <__assert_func>
 800783a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800783e:	6005      	str	r5, [r0, #0]
 8007840:	60c5      	str	r5, [r0, #12]
 8007842:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007844:	6819      	ldr	r1, [r3, #0]
 8007846:	b151      	cbz	r1, 800785e <_dtoa_r+0x5e>
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	604a      	str	r2, [r1, #4]
 800784c:	2301      	movs	r3, #1
 800784e:	4093      	lsls	r3, r2
 8007850:	608b      	str	r3, [r1, #8]
 8007852:	4620      	mov	r0, r4
 8007854:	f001 fa96 	bl	8008d84 <_Bfree>
 8007858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800785a:	2200      	movs	r2, #0
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	1e3b      	subs	r3, r7, #0
 8007860:	bfaa      	itet	ge
 8007862:	2300      	movge	r3, #0
 8007864:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007868:	f8c8 3000 	strge.w	r3, [r8]
 800786c:	4b9a      	ldr	r3, [pc, #616]	; (8007ad8 <_dtoa_r+0x2d8>)
 800786e:	bfbc      	itt	lt
 8007870:	2201      	movlt	r2, #1
 8007872:	f8c8 2000 	strlt.w	r2, [r8]
 8007876:	ea33 030b 	bics.w	r3, r3, fp
 800787a:	d11b      	bne.n	80078b4 <_dtoa_r+0xb4>
 800787c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800787e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007888:	4333      	orrs	r3, r6
 800788a:	f000 8592 	beq.w	80083b2 <_dtoa_r+0xbb2>
 800788e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007890:	b963      	cbnz	r3, 80078ac <_dtoa_r+0xac>
 8007892:	4b92      	ldr	r3, [pc, #584]	; (8007adc <_dtoa_r+0x2dc>)
 8007894:	e022      	b.n	80078dc <_dtoa_r+0xdc>
 8007896:	4b92      	ldr	r3, [pc, #584]	; (8007ae0 <_dtoa_r+0x2e0>)
 8007898:	9301      	str	r3, [sp, #4]
 800789a:	3308      	adds	r3, #8
 800789c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	9801      	ldr	r0, [sp, #4]
 80078a2:	b013      	add	sp, #76	; 0x4c
 80078a4:	ecbd 8b04 	vpop	{d8-d9}
 80078a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ac:	4b8b      	ldr	r3, [pc, #556]	; (8007adc <_dtoa_r+0x2dc>)
 80078ae:	9301      	str	r3, [sp, #4]
 80078b0:	3303      	adds	r3, #3
 80078b2:	e7f3      	b.n	800789c <_dtoa_r+0x9c>
 80078b4:	2200      	movs	r2, #0
 80078b6:	2300      	movs	r3, #0
 80078b8:	4650      	mov	r0, sl
 80078ba:	4659      	mov	r1, fp
 80078bc:	f7f9 f914 	bl	8000ae8 <__aeabi_dcmpeq>
 80078c0:	ec4b ab19 	vmov	d9, sl, fp
 80078c4:	4680      	mov	r8, r0
 80078c6:	b158      	cbz	r0, 80078e0 <_dtoa_r+0xe0>
 80078c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80078ca:	2301      	movs	r3, #1
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 856b 	beq.w	80083ac <_dtoa_r+0xbac>
 80078d6:	4883      	ldr	r0, [pc, #524]	; (8007ae4 <_dtoa_r+0x2e4>)
 80078d8:	6018      	str	r0, [r3, #0]
 80078da:	1e43      	subs	r3, r0, #1
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	e7df      	b.n	80078a0 <_dtoa_r+0xa0>
 80078e0:	ec4b ab10 	vmov	d0, sl, fp
 80078e4:	aa10      	add	r2, sp, #64	; 0x40
 80078e6:	a911      	add	r1, sp, #68	; 0x44
 80078e8:	4620      	mov	r0, r4
 80078ea:	f001 fdf9 	bl	80094e0 <__d2b>
 80078ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80078f2:	ee08 0a10 	vmov	s16, r0
 80078f6:	2d00      	cmp	r5, #0
 80078f8:	f000 8084 	beq.w	8007a04 <_dtoa_r+0x204>
 80078fc:	ee19 3a90 	vmov	r3, s19
 8007900:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007904:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007908:	4656      	mov	r6, sl
 800790a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800790e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007912:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007916:	4b74      	ldr	r3, [pc, #464]	; (8007ae8 <_dtoa_r+0x2e8>)
 8007918:	2200      	movs	r2, #0
 800791a:	4630      	mov	r0, r6
 800791c:	4639      	mov	r1, r7
 800791e:	f7f8 fcc3 	bl	80002a8 <__aeabi_dsub>
 8007922:	a365      	add	r3, pc, #404	; (adr r3, 8007ab8 <_dtoa_r+0x2b8>)
 8007924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007928:	f7f8 fe76 	bl	8000618 <__aeabi_dmul>
 800792c:	a364      	add	r3, pc, #400	; (adr r3, 8007ac0 <_dtoa_r+0x2c0>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	f7f8 fcbb 	bl	80002ac <__adddf3>
 8007936:	4606      	mov	r6, r0
 8007938:	4628      	mov	r0, r5
 800793a:	460f      	mov	r7, r1
 800793c:	f7f8 fe02 	bl	8000544 <__aeabi_i2d>
 8007940:	a361      	add	r3, pc, #388	; (adr r3, 8007ac8 <_dtoa_r+0x2c8>)
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	f7f8 fe67 	bl	8000618 <__aeabi_dmul>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	4630      	mov	r0, r6
 8007950:	4639      	mov	r1, r7
 8007952:	f7f8 fcab 	bl	80002ac <__adddf3>
 8007956:	4606      	mov	r6, r0
 8007958:	460f      	mov	r7, r1
 800795a:	f7f9 f90d 	bl	8000b78 <__aeabi_d2iz>
 800795e:	2200      	movs	r2, #0
 8007960:	9000      	str	r0, [sp, #0]
 8007962:	2300      	movs	r3, #0
 8007964:	4630      	mov	r0, r6
 8007966:	4639      	mov	r1, r7
 8007968:	f7f9 f8c8 	bl	8000afc <__aeabi_dcmplt>
 800796c:	b150      	cbz	r0, 8007984 <_dtoa_r+0x184>
 800796e:	9800      	ldr	r0, [sp, #0]
 8007970:	f7f8 fde8 	bl	8000544 <__aeabi_i2d>
 8007974:	4632      	mov	r2, r6
 8007976:	463b      	mov	r3, r7
 8007978:	f7f9 f8b6 	bl	8000ae8 <__aeabi_dcmpeq>
 800797c:	b910      	cbnz	r0, 8007984 <_dtoa_r+0x184>
 800797e:	9b00      	ldr	r3, [sp, #0]
 8007980:	3b01      	subs	r3, #1
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	9b00      	ldr	r3, [sp, #0]
 8007986:	2b16      	cmp	r3, #22
 8007988:	d85a      	bhi.n	8007a40 <_dtoa_r+0x240>
 800798a:	9a00      	ldr	r2, [sp, #0]
 800798c:	4b57      	ldr	r3, [pc, #348]	; (8007aec <_dtoa_r+0x2ec>)
 800798e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	ec51 0b19 	vmov	r0, r1, d9
 800799a:	f7f9 f8af 	bl	8000afc <__aeabi_dcmplt>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d050      	beq.n	8007a44 <_dtoa_r+0x244>
 80079a2:	9b00      	ldr	r3, [sp, #0]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	2300      	movs	r3, #0
 80079aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80079ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079ae:	1b5d      	subs	r5, r3, r5
 80079b0:	1e6b      	subs	r3, r5, #1
 80079b2:	9305      	str	r3, [sp, #20]
 80079b4:	bf45      	ittet	mi
 80079b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80079ba:	9304      	strmi	r3, [sp, #16]
 80079bc:	2300      	movpl	r3, #0
 80079be:	2300      	movmi	r3, #0
 80079c0:	bf4c      	ite	mi
 80079c2:	9305      	strmi	r3, [sp, #20]
 80079c4:	9304      	strpl	r3, [sp, #16]
 80079c6:	9b00      	ldr	r3, [sp, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	db3d      	blt.n	8007a48 <_dtoa_r+0x248>
 80079cc:	9b05      	ldr	r3, [sp, #20]
 80079ce:	9a00      	ldr	r2, [sp, #0]
 80079d0:	920a      	str	r2, [sp, #40]	; 0x28
 80079d2:	4413      	add	r3, r2
 80079d4:	9305      	str	r3, [sp, #20]
 80079d6:	2300      	movs	r3, #0
 80079d8:	9307      	str	r3, [sp, #28]
 80079da:	9b06      	ldr	r3, [sp, #24]
 80079dc:	2b09      	cmp	r3, #9
 80079de:	f200 8089 	bhi.w	8007af4 <_dtoa_r+0x2f4>
 80079e2:	2b05      	cmp	r3, #5
 80079e4:	bfc4      	itt	gt
 80079e6:	3b04      	subgt	r3, #4
 80079e8:	9306      	strgt	r3, [sp, #24]
 80079ea:	9b06      	ldr	r3, [sp, #24]
 80079ec:	f1a3 0302 	sub.w	r3, r3, #2
 80079f0:	bfcc      	ite	gt
 80079f2:	2500      	movgt	r5, #0
 80079f4:	2501      	movle	r5, #1
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	f200 8087 	bhi.w	8007b0a <_dtoa_r+0x30a>
 80079fc:	e8df f003 	tbb	[pc, r3]
 8007a00:	59383a2d 	.word	0x59383a2d
 8007a04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007a08:	441d      	add	r5, r3
 8007a0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a0e:	2b20      	cmp	r3, #32
 8007a10:	bfc1      	itttt	gt
 8007a12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a1a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007a1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a22:	bfda      	itte	le
 8007a24:	f1c3 0320 	rsble	r3, r3, #32
 8007a28:	fa06 f003 	lslle.w	r0, r6, r3
 8007a2c:	4318      	orrgt	r0, r3
 8007a2e:	f7f8 fd79 	bl	8000524 <__aeabi_ui2d>
 8007a32:	2301      	movs	r3, #1
 8007a34:	4606      	mov	r6, r0
 8007a36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a3a:	3d01      	subs	r5, #1
 8007a3c:	930e      	str	r3, [sp, #56]	; 0x38
 8007a3e:	e76a      	b.n	8007916 <_dtoa_r+0x116>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e7b2      	b.n	80079aa <_dtoa_r+0x1aa>
 8007a44:	900b      	str	r0, [sp, #44]	; 0x2c
 8007a46:	e7b1      	b.n	80079ac <_dtoa_r+0x1ac>
 8007a48:	9b04      	ldr	r3, [sp, #16]
 8007a4a:	9a00      	ldr	r2, [sp, #0]
 8007a4c:	1a9b      	subs	r3, r3, r2
 8007a4e:	9304      	str	r3, [sp, #16]
 8007a50:	4253      	negs	r3, r2
 8007a52:	9307      	str	r3, [sp, #28]
 8007a54:	2300      	movs	r3, #0
 8007a56:	930a      	str	r3, [sp, #40]	; 0x28
 8007a58:	e7bf      	b.n	80079da <_dtoa_r+0x1da>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	9308      	str	r3, [sp, #32]
 8007a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	dc55      	bgt.n	8007b10 <_dtoa_r+0x310>
 8007a64:	2301      	movs	r3, #1
 8007a66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a6e:	e00c      	b.n	8007a8a <_dtoa_r+0x28a>
 8007a70:	2301      	movs	r3, #1
 8007a72:	e7f3      	b.n	8007a5c <_dtoa_r+0x25c>
 8007a74:	2300      	movs	r3, #0
 8007a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a78:	9308      	str	r3, [sp, #32]
 8007a7a:	9b00      	ldr	r3, [sp, #0]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	9302      	str	r3, [sp, #8]
 8007a80:	3301      	adds	r3, #1
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	9303      	str	r3, [sp, #12]
 8007a86:	bfb8      	it	lt
 8007a88:	2301      	movlt	r3, #1
 8007a8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	6042      	str	r2, [r0, #4]
 8007a90:	2204      	movs	r2, #4
 8007a92:	f102 0614 	add.w	r6, r2, #20
 8007a96:	429e      	cmp	r6, r3
 8007a98:	6841      	ldr	r1, [r0, #4]
 8007a9a:	d93d      	bls.n	8007b18 <_dtoa_r+0x318>
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	f001 f931 	bl	8008d04 <_Balloc>
 8007aa2:	9001      	str	r0, [sp, #4]
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d13b      	bne.n	8007b20 <_dtoa_r+0x320>
 8007aa8:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <_dtoa_r+0x2f0>)
 8007aaa:	4602      	mov	r2, r0
 8007aac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ab0:	e6c0      	b.n	8007834 <_dtoa_r+0x34>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e7df      	b.n	8007a76 <_dtoa_r+0x276>
 8007ab6:	bf00      	nop
 8007ab8:	636f4361 	.word	0x636f4361
 8007abc:	3fd287a7 	.word	0x3fd287a7
 8007ac0:	8b60c8b3 	.word	0x8b60c8b3
 8007ac4:	3fc68a28 	.word	0x3fc68a28
 8007ac8:	509f79fb 	.word	0x509f79fb
 8007acc:	3fd34413 	.word	0x3fd34413
 8007ad0:	0800a70e 	.word	0x0800a70e
 8007ad4:	0800a725 	.word	0x0800a725
 8007ad8:	7ff00000 	.word	0x7ff00000
 8007adc:	0800a70a 	.word	0x0800a70a
 8007ae0:	0800a701 	.word	0x0800a701
 8007ae4:	0800a585 	.word	0x0800a585
 8007ae8:	3ff80000 	.word	0x3ff80000
 8007aec:	0800a8f8 	.word	0x0800a8f8
 8007af0:	0800a780 	.word	0x0800a780
 8007af4:	2501      	movs	r5, #1
 8007af6:	2300      	movs	r3, #0
 8007af8:	9306      	str	r3, [sp, #24]
 8007afa:	9508      	str	r5, [sp, #32]
 8007afc:	f04f 33ff 	mov.w	r3, #4294967295
 8007b00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b04:	2200      	movs	r2, #0
 8007b06:	2312      	movs	r3, #18
 8007b08:	e7b0      	b.n	8007a6c <_dtoa_r+0x26c>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	9308      	str	r3, [sp, #32]
 8007b0e:	e7f5      	b.n	8007afc <_dtoa_r+0x2fc>
 8007b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b16:	e7b8      	b.n	8007a8a <_dtoa_r+0x28a>
 8007b18:	3101      	adds	r1, #1
 8007b1a:	6041      	str	r1, [r0, #4]
 8007b1c:	0052      	lsls	r2, r2, #1
 8007b1e:	e7b8      	b.n	8007a92 <_dtoa_r+0x292>
 8007b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b22:	9a01      	ldr	r2, [sp, #4]
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	9b03      	ldr	r3, [sp, #12]
 8007b28:	2b0e      	cmp	r3, #14
 8007b2a:	f200 809d 	bhi.w	8007c68 <_dtoa_r+0x468>
 8007b2e:	2d00      	cmp	r5, #0
 8007b30:	f000 809a 	beq.w	8007c68 <_dtoa_r+0x468>
 8007b34:	9b00      	ldr	r3, [sp, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	dd32      	ble.n	8007ba0 <_dtoa_r+0x3a0>
 8007b3a:	4ab7      	ldr	r2, [pc, #732]	; (8007e18 <_dtoa_r+0x618>)
 8007b3c:	f003 030f 	and.w	r3, r3, #15
 8007b40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b48:	9b00      	ldr	r3, [sp, #0]
 8007b4a:	05d8      	lsls	r0, r3, #23
 8007b4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007b50:	d516      	bpl.n	8007b80 <_dtoa_r+0x380>
 8007b52:	4bb2      	ldr	r3, [pc, #712]	; (8007e1c <_dtoa_r+0x61c>)
 8007b54:	ec51 0b19 	vmov	r0, r1, d9
 8007b58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b5c:	f7f8 fe86 	bl	800086c <__aeabi_ddiv>
 8007b60:	f007 070f 	and.w	r7, r7, #15
 8007b64:	4682      	mov	sl, r0
 8007b66:	468b      	mov	fp, r1
 8007b68:	2503      	movs	r5, #3
 8007b6a:	4eac      	ldr	r6, [pc, #688]	; (8007e1c <_dtoa_r+0x61c>)
 8007b6c:	b957      	cbnz	r7, 8007b84 <_dtoa_r+0x384>
 8007b6e:	4642      	mov	r2, r8
 8007b70:	464b      	mov	r3, r9
 8007b72:	4650      	mov	r0, sl
 8007b74:	4659      	mov	r1, fp
 8007b76:	f7f8 fe79 	bl	800086c <__aeabi_ddiv>
 8007b7a:	4682      	mov	sl, r0
 8007b7c:	468b      	mov	fp, r1
 8007b7e:	e028      	b.n	8007bd2 <_dtoa_r+0x3d2>
 8007b80:	2502      	movs	r5, #2
 8007b82:	e7f2      	b.n	8007b6a <_dtoa_r+0x36a>
 8007b84:	07f9      	lsls	r1, r7, #31
 8007b86:	d508      	bpl.n	8007b9a <_dtoa_r+0x39a>
 8007b88:	4640      	mov	r0, r8
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b90:	f7f8 fd42 	bl	8000618 <__aeabi_dmul>
 8007b94:	3501      	adds	r5, #1
 8007b96:	4680      	mov	r8, r0
 8007b98:	4689      	mov	r9, r1
 8007b9a:	107f      	asrs	r7, r7, #1
 8007b9c:	3608      	adds	r6, #8
 8007b9e:	e7e5      	b.n	8007b6c <_dtoa_r+0x36c>
 8007ba0:	f000 809b 	beq.w	8007cda <_dtoa_r+0x4da>
 8007ba4:	9b00      	ldr	r3, [sp, #0]
 8007ba6:	4f9d      	ldr	r7, [pc, #628]	; (8007e1c <_dtoa_r+0x61c>)
 8007ba8:	425e      	negs	r6, r3
 8007baa:	4b9b      	ldr	r3, [pc, #620]	; (8007e18 <_dtoa_r+0x618>)
 8007bac:	f006 020f 	and.w	r2, r6, #15
 8007bb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	ec51 0b19 	vmov	r0, r1, d9
 8007bbc:	f7f8 fd2c 	bl	8000618 <__aeabi_dmul>
 8007bc0:	1136      	asrs	r6, r6, #4
 8007bc2:	4682      	mov	sl, r0
 8007bc4:	468b      	mov	fp, r1
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	2502      	movs	r5, #2
 8007bca:	2e00      	cmp	r6, #0
 8007bcc:	d17a      	bne.n	8007cc4 <_dtoa_r+0x4c4>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1d3      	bne.n	8007b7a <_dtoa_r+0x37a>
 8007bd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 8082 	beq.w	8007cde <_dtoa_r+0x4de>
 8007bda:	4b91      	ldr	r3, [pc, #580]	; (8007e20 <_dtoa_r+0x620>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	4650      	mov	r0, sl
 8007be0:	4659      	mov	r1, fp
 8007be2:	f7f8 ff8b 	bl	8000afc <__aeabi_dcmplt>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d079      	beq.n	8007cde <_dtoa_r+0x4de>
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d076      	beq.n	8007cde <_dtoa_r+0x4de>
 8007bf0:	9b02      	ldr	r3, [sp, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	dd36      	ble.n	8007c64 <_dtoa_r+0x464>
 8007bf6:	9b00      	ldr	r3, [sp, #0]
 8007bf8:	4650      	mov	r0, sl
 8007bfa:	4659      	mov	r1, fp
 8007bfc:	1e5f      	subs	r7, r3, #1
 8007bfe:	2200      	movs	r2, #0
 8007c00:	4b88      	ldr	r3, [pc, #544]	; (8007e24 <_dtoa_r+0x624>)
 8007c02:	f7f8 fd09 	bl	8000618 <__aeabi_dmul>
 8007c06:	9e02      	ldr	r6, [sp, #8]
 8007c08:	4682      	mov	sl, r0
 8007c0a:	468b      	mov	fp, r1
 8007c0c:	3501      	adds	r5, #1
 8007c0e:	4628      	mov	r0, r5
 8007c10:	f7f8 fc98 	bl	8000544 <__aeabi_i2d>
 8007c14:	4652      	mov	r2, sl
 8007c16:	465b      	mov	r3, fp
 8007c18:	f7f8 fcfe 	bl	8000618 <__aeabi_dmul>
 8007c1c:	4b82      	ldr	r3, [pc, #520]	; (8007e28 <_dtoa_r+0x628>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f7f8 fb44 	bl	80002ac <__adddf3>
 8007c24:	46d0      	mov	r8, sl
 8007c26:	46d9      	mov	r9, fp
 8007c28:	4682      	mov	sl, r0
 8007c2a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007c2e:	2e00      	cmp	r6, #0
 8007c30:	d158      	bne.n	8007ce4 <_dtoa_r+0x4e4>
 8007c32:	4b7e      	ldr	r3, [pc, #504]	; (8007e2c <_dtoa_r+0x62c>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	4640      	mov	r0, r8
 8007c38:	4649      	mov	r1, r9
 8007c3a:	f7f8 fb35 	bl	80002a8 <__aeabi_dsub>
 8007c3e:	4652      	mov	r2, sl
 8007c40:	465b      	mov	r3, fp
 8007c42:	4680      	mov	r8, r0
 8007c44:	4689      	mov	r9, r1
 8007c46:	f7f8 ff77 	bl	8000b38 <__aeabi_dcmpgt>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	f040 8295 	bne.w	800817a <_dtoa_r+0x97a>
 8007c50:	4652      	mov	r2, sl
 8007c52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007c56:	4640      	mov	r0, r8
 8007c58:	4649      	mov	r1, r9
 8007c5a:	f7f8 ff4f 	bl	8000afc <__aeabi_dcmplt>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	f040 8289 	bne.w	8008176 <_dtoa_r+0x976>
 8007c64:	ec5b ab19 	vmov	sl, fp, d9
 8007c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f2c0 8148 	blt.w	8007f00 <_dtoa_r+0x700>
 8007c70:	9a00      	ldr	r2, [sp, #0]
 8007c72:	2a0e      	cmp	r2, #14
 8007c74:	f300 8144 	bgt.w	8007f00 <_dtoa_r+0x700>
 8007c78:	4b67      	ldr	r3, [pc, #412]	; (8007e18 <_dtoa_r+0x618>)
 8007c7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f280 80d5 	bge.w	8007e34 <_dtoa_r+0x634>
 8007c8a:	9b03      	ldr	r3, [sp, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f300 80d1 	bgt.w	8007e34 <_dtoa_r+0x634>
 8007c92:	f040 826f 	bne.w	8008174 <_dtoa_r+0x974>
 8007c96:	4b65      	ldr	r3, [pc, #404]	; (8007e2c <_dtoa_r+0x62c>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	f7f8 fcbb 	bl	8000618 <__aeabi_dmul>
 8007ca2:	4652      	mov	r2, sl
 8007ca4:	465b      	mov	r3, fp
 8007ca6:	f7f8 ff3d 	bl	8000b24 <__aeabi_dcmpge>
 8007caa:	9e03      	ldr	r6, [sp, #12]
 8007cac:	4637      	mov	r7, r6
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	f040 8245 	bne.w	800813e <_dtoa_r+0x93e>
 8007cb4:	9d01      	ldr	r5, [sp, #4]
 8007cb6:	2331      	movs	r3, #49	; 0x31
 8007cb8:	f805 3b01 	strb.w	r3, [r5], #1
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	e240      	b.n	8008146 <_dtoa_r+0x946>
 8007cc4:	07f2      	lsls	r2, r6, #31
 8007cc6:	d505      	bpl.n	8007cd4 <_dtoa_r+0x4d4>
 8007cc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ccc:	f7f8 fca4 	bl	8000618 <__aeabi_dmul>
 8007cd0:	3501      	adds	r5, #1
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	1076      	asrs	r6, r6, #1
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	e777      	b.n	8007bca <_dtoa_r+0x3ca>
 8007cda:	2502      	movs	r5, #2
 8007cdc:	e779      	b.n	8007bd2 <_dtoa_r+0x3d2>
 8007cde:	9f00      	ldr	r7, [sp, #0]
 8007ce0:	9e03      	ldr	r6, [sp, #12]
 8007ce2:	e794      	b.n	8007c0e <_dtoa_r+0x40e>
 8007ce4:	9901      	ldr	r1, [sp, #4]
 8007ce6:	4b4c      	ldr	r3, [pc, #304]	; (8007e18 <_dtoa_r+0x618>)
 8007ce8:	4431      	add	r1, r6
 8007cea:	910d      	str	r1, [sp, #52]	; 0x34
 8007cec:	9908      	ldr	r1, [sp, #32]
 8007cee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007cf2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cf6:	2900      	cmp	r1, #0
 8007cf8:	d043      	beq.n	8007d82 <_dtoa_r+0x582>
 8007cfa:	494d      	ldr	r1, [pc, #308]	; (8007e30 <_dtoa_r+0x630>)
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	f7f8 fdb5 	bl	800086c <__aeabi_ddiv>
 8007d02:	4652      	mov	r2, sl
 8007d04:	465b      	mov	r3, fp
 8007d06:	f7f8 facf 	bl	80002a8 <__aeabi_dsub>
 8007d0a:	9d01      	ldr	r5, [sp, #4]
 8007d0c:	4682      	mov	sl, r0
 8007d0e:	468b      	mov	fp, r1
 8007d10:	4649      	mov	r1, r9
 8007d12:	4640      	mov	r0, r8
 8007d14:	f7f8 ff30 	bl	8000b78 <__aeabi_d2iz>
 8007d18:	4606      	mov	r6, r0
 8007d1a:	f7f8 fc13 	bl	8000544 <__aeabi_i2d>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4640      	mov	r0, r8
 8007d24:	4649      	mov	r1, r9
 8007d26:	f7f8 fabf 	bl	80002a8 <__aeabi_dsub>
 8007d2a:	3630      	adds	r6, #48	; 0x30
 8007d2c:	f805 6b01 	strb.w	r6, [r5], #1
 8007d30:	4652      	mov	r2, sl
 8007d32:	465b      	mov	r3, fp
 8007d34:	4680      	mov	r8, r0
 8007d36:	4689      	mov	r9, r1
 8007d38:	f7f8 fee0 	bl	8000afc <__aeabi_dcmplt>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d163      	bne.n	8007e08 <_dtoa_r+0x608>
 8007d40:	4642      	mov	r2, r8
 8007d42:	464b      	mov	r3, r9
 8007d44:	4936      	ldr	r1, [pc, #216]	; (8007e20 <_dtoa_r+0x620>)
 8007d46:	2000      	movs	r0, #0
 8007d48:	f7f8 faae 	bl	80002a8 <__aeabi_dsub>
 8007d4c:	4652      	mov	r2, sl
 8007d4e:	465b      	mov	r3, fp
 8007d50:	f7f8 fed4 	bl	8000afc <__aeabi_dcmplt>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	f040 80b5 	bne.w	8007ec4 <_dtoa_r+0x6c4>
 8007d5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d5c:	429d      	cmp	r5, r3
 8007d5e:	d081      	beq.n	8007c64 <_dtoa_r+0x464>
 8007d60:	4b30      	ldr	r3, [pc, #192]	; (8007e24 <_dtoa_r+0x624>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	4650      	mov	r0, sl
 8007d66:	4659      	mov	r1, fp
 8007d68:	f7f8 fc56 	bl	8000618 <__aeabi_dmul>
 8007d6c:	4b2d      	ldr	r3, [pc, #180]	; (8007e24 <_dtoa_r+0x624>)
 8007d6e:	4682      	mov	sl, r0
 8007d70:	468b      	mov	fp, r1
 8007d72:	4640      	mov	r0, r8
 8007d74:	4649      	mov	r1, r9
 8007d76:	2200      	movs	r2, #0
 8007d78:	f7f8 fc4e 	bl	8000618 <__aeabi_dmul>
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	4689      	mov	r9, r1
 8007d80:	e7c6      	b.n	8007d10 <_dtoa_r+0x510>
 8007d82:	4650      	mov	r0, sl
 8007d84:	4659      	mov	r1, fp
 8007d86:	f7f8 fc47 	bl	8000618 <__aeabi_dmul>
 8007d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d8c:	9d01      	ldr	r5, [sp, #4]
 8007d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d90:	4682      	mov	sl, r0
 8007d92:	468b      	mov	fp, r1
 8007d94:	4649      	mov	r1, r9
 8007d96:	4640      	mov	r0, r8
 8007d98:	f7f8 feee 	bl	8000b78 <__aeabi_d2iz>
 8007d9c:	4606      	mov	r6, r0
 8007d9e:	f7f8 fbd1 	bl	8000544 <__aeabi_i2d>
 8007da2:	3630      	adds	r6, #48	; 0x30
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4640      	mov	r0, r8
 8007daa:	4649      	mov	r1, r9
 8007dac:	f7f8 fa7c 	bl	80002a8 <__aeabi_dsub>
 8007db0:	f805 6b01 	strb.w	r6, [r5], #1
 8007db4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007db6:	429d      	cmp	r5, r3
 8007db8:	4680      	mov	r8, r0
 8007dba:	4689      	mov	r9, r1
 8007dbc:	f04f 0200 	mov.w	r2, #0
 8007dc0:	d124      	bne.n	8007e0c <_dtoa_r+0x60c>
 8007dc2:	4b1b      	ldr	r3, [pc, #108]	; (8007e30 <_dtoa_r+0x630>)
 8007dc4:	4650      	mov	r0, sl
 8007dc6:	4659      	mov	r1, fp
 8007dc8:	f7f8 fa70 	bl	80002ac <__adddf3>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	f7f8 feb0 	bl	8000b38 <__aeabi_dcmpgt>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d173      	bne.n	8007ec4 <_dtoa_r+0x6c4>
 8007ddc:	4652      	mov	r2, sl
 8007dde:	465b      	mov	r3, fp
 8007de0:	4913      	ldr	r1, [pc, #76]	; (8007e30 <_dtoa_r+0x630>)
 8007de2:	2000      	movs	r0, #0
 8007de4:	f7f8 fa60 	bl	80002a8 <__aeabi_dsub>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4640      	mov	r0, r8
 8007dee:	4649      	mov	r1, r9
 8007df0:	f7f8 fe84 	bl	8000afc <__aeabi_dcmplt>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	f43f af35 	beq.w	8007c64 <_dtoa_r+0x464>
 8007dfa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007dfc:	1e6b      	subs	r3, r5, #1
 8007dfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e04:	2b30      	cmp	r3, #48	; 0x30
 8007e06:	d0f8      	beq.n	8007dfa <_dtoa_r+0x5fa>
 8007e08:	9700      	str	r7, [sp, #0]
 8007e0a:	e049      	b.n	8007ea0 <_dtoa_r+0x6a0>
 8007e0c:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <_dtoa_r+0x624>)
 8007e0e:	f7f8 fc03 	bl	8000618 <__aeabi_dmul>
 8007e12:	4680      	mov	r8, r0
 8007e14:	4689      	mov	r9, r1
 8007e16:	e7bd      	b.n	8007d94 <_dtoa_r+0x594>
 8007e18:	0800a8f8 	.word	0x0800a8f8
 8007e1c:	0800a8d0 	.word	0x0800a8d0
 8007e20:	3ff00000 	.word	0x3ff00000
 8007e24:	40240000 	.word	0x40240000
 8007e28:	401c0000 	.word	0x401c0000
 8007e2c:	40140000 	.word	0x40140000
 8007e30:	3fe00000 	.word	0x3fe00000
 8007e34:	9d01      	ldr	r5, [sp, #4]
 8007e36:	4656      	mov	r6, sl
 8007e38:	465f      	mov	r7, fp
 8007e3a:	4642      	mov	r2, r8
 8007e3c:	464b      	mov	r3, r9
 8007e3e:	4630      	mov	r0, r6
 8007e40:	4639      	mov	r1, r7
 8007e42:	f7f8 fd13 	bl	800086c <__aeabi_ddiv>
 8007e46:	f7f8 fe97 	bl	8000b78 <__aeabi_d2iz>
 8007e4a:	4682      	mov	sl, r0
 8007e4c:	f7f8 fb7a 	bl	8000544 <__aeabi_i2d>
 8007e50:	4642      	mov	r2, r8
 8007e52:	464b      	mov	r3, r9
 8007e54:	f7f8 fbe0 	bl	8000618 <__aeabi_dmul>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	4639      	mov	r1, r7
 8007e60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007e64:	f7f8 fa20 	bl	80002a8 <__aeabi_dsub>
 8007e68:	f805 6b01 	strb.w	r6, [r5], #1
 8007e6c:	9e01      	ldr	r6, [sp, #4]
 8007e6e:	9f03      	ldr	r7, [sp, #12]
 8007e70:	1bae      	subs	r6, r5, r6
 8007e72:	42b7      	cmp	r7, r6
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	d135      	bne.n	8007ee6 <_dtoa_r+0x6e6>
 8007e7a:	f7f8 fa17 	bl	80002ac <__adddf3>
 8007e7e:	4642      	mov	r2, r8
 8007e80:	464b      	mov	r3, r9
 8007e82:	4606      	mov	r6, r0
 8007e84:	460f      	mov	r7, r1
 8007e86:	f7f8 fe57 	bl	8000b38 <__aeabi_dcmpgt>
 8007e8a:	b9d0      	cbnz	r0, 8007ec2 <_dtoa_r+0x6c2>
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	464b      	mov	r3, r9
 8007e90:	4630      	mov	r0, r6
 8007e92:	4639      	mov	r1, r7
 8007e94:	f7f8 fe28 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e98:	b110      	cbz	r0, 8007ea0 <_dtoa_r+0x6a0>
 8007e9a:	f01a 0f01 	tst.w	sl, #1
 8007e9e:	d110      	bne.n	8007ec2 <_dtoa_r+0x6c2>
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	ee18 1a10 	vmov	r1, s16
 8007ea6:	f000 ff6d 	bl	8008d84 <_Bfree>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	9800      	ldr	r0, [sp, #0]
 8007eae:	702b      	strb	r3, [r5, #0]
 8007eb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	6018      	str	r0, [r3, #0]
 8007eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f43f acf1 	beq.w	80078a0 <_dtoa_r+0xa0>
 8007ebe:	601d      	str	r5, [r3, #0]
 8007ec0:	e4ee      	b.n	80078a0 <_dtoa_r+0xa0>
 8007ec2:	9f00      	ldr	r7, [sp, #0]
 8007ec4:	462b      	mov	r3, r5
 8007ec6:	461d      	mov	r5, r3
 8007ec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ecc:	2a39      	cmp	r2, #57	; 0x39
 8007ece:	d106      	bne.n	8007ede <_dtoa_r+0x6de>
 8007ed0:	9a01      	ldr	r2, [sp, #4]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d1f7      	bne.n	8007ec6 <_dtoa_r+0x6c6>
 8007ed6:	9901      	ldr	r1, [sp, #4]
 8007ed8:	2230      	movs	r2, #48	; 0x30
 8007eda:	3701      	adds	r7, #1
 8007edc:	700a      	strb	r2, [r1, #0]
 8007ede:	781a      	ldrb	r2, [r3, #0]
 8007ee0:	3201      	adds	r2, #1
 8007ee2:	701a      	strb	r2, [r3, #0]
 8007ee4:	e790      	b.n	8007e08 <_dtoa_r+0x608>
 8007ee6:	4ba6      	ldr	r3, [pc, #664]	; (8008180 <_dtoa_r+0x980>)
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f7f8 fb95 	bl	8000618 <__aeabi_dmul>
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	460f      	mov	r7, r1
 8007ef6:	f7f8 fdf7 	bl	8000ae8 <__aeabi_dcmpeq>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	d09d      	beq.n	8007e3a <_dtoa_r+0x63a>
 8007efe:	e7cf      	b.n	8007ea0 <_dtoa_r+0x6a0>
 8007f00:	9a08      	ldr	r2, [sp, #32]
 8007f02:	2a00      	cmp	r2, #0
 8007f04:	f000 80d7 	beq.w	80080b6 <_dtoa_r+0x8b6>
 8007f08:	9a06      	ldr	r2, [sp, #24]
 8007f0a:	2a01      	cmp	r2, #1
 8007f0c:	f300 80ba 	bgt.w	8008084 <_dtoa_r+0x884>
 8007f10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f12:	2a00      	cmp	r2, #0
 8007f14:	f000 80b2 	beq.w	800807c <_dtoa_r+0x87c>
 8007f18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f1c:	9e07      	ldr	r6, [sp, #28]
 8007f1e:	9d04      	ldr	r5, [sp, #16]
 8007f20:	9a04      	ldr	r2, [sp, #16]
 8007f22:	441a      	add	r2, r3
 8007f24:	9204      	str	r2, [sp, #16]
 8007f26:	9a05      	ldr	r2, [sp, #20]
 8007f28:	2101      	movs	r1, #1
 8007f2a:	441a      	add	r2, r3
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	9205      	str	r2, [sp, #20]
 8007f30:	f001 f82a 	bl	8008f88 <__i2b>
 8007f34:	4607      	mov	r7, r0
 8007f36:	2d00      	cmp	r5, #0
 8007f38:	dd0c      	ble.n	8007f54 <_dtoa_r+0x754>
 8007f3a:	9b05      	ldr	r3, [sp, #20]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	dd09      	ble.n	8007f54 <_dtoa_r+0x754>
 8007f40:	42ab      	cmp	r3, r5
 8007f42:	9a04      	ldr	r2, [sp, #16]
 8007f44:	bfa8      	it	ge
 8007f46:	462b      	movge	r3, r5
 8007f48:	1ad2      	subs	r2, r2, r3
 8007f4a:	9204      	str	r2, [sp, #16]
 8007f4c:	9a05      	ldr	r2, [sp, #20]
 8007f4e:	1aed      	subs	r5, r5, r3
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	9305      	str	r3, [sp, #20]
 8007f54:	9b07      	ldr	r3, [sp, #28]
 8007f56:	b31b      	cbz	r3, 8007fa0 <_dtoa_r+0x7a0>
 8007f58:	9b08      	ldr	r3, [sp, #32]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	f000 80af 	beq.w	80080be <_dtoa_r+0x8be>
 8007f60:	2e00      	cmp	r6, #0
 8007f62:	dd13      	ble.n	8007f8c <_dtoa_r+0x78c>
 8007f64:	4639      	mov	r1, r7
 8007f66:	4632      	mov	r2, r6
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f001 f8cd 	bl	8009108 <__pow5mult>
 8007f6e:	ee18 2a10 	vmov	r2, s16
 8007f72:	4601      	mov	r1, r0
 8007f74:	4607      	mov	r7, r0
 8007f76:	4620      	mov	r0, r4
 8007f78:	f001 f81c 	bl	8008fb4 <__multiply>
 8007f7c:	ee18 1a10 	vmov	r1, s16
 8007f80:	4680      	mov	r8, r0
 8007f82:	4620      	mov	r0, r4
 8007f84:	f000 fefe 	bl	8008d84 <_Bfree>
 8007f88:	ee08 8a10 	vmov	s16, r8
 8007f8c:	9b07      	ldr	r3, [sp, #28]
 8007f8e:	1b9a      	subs	r2, r3, r6
 8007f90:	d006      	beq.n	8007fa0 <_dtoa_r+0x7a0>
 8007f92:	ee18 1a10 	vmov	r1, s16
 8007f96:	4620      	mov	r0, r4
 8007f98:	f001 f8b6 	bl	8009108 <__pow5mult>
 8007f9c:	ee08 0a10 	vmov	s16, r0
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	4620      	mov	r0, r4
 8007fa4:	f000 fff0 	bl	8008f88 <__i2b>
 8007fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	4606      	mov	r6, r0
 8007fae:	f340 8088 	ble.w	80080c2 <_dtoa_r+0x8c2>
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	4601      	mov	r1, r0
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f001 f8a6 	bl	8009108 <__pow5mult>
 8007fbc:	9b06      	ldr	r3, [sp, #24]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	4606      	mov	r6, r0
 8007fc2:	f340 8081 	ble.w	80080c8 <_dtoa_r+0x8c8>
 8007fc6:	f04f 0800 	mov.w	r8, #0
 8007fca:	6933      	ldr	r3, [r6, #16]
 8007fcc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007fd0:	6918      	ldr	r0, [r3, #16]
 8007fd2:	f000 ff89 	bl	8008ee8 <__hi0bits>
 8007fd6:	f1c0 0020 	rsb	r0, r0, #32
 8007fda:	9b05      	ldr	r3, [sp, #20]
 8007fdc:	4418      	add	r0, r3
 8007fde:	f010 001f 	ands.w	r0, r0, #31
 8007fe2:	f000 8092 	beq.w	800810a <_dtoa_r+0x90a>
 8007fe6:	f1c0 0320 	rsb	r3, r0, #32
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	f340 808a 	ble.w	8008104 <_dtoa_r+0x904>
 8007ff0:	f1c0 001c 	rsb	r0, r0, #28
 8007ff4:	9b04      	ldr	r3, [sp, #16]
 8007ff6:	4403      	add	r3, r0
 8007ff8:	9304      	str	r3, [sp, #16]
 8007ffa:	9b05      	ldr	r3, [sp, #20]
 8007ffc:	4403      	add	r3, r0
 8007ffe:	4405      	add	r5, r0
 8008000:	9305      	str	r3, [sp, #20]
 8008002:	9b04      	ldr	r3, [sp, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	dd07      	ble.n	8008018 <_dtoa_r+0x818>
 8008008:	ee18 1a10 	vmov	r1, s16
 800800c:	461a      	mov	r2, r3
 800800e:	4620      	mov	r0, r4
 8008010:	f001 f8d4 	bl	80091bc <__lshift>
 8008014:	ee08 0a10 	vmov	s16, r0
 8008018:	9b05      	ldr	r3, [sp, #20]
 800801a:	2b00      	cmp	r3, #0
 800801c:	dd05      	ble.n	800802a <_dtoa_r+0x82a>
 800801e:	4631      	mov	r1, r6
 8008020:	461a      	mov	r2, r3
 8008022:	4620      	mov	r0, r4
 8008024:	f001 f8ca 	bl	80091bc <__lshift>
 8008028:	4606      	mov	r6, r0
 800802a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800802c:	2b00      	cmp	r3, #0
 800802e:	d06e      	beq.n	800810e <_dtoa_r+0x90e>
 8008030:	ee18 0a10 	vmov	r0, s16
 8008034:	4631      	mov	r1, r6
 8008036:	f001 f931 	bl	800929c <__mcmp>
 800803a:	2800      	cmp	r0, #0
 800803c:	da67      	bge.n	800810e <_dtoa_r+0x90e>
 800803e:	9b00      	ldr	r3, [sp, #0]
 8008040:	3b01      	subs	r3, #1
 8008042:	ee18 1a10 	vmov	r1, s16
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	220a      	movs	r2, #10
 800804a:	2300      	movs	r3, #0
 800804c:	4620      	mov	r0, r4
 800804e:	f000 febb 	bl	8008dc8 <__multadd>
 8008052:	9b08      	ldr	r3, [sp, #32]
 8008054:	ee08 0a10 	vmov	s16, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 81b1 	beq.w	80083c0 <_dtoa_r+0xbc0>
 800805e:	2300      	movs	r3, #0
 8008060:	4639      	mov	r1, r7
 8008062:	220a      	movs	r2, #10
 8008064:	4620      	mov	r0, r4
 8008066:	f000 feaf 	bl	8008dc8 <__multadd>
 800806a:	9b02      	ldr	r3, [sp, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	4607      	mov	r7, r0
 8008070:	f300 808e 	bgt.w	8008190 <_dtoa_r+0x990>
 8008074:	9b06      	ldr	r3, [sp, #24]
 8008076:	2b02      	cmp	r3, #2
 8008078:	dc51      	bgt.n	800811e <_dtoa_r+0x91e>
 800807a:	e089      	b.n	8008190 <_dtoa_r+0x990>
 800807c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800807e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008082:	e74b      	b.n	8007f1c <_dtoa_r+0x71c>
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	1e5e      	subs	r6, r3, #1
 8008088:	9b07      	ldr	r3, [sp, #28]
 800808a:	42b3      	cmp	r3, r6
 800808c:	bfbf      	itttt	lt
 800808e:	9b07      	ldrlt	r3, [sp, #28]
 8008090:	9607      	strlt	r6, [sp, #28]
 8008092:	1af2      	sublt	r2, r6, r3
 8008094:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008096:	bfb6      	itet	lt
 8008098:	189b      	addlt	r3, r3, r2
 800809a:	1b9e      	subge	r6, r3, r6
 800809c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800809e:	9b03      	ldr	r3, [sp, #12]
 80080a0:	bfb8      	it	lt
 80080a2:	2600      	movlt	r6, #0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	bfb7      	itett	lt
 80080a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80080ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80080b0:	1a9d      	sublt	r5, r3, r2
 80080b2:	2300      	movlt	r3, #0
 80080b4:	e734      	b.n	8007f20 <_dtoa_r+0x720>
 80080b6:	9e07      	ldr	r6, [sp, #28]
 80080b8:	9d04      	ldr	r5, [sp, #16]
 80080ba:	9f08      	ldr	r7, [sp, #32]
 80080bc:	e73b      	b.n	8007f36 <_dtoa_r+0x736>
 80080be:	9a07      	ldr	r2, [sp, #28]
 80080c0:	e767      	b.n	8007f92 <_dtoa_r+0x792>
 80080c2:	9b06      	ldr	r3, [sp, #24]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	dc18      	bgt.n	80080fa <_dtoa_r+0x8fa>
 80080c8:	f1ba 0f00 	cmp.w	sl, #0
 80080cc:	d115      	bne.n	80080fa <_dtoa_r+0x8fa>
 80080ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080d2:	b993      	cbnz	r3, 80080fa <_dtoa_r+0x8fa>
 80080d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080d8:	0d1b      	lsrs	r3, r3, #20
 80080da:	051b      	lsls	r3, r3, #20
 80080dc:	b183      	cbz	r3, 8008100 <_dtoa_r+0x900>
 80080de:	9b04      	ldr	r3, [sp, #16]
 80080e0:	3301      	adds	r3, #1
 80080e2:	9304      	str	r3, [sp, #16]
 80080e4:	9b05      	ldr	r3, [sp, #20]
 80080e6:	3301      	adds	r3, #1
 80080e8:	9305      	str	r3, [sp, #20]
 80080ea:	f04f 0801 	mov.w	r8, #1
 80080ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f47f af6a 	bne.w	8007fca <_dtoa_r+0x7ca>
 80080f6:	2001      	movs	r0, #1
 80080f8:	e76f      	b.n	8007fda <_dtoa_r+0x7da>
 80080fa:	f04f 0800 	mov.w	r8, #0
 80080fe:	e7f6      	b.n	80080ee <_dtoa_r+0x8ee>
 8008100:	4698      	mov	r8, r3
 8008102:	e7f4      	b.n	80080ee <_dtoa_r+0x8ee>
 8008104:	f43f af7d 	beq.w	8008002 <_dtoa_r+0x802>
 8008108:	4618      	mov	r0, r3
 800810a:	301c      	adds	r0, #28
 800810c:	e772      	b.n	8007ff4 <_dtoa_r+0x7f4>
 800810e:	9b03      	ldr	r3, [sp, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	dc37      	bgt.n	8008184 <_dtoa_r+0x984>
 8008114:	9b06      	ldr	r3, [sp, #24]
 8008116:	2b02      	cmp	r3, #2
 8008118:	dd34      	ble.n	8008184 <_dtoa_r+0x984>
 800811a:	9b03      	ldr	r3, [sp, #12]
 800811c:	9302      	str	r3, [sp, #8]
 800811e:	9b02      	ldr	r3, [sp, #8]
 8008120:	b96b      	cbnz	r3, 800813e <_dtoa_r+0x93e>
 8008122:	4631      	mov	r1, r6
 8008124:	2205      	movs	r2, #5
 8008126:	4620      	mov	r0, r4
 8008128:	f000 fe4e 	bl	8008dc8 <__multadd>
 800812c:	4601      	mov	r1, r0
 800812e:	4606      	mov	r6, r0
 8008130:	ee18 0a10 	vmov	r0, s16
 8008134:	f001 f8b2 	bl	800929c <__mcmp>
 8008138:	2800      	cmp	r0, #0
 800813a:	f73f adbb 	bgt.w	8007cb4 <_dtoa_r+0x4b4>
 800813e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008140:	9d01      	ldr	r5, [sp, #4]
 8008142:	43db      	mvns	r3, r3
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	f04f 0800 	mov.w	r8, #0
 800814a:	4631      	mov	r1, r6
 800814c:	4620      	mov	r0, r4
 800814e:	f000 fe19 	bl	8008d84 <_Bfree>
 8008152:	2f00      	cmp	r7, #0
 8008154:	f43f aea4 	beq.w	8007ea0 <_dtoa_r+0x6a0>
 8008158:	f1b8 0f00 	cmp.w	r8, #0
 800815c:	d005      	beq.n	800816a <_dtoa_r+0x96a>
 800815e:	45b8      	cmp	r8, r7
 8008160:	d003      	beq.n	800816a <_dtoa_r+0x96a>
 8008162:	4641      	mov	r1, r8
 8008164:	4620      	mov	r0, r4
 8008166:	f000 fe0d 	bl	8008d84 <_Bfree>
 800816a:	4639      	mov	r1, r7
 800816c:	4620      	mov	r0, r4
 800816e:	f000 fe09 	bl	8008d84 <_Bfree>
 8008172:	e695      	b.n	8007ea0 <_dtoa_r+0x6a0>
 8008174:	2600      	movs	r6, #0
 8008176:	4637      	mov	r7, r6
 8008178:	e7e1      	b.n	800813e <_dtoa_r+0x93e>
 800817a:	9700      	str	r7, [sp, #0]
 800817c:	4637      	mov	r7, r6
 800817e:	e599      	b.n	8007cb4 <_dtoa_r+0x4b4>
 8008180:	40240000 	.word	0x40240000
 8008184:	9b08      	ldr	r3, [sp, #32]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f000 80ca 	beq.w	8008320 <_dtoa_r+0xb20>
 800818c:	9b03      	ldr	r3, [sp, #12]
 800818e:	9302      	str	r3, [sp, #8]
 8008190:	2d00      	cmp	r5, #0
 8008192:	dd05      	ble.n	80081a0 <_dtoa_r+0x9a0>
 8008194:	4639      	mov	r1, r7
 8008196:	462a      	mov	r2, r5
 8008198:	4620      	mov	r0, r4
 800819a:	f001 f80f 	bl	80091bc <__lshift>
 800819e:	4607      	mov	r7, r0
 80081a0:	f1b8 0f00 	cmp.w	r8, #0
 80081a4:	d05b      	beq.n	800825e <_dtoa_r+0xa5e>
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 fdab 	bl	8008d04 <_Balloc>
 80081ae:	4605      	mov	r5, r0
 80081b0:	b928      	cbnz	r0, 80081be <_dtoa_r+0x9be>
 80081b2:	4b87      	ldr	r3, [pc, #540]	; (80083d0 <_dtoa_r+0xbd0>)
 80081b4:	4602      	mov	r2, r0
 80081b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081ba:	f7ff bb3b 	b.w	8007834 <_dtoa_r+0x34>
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	3202      	adds	r2, #2
 80081c2:	0092      	lsls	r2, r2, #2
 80081c4:	f107 010c 	add.w	r1, r7, #12
 80081c8:	300c      	adds	r0, #12
 80081ca:	f000 fd8d 	bl	8008ce8 <memcpy>
 80081ce:	2201      	movs	r2, #1
 80081d0:	4629      	mov	r1, r5
 80081d2:	4620      	mov	r0, r4
 80081d4:	f000 fff2 	bl	80091bc <__lshift>
 80081d8:	9b01      	ldr	r3, [sp, #4]
 80081da:	f103 0901 	add.w	r9, r3, #1
 80081de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80081e2:	4413      	add	r3, r2
 80081e4:	9305      	str	r3, [sp, #20]
 80081e6:	f00a 0301 	and.w	r3, sl, #1
 80081ea:	46b8      	mov	r8, r7
 80081ec:	9304      	str	r3, [sp, #16]
 80081ee:	4607      	mov	r7, r0
 80081f0:	4631      	mov	r1, r6
 80081f2:	ee18 0a10 	vmov	r0, s16
 80081f6:	f7ff fa77 	bl	80076e8 <quorem>
 80081fa:	4641      	mov	r1, r8
 80081fc:	9002      	str	r0, [sp, #8]
 80081fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008202:	ee18 0a10 	vmov	r0, s16
 8008206:	f001 f849 	bl	800929c <__mcmp>
 800820a:	463a      	mov	r2, r7
 800820c:	9003      	str	r0, [sp, #12]
 800820e:	4631      	mov	r1, r6
 8008210:	4620      	mov	r0, r4
 8008212:	f001 f85f 	bl	80092d4 <__mdiff>
 8008216:	68c2      	ldr	r2, [r0, #12]
 8008218:	f109 3bff 	add.w	fp, r9, #4294967295
 800821c:	4605      	mov	r5, r0
 800821e:	bb02      	cbnz	r2, 8008262 <_dtoa_r+0xa62>
 8008220:	4601      	mov	r1, r0
 8008222:	ee18 0a10 	vmov	r0, s16
 8008226:	f001 f839 	bl	800929c <__mcmp>
 800822a:	4602      	mov	r2, r0
 800822c:	4629      	mov	r1, r5
 800822e:	4620      	mov	r0, r4
 8008230:	9207      	str	r2, [sp, #28]
 8008232:	f000 fda7 	bl	8008d84 <_Bfree>
 8008236:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800823a:	ea43 0102 	orr.w	r1, r3, r2
 800823e:	9b04      	ldr	r3, [sp, #16]
 8008240:	430b      	orrs	r3, r1
 8008242:	464d      	mov	r5, r9
 8008244:	d10f      	bne.n	8008266 <_dtoa_r+0xa66>
 8008246:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800824a:	d02a      	beq.n	80082a2 <_dtoa_r+0xaa2>
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	dd02      	ble.n	8008258 <_dtoa_r+0xa58>
 8008252:	9b02      	ldr	r3, [sp, #8]
 8008254:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008258:	f88b a000 	strb.w	sl, [fp]
 800825c:	e775      	b.n	800814a <_dtoa_r+0x94a>
 800825e:	4638      	mov	r0, r7
 8008260:	e7ba      	b.n	80081d8 <_dtoa_r+0x9d8>
 8008262:	2201      	movs	r2, #1
 8008264:	e7e2      	b.n	800822c <_dtoa_r+0xa2c>
 8008266:	9b03      	ldr	r3, [sp, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	db04      	blt.n	8008276 <_dtoa_r+0xa76>
 800826c:	9906      	ldr	r1, [sp, #24]
 800826e:	430b      	orrs	r3, r1
 8008270:	9904      	ldr	r1, [sp, #16]
 8008272:	430b      	orrs	r3, r1
 8008274:	d122      	bne.n	80082bc <_dtoa_r+0xabc>
 8008276:	2a00      	cmp	r2, #0
 8008278:	ddee      	ble.n	8008258 <_dtoa_r+0xa58>
 800827a:	ee18 1a10 	vmov	r1, s16
 800827e:	2201      	movs	r2, #1
 8008280:	4620      	mov	r0, r4
 8008282:	f000 ff9b 	bl	80091bc <__lshift>
 8008286:	4631      	mov	r1, r6
 8008288:	ee08 0a10 	vmov	s16, r0
 800828c:	f001 f806 	bl	800929c <__mcmp>
 8008290:	2800      	cmp	r0, #0
 8008292:	dc03      	bgt.n	800829c <_dtoa_r+0xa9c>
 8008294:	d1e0      	bne.n	8008258 <_dtoa_r+0xa58>
 8008296:	f01a 0f01 	tst.w	sl, #1
 800829a:	d0dd      	beq.n	8008258 <_dtoa_r+0xa58>
 800829c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082a0:	d1d7      	bne.n	8008252 <_dtoa_r+0xa52>
 80082a2:	2339      	movs	r3, #57	; 0x39
 80082a4:	f88b 3000 	strb.w	r3, [fp]
 80082a8:	462b      	mov	r3, r5
 80082aa:	461d      	mov	r5, r3
 80082ac:	3b01      	subs	r3, #1
 80082ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80082b2:	2a39      	cmp	r2, #57	; 0x39
 80082b4:	d071      	beq.n	800839a <_dtoa_r+0xb9a>
 80082b6:	3201      	adds	r2, #1
 80082b8:	701a      	strb	r2, [r3, #0]
 80082ba:	e746      	b.n	800814a <_dtoa_r+0x94a>
 80082bc:	2a00      	cmp	r2, #0
 80082be:	dd07      	ble.n	80082d0 <_dtoa_r+0xad0>
 80082c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80082c4:	d0ed      	beq.n	80082a2 <_dtoa_r+0xaa2>
 80082c6:	f10a 0301 	add.w	r3, sl, #1
 80082ca:	f88b 3000 	strb.w	r3, [fp]
 80082ce:	e73c      	b.n	800814a <_dtoa_r+0x94a>
 80082d0:	9b05      	ldr	r3, [sp, #20]
 80082d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80082d6:	4599      	cmp	r9, r3
 80082d8:	d047      	beq.n	800836a <_dtoa_r+0xb6a>
 80082da:	ee18 1a10 	vmov	r1, s16
 80082de:	2300      	movs	r3, #0
 80082e0:	220a      	movs	r2, #10
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fd70 	bl	8008dc8 <__multadd>
 80082e8:	45b8      	cmp	r8, r7
 80082ea:	ee08 0a10 	vmov	s16, r0
 80082ee:	f04f 0300 	mov.w	r3, #0
 80082f2:	f04f 020a 	mov.w	r2, #10
 80082f6:	4641      	mov	r1, r8
 80082f8:	4620      	mov	r0, r4
 80082fa:	d106      	bne.n	800830a <_dtoa_r+0xb0a>
 80082fc:	f000 fd64 	bl	8008dc8 <__multadd>
 8008300:	4680      	mov	r8, r0
 8008302:	4607      	mov	r7, r0
 8008304:	f109 0901 	add.w	r9, r9, #1
 8008308:	e772      	b.n	80081f0 <_dtoa_r+0x9f0>
 800830a:	f000 fd5d 	bl	8008dc8 <__multadd>
 800830e:	4639      	mov	r1, r7
 8008310:	4680      	mov	r8, r0
 8008312:	2300      	movs	r3, #0
 8008314:	220a      	movs	r2, #10
 8008316:	4620      	mov	r0, r4
 8008318:	f000 fd56 	bl	8008dc8 <__multadd>
 800831c:	4607      	mov	r7, r0
 800831e:	e7f1      	b.n	8008304 <_dtoa_r+0xb04>
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	9302      	str	r3, [sp, #8]
 8008324:	9d01      	ldr	r5, [sp, #4]
 8008326:	ee18 0a10 	vmov	r0, s16
 800832a:	4631      	mov	r1, r6
 800832c:	f7ff f9dc 	bl	80076e8 <quorem>
 8008330:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008334:	9b01      	ldr	r3, [sp, #4]
 8008336:	f805 ab01 	strb.w	sl, [r5], #1
 800833a:	1aea      	subs	r2, r5, r3
 800833c:	9b02      	ldr	r3, [sp, #8]
 800833e:	4293      	cmp	r3, r2
 8008340:	dd09      	ble.n	8008356 <_dtoa_r+0xb56>
 8008342:	ee18 1a10 	vmov	r1, s16
 8008346:	2300      	movs	r3, #0
 8008348:	220a      	movs	r2, #10
 800834a:	4620      	mov	r0, r4
 800834c:	f000 fd3c 	bl	8008dc8 <__multadd>
 8008350:	ee08 0a10 	vmov	s16, r0
 8008354:	e7e7      	b.n	8008326 <_dtoa_r+0xb26>
 8008356:	9b02      	ldr	r3, [sp, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	bfc8      	it	gt
 800835c:	461d      	movgt	r5, r3
 800835e:	9b01      	ldr	r3, [sp, #4]
 8008360:	bfd8      	it	le
 8008362:	2501      	movle	r5, #1
 8008364:	441d      	add	r5, r3
 8008366:	f04f 0800 	mov.w	r8, #0
 800836a:	ee18 1a10 	vmov	r1, s16
 800836e:	2201      	movs	r2, #1
 8008370:	4620      	mov	r0, r4
 8008372:	f000 ff23 	bl	80091bc <__lshift>
 8008376:	4631      	mov	r1, r6
 8008378:	ee08 0a10 	vmov	s16, r0
 800837c:	f000 ff8e 	bl	800929c <__mcmp>
 8008380:	2800      	cmp	r0, #0
 8008382:	dc91      	bgt.n	80082a8 <_dtoa_r+0xaa8>
 8008384:	d102      	bne.n	800838c <_dtoa_r+0xb8c>
 8008386:	f01a 0f01 	tst.w	sl, #1
 800838a:	d18d      	bne.n	80082a8 <_dtoa_r+0xaa8>
 800838c:	462b      	mov	r3, r5
 800838e:	461d      	mov	r5, r3
 8008390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008394:	2a30      	cmp	r2, #48	; 0x30
 8008396:	d0fa      	beq.n	800838e <_dtoa_r+0xb8e>
 8008398:	e6d7      	b.n	800814a <_dtoa_r+0x94a>
 800839a:	9a01      	ldr	r2, [sp, #4]
 800839c:	429a      	cmp	r2, r3
 800839e:	d184      	bne.n	80082aa <_dtoa_r+0xaaa>
 80083a0:	9b00      	ldr	r3, [sp, #0]
 80083a2:	3301      	adds	r3, #1
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	2331      	movs	r3, #49	; 0x31
 80083a8:	7013      	strb	r3, [r2, #0]
 80083aa:	e6ce      	b.n	800814a <_dtoa_r+0x94a>
 80083ac:	4b09      	ldr	r3, [pc, #36]	; (80083d4 <_dtoa_r+0xbd4>)
 80083ae:	f7ff ba95 	b.w	80078dc <_dtoa_r+0xdc>
 80083b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f47f aa6e 	bne.w	8007896 <_dtoa_r+0x96>
 80083ba:	4b07      	ldr	r3, [pc, #28]	; (80083d8 <_dtoa_r+0xbd8>)
 80083bc:	f7ff ba8e 	b.w	80078dc <_dtoa_r+0xdc>
 80083c0:	9b02      	ldr	r3, [sp, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	dcae      	bgt.n	8008324 <_dtoa_r+0xb24>
 80083c6:	9b06      	ldr	r3, [sp, #24]
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	f73f aea8 	bgt.w	800811e <_dtoa_r+0x91e>
 80083ce:	e7a9      	b.n	8008324 <_dtoa_r+0xb24>
 80083d0:	0800a780 	.word	0x0800a780
 80083d4:	0800a584 	.word	0x0800a584
 80083d8:	0800a701 	.word	0x0800a701

080083dc <std>:
 80083dc:	2300      	movs	r3, #0
 80083de:	b510      	push	{r4, lr}
 80083e0:	4604      	mov	r4, r0
 80083e2:	e9c0 3300 	strd	r3, r3, [r0]
 80083e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083ea:	6083      	str	r3, [r0, #8]
 80083ec:	8181      	strh	r1, [r0, #12]
 80083ee:	6643      	str	r3, [r0, #100]	; 0x64
 80083f0:	81c2      	strh	r2, [r0, #14]
 80083f2:	6183      	str	r3, [r0, #24]
 80083f4:	4619      	mov	r1, r3
 80083f6:	2208      	movs	r2, #8
 80083f8:	305c      	adds	r0, #92	; 0x5c
 80083fa:	f7fd fc09 	bl	8005c10 <memset>
 80083fe:	4b05      	ldr	r3, [pc, #20]	; (8008414 <std+0x38>)
 8008400:	6263      	str	r3, [r4, #36]	; 0x24
 8008402:	4b05      	ldr	r3, [pc, #20]	; (8008418 <std+0x3c>)
 8008404:	62a3      	str	r3, [r4, #40]	; 0x28
 8008406:	4b05      	ldr	r3, [pc, #20]	; (800841c <std+0x40>)
 8008408:	62e3      	str	r3, [r4, #44]	; 0x2c
 800840a:	4b05      	ldr	r3, [pc, #20]	; (8008420 <std+0x44>)
 800840c:	6224      	str	r4, [r4, #32]
 800840e:	6323      	str	r3, [r4, #48]	; 0x30
 8008410:	bd10      	pop	{r4, pc}
 8008412:	bf00      	nop
 8008414:	08009e11 	.word	0x08009e11
 8008418:	08009e33 	.word	0x08009e33
 800841c:	08009e6b 	.word	0x08009e6b
 8008420:	08009e8f 	.word	0x08009e8f

08008424 <_cleanup_r>:
 8008424:	4901      	ldr	r1, [pc, #4]	; (800842c <_cleanup_r+0x8>)
 8008426:	f000 b8af 	b.w	8008588 <_fwalk_reent>
 800842a:	bf00      	nop
 800842c:	0800a1e9 	.word	0x0800a1e9

08008430 <__sfmoreglue>:
 8008430:	b570      	push	{r4, r5, r6, lr}
 8008432:	2268      	movs	r2, #104	; 0x68
 8008434:	1e4d      	subs	r5, r1, #1
 8008436:	4355      	muls	r5, r2
 8008438:	460e      	mov	r6, r1
 800843a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800843e:	f001 f9a5 	bl	800978c <_malloc_r>
 8008442:	4604      	mov	r4, r0
 8008444:	b140      	cbz	r0, 8008458 <__sfmoreglue+0x28>
 8008446:	2100      	movs	r1, #0
 8008448:	e9c0 1600 	strd	r1, r6, [r0]
 800844c:	300c      	adds	r0, #12
 800844e:	60a0      	str	r0, [r4, #8]
 8008450:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008454:	f7fd fbdc 	bl	8005c10 <memset>
 8008458:	4620      	mov	r0, r4
 800845a:	bd70      	pop	{r4, r5, r6, pc}

0800845c <__sfp_lock_acquire>:
 800845c:	4801      	ldr	r0, [pc, #4]	; (8008464 <__sfp_lock_acquire+0x8>)
 800845e:	f000 bc26 	b.w	8008cae <__retarget_lock_acquire_recursive>
 8008462:	bf00      	nop
 8008464:	20000439 	.word	0x20000439

08008468 <__sfp_lock_release>:
 8008468:	4801      	ldr	r0, [pc, #4]	; (8008470 <__sfp_lock_release+0x8>)
 800846a:	f000 bc21 	b.w	8008cb0 <__retarget_lock_release_recursive>
 800846e:	bf00      	nop
 8008470:	20000439 	.word	0x20000439

08008474 <__sinit_lock_acquire>:
 8008474:	4801      	ldr	r0, [pc, #4]	; (800847c <__sinit_lock_acquire+0x8>)
 8008476:	f000 bc1a 	b.w	8008cae <__retarget_lock_acquire_recursive>
 800847a:	bf00      	nop
 800847c:	2000043a 	.word	0x2000043a

08008480 <__sinit_lock_release>:
 8008480:	4801      	ldr	r0, [pc, #4]	; (8008488 <__sinit_lock_release+0x8>)
 8008482:	f000 bc15 	b.w	8008cb0 <__retarget_lock_release_recursive>
 8008486:	bf00      	nop
 8008488:	2000043a 	.word	0x2000043a

0800848c <__sinit>:
 800848c:	b510      	push	{r4, lr}
 800848e:	4604      	mov	r4, r0
 8008490:	f7ff fff0 	bl	8008474 <__sinit_lock_acquire>
 8008494:	69a3      	ldr	r3, [r4, #24]
 8008496:	b11b      	cbz	r3, 80084a0 <__sinit+0x14>
 8008498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800849c:	f7ff bff0 	b.w	8008480 <__sinit_lock_release>
 80084a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084a4:	6523      	str	r3, [r4, #80]	; 0x50
 80084a6:	4b13      	ldr	r3, [pc, #76]	; (80084f4 <__sinit+0x68>)
 80084a8:	4a13      	ldr	r2, [pc, #76]	; (80084f8 <__sinit+0x6c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80084ae:	42a3      	cmp	r3, r4
 80084b0:	bf04      	itt	eq
 80084b2:	2301      	moveq	r3, #1
 80084b4:	61a3      	streq	r3, [r4, #24]
 80084b6:	4620      	mov	r0, r4
 80084b8:	f000 f820 	bl	80084fc <__sfp>
 80084bc:	6060      	str	r0, [r4, #4]
 80084be:	4620      	mov	r0, r4
 80084c0:	f000 f81c 	bl	80084fc <__sfp>
 80084c4:	60a0      	str	r0, [r4, #8]
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 f818 	bl	80084fc <__sfp>
 80084cc:	2200      	movs	r2, #0
 80084ce:	60e0      	str	r0, [r4, #12]
 80084d0:	2104      	movs	r1, #4
 80084d2:	6860      	ldr	r0, [r4, #4]
 80084d4:	f7ff ff82 	bl	80083dc <std>
 80084d8:	68a0      	ldr	r0, [r4, #8]
 80084da:	2201      	movs	r2, #1
 80084dc:	2109      	movs	r1, #9
 80084de:	f7ff ff7d 	bl	80083dc <std>
 80084e2:	68e0      	ldr	r0, [r4, #12]
 80084e4:	2202      	movs	r2, #2
 80084e6:	2112      	movs	r1, #18
 80084e8:	f7ff ff78 	bl	80083dc <std>
 80084ec:	2301      	movs	r3, #1
 80084ee:	61a3      	str	r3, [r4, #24]
 80084f0:	e7d2      	b.n	8008498 <__sinit+0xc>
 80084f2:	bf00      	nop
 80084f4:	0800a570 	.word	0x0800a570
 80084f8:	08008425 	.word	0x08008425

080084fc <__sfp>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	4607      	mov	r7, r0
 8008500:	f7ff ffac 	bl	800845c <__sfp_lock_acquire>
 8008504:	4b1e      	ldr	r3, [pc, #120]	; (8008580 <__sfp+0x84>)
 8008506:	681e      	ldr	r6, [r3, #0]
 8008508:	69b3      	ldr	r3, [r6, #24]
 800850a:	b913      	cbnz	r3, 8008512 <__sfp+0x16>
 800850c:	4630      	mov	r0, r6
 800850e:	f7ff ffbd 	bl	800848c <__sinit>
 8008512:	3648      	adds	r6, #72	; 0x48
 8008514:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008518:	3b01      	subs	r3, #1
 800851a:	d503      	bpl.n	8008524 <__sfp+0x28>
 800851c:	6833      	ldr	r3, [r6, #0]
 800851e:	b30b      	cbz	r3, 8008564 <__sfp+0x68>
 8008520:	6836      	ldr	r6, [r6, #0]
 8008522:	e7f7      	b.n	8008514 <__sfp+0x18>
 8008524:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008528:	b9d5      	cbnz	r5, 8008560 <__sfp+0x64>
 800852a:	4b16      	ldr	r3, [pc, #88]	; (8008584 <__sfp+0x88>)
 800852c:	60e3      	str	r3, [r4, #12]
 800852e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008532:	6665      	str	r5, [r4, #100]	; 0x64
 8008534:	f000 fbba 	bl	8008cac <__retarget_lock_init_recursive>
 8008538:	f7ff ff96 	bl	8008468 <__sfp_lock_release>
 800853c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008540:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008544:	6025      	str	r5, [r4, #0]
 8008546:	61a5      	str	r5, [r4, #24]
 8008548:	2208      	movs	r2, #8
 800854a:	4629      	mov	r1, r5
 800854c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008550:	f7fd fb5e 	bl	8005c10 <memset>
 8008554:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008558:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800855c:	4620      	mov	r0, r4
 800855e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008560:	3468      	adds	r4, #104	; 0x68
 8008562:	e7d9      	b.n	8008518 <__sfp+0x1c>
 8008564:	2104      	movs	r1, #4
 8008566:	4638      	mov	r0, r7
 8008568:	f7ff ff62 	bl	8008430 <__sfmoreglue>
 800856c:	4604      	mov	r4, r0
 800856e:	6030      	str	r0, [r6, #0]
 8008570:	2800      	cmp	r0, #0
 8008572:	d1d5      	bne.n	8008520 <__sfp+0x24>
 8008574:	f7ff ff78 	bl	8008468 <__sfp_lock_release>
 8008578:	230c      	movs	r3, #12
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	e7ee      	b.n	800855c <__sfp+0x60>
 800857e:	bf00      	nop
 8008580:	0800a570 	.word	0x0800a570
 8008584:	ffff0001 	.word	0xffff0001

08008588 <_fwalk_reent>:
 8008588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800858c:	4606      	mov	r6, r0
 800858e:	4688      	mov	r8, r1
 8008590:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008594:	2700      	movs	r7, #0
 8008596:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800859a:	f1b9 0901 	subs.w	r9, r9, #1
 800859e:	d505      	bpl.n	80085ac <_fwalk_reent+0x24>
 80085a0:	6824      	ldr	r4, [r4, #0]
 80085a2:	2c00      	cmp	r4, #0
 80085a4:	d1f7      	bne.n	8008596 <_fwalk_reent+0xe>
 80085a6:	4638      	mov	r0, r7
 80085a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ac:	89ab      	ldrh	r3, [r5, #12]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d907      	bls.n	80085c2 <_fwalk_reent+0x3a>
 80085b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085b6:	3301      	adds	r3, #1
 80085b8:	d003      	beq.n	80085c2 <_fwalk_reent+0x3a>
 80085ba:	4629      	mov	r1, r5
 80085bc:	4630      	mov	r0, r6
 80085be:	47c0      	blx	r8
 80085c0:	4307      	orrs	r7, r0
 80085c2:	3568      	adds	r5, #104	; 0x68
 80085c4:	e7e9      	b.n	800859a <_fwalk_reent+0x12>

080085c6 <rshift>:
 80085c6:	6903      	ldr	r3, [r0, #16]
 80085c8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80085cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085d0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80085d4:	f100 0414 	add.w	r4, r0, #20
 80085d8:	dd45      	ble.n	8008666 <rshift+0xa0>
 80085da:	f011 011f 	ands.w	r1, r1, #31
 80085de:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80085e2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80085e6:	d10c      	bne.n	8008602 <rshift+0x3c>
 80085e8:	f100 0710 	add.w	r7, r0, #16
 80085ec:	4629      	mov	r1, r5
 80085ee:	42b1      	cmp	r1, r6
 80085f0:	d334      	bcc.n	800865c <rshift+0x96>
 80085f2:	1a9b      	subs	r3, r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	1eea      	subs	r2, r5, #3
 80085f8:	4296      	cmp	r6, r2
 80085fa:	bf38      	it	cc
 80085fc:	2300      	movcc	r3, #0
 80085fe:	4423      	add	r3, r4
 8008600:	e015      	b.n	800862e <rshift+0x68>
 8008602:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008606:	f1c1 0820 	rsb	r8, r1, #32
 800860a:	40cf      	lsrs	r7, r1
 800860c:	f105 0e04 	add.w	lr, r5, #4
 8008610:	46a1      	mov	r9, r4
 8008612:	4576      	cmp	r6, lr
 8008614:	46f4      	mov	ip, lr
 8008616:	d815      	bhi.n	8008644 <rshift+0x7e>
 8008618:	1a9a      	subs	r2, r3, r2
 800861a:	0092      	lsls	r2, r2, #2
 800861c:	3a04      	subs	r2, #4
 800861e:	3501      	adds	r5, #1
 8008620:	42ae      	cmp	r6, r5
 8008622:	bf38      	it	cc
 8008624:	2200      	movcc	r2, #0
 8008626:	18a3      	adds	r3, r4, r2
 8008628:	50a7      	str	r7, [r4, r2]
 800862a:	b107      	cbz	r7, 800862e <rshift+0x68>
 800862c:	3304      	adds	r3, #4
 800862e:	1b1a      	subs	r2, r3, r4
 8008630:	42a3      	cmp	r3, r4
 8008632:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008636:	bf08      	it	eq
 8008638:	2300      	moveq	r3, #0
 800863a:	6102      	str	r2, [r0, #16]
 800863c:	bf08      	it	eq
 800863e:	6143      	streq	r3, [r0, #20]
 8008640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008644:	f8dc c000 	ldr.w	ip, [ip]
 8008648:	fa0c fc08 	lsl.w	ip, ip, r8
 800864c:	ea4c 0707 	orr.w	r7, ip, r7
 8008650:	f849 7b04 	str.w	r7, [r9], #4
 8008654:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008658:	40cf      	lsrs	r7, r1
 800865a:	e7da      	b.n	8008612 <rshift+0x4c>
 800865c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008660:	f847 cf04 	str.w	ip, [r7, #4]!
 8008664:	e7c3      	b.n	80085ee <rshift+0x28>
 8008666:	4623      	mov	r3, r4
 8008668:	e7e1      	b.n	800862e <rshift+0x68>

0800866a <__hexdig_fun>:
 800866a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800866e:	2b09      	cmp	r3, #9
 8008670:	d802      	bhi.n	8008678 <__hexdig_fun+0xe>
 8008672:	3820      	subs	r0, #32
 8008674:	b2c0      	uxtb	r0, r0
 8008676:	4770      	bx	lr
 8008678:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800867c:	2b05      	cmp	r3, #5
 800867e:	d801      	bhi.n	8008684 <__hexdig_fun+0x1a>
 8008680:	3847      	subs	r0, #71	; 0x47
 8008682:	e7f7      	b.n	8008674 <__hexdig_fun+0xa>
 8008684:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008688:	2b05      	cmp	r3, #5
 800868a:	d801      	bhi.n	8008690 <__hexdig_fun+0x26>
 800868c:	3827      	subs	r0, #39	; 0x27
 800868e:	e7f1      	b.n	8008674 <__hexdig_fun+0xa>
 8008690:	2000      	movs	r0, #0
 8008692:	4770      	bx	lr

08008694 <__gethex>:
 8008694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008698:	ed2d 8b02 	vpush	{d8}
 800869c:	b089      	sub	sp, #36	; 0x24
 800869e:	ee08 0a10 	vmov	s16, r0
 80086a2:	9304      	str	r3, [sp, #16]
 80086a4:	4bb4      	ldr	r3, [pc, #720]	; (8008978 <__gethex+0x2e4>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	4618      	mov	r0, r3
 80086ac:	468b      	mov	fp, r1
 80086ae:	4690      	mov	r8, r2
 80086b0:	f7f7 fd9e 	bl	80001f0 <strlen>
 80086b4:	9b01      	ldr	r3, [sp, #4]
 80086b6:	f8db 2000 	ldr.w	r2, [fp]
 80086ba:	4403      	add	r3, r0
 80086bc:	4682      	mov	sl, r0
 80086be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80086c2:	9305      	str	r3, [sp, #20]
 80086c4:	1c93      	adds	r3, r2, #2
 80086c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80086ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80086ce:	32fe      	adds	r2, #254	; 0xfe
 80086d0:	18d1      	adds	r1, r2, r3
 80086d2:	461f      	mov	r7, r3
 80086d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80086d8:	9100      	str	r1, [sp, #0]
 80086da:	2830      	cmp	r0, #48	; 0x30
 80086dc:	d0f8      	beq.n	80086d0 <__gethex+0x3c>
 80086de:	f7ff ffc4 	bl	800866a <__hexdig_fun>
 80086e2:	4604      	mov	r4, r0
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d13a      	bne.n	800875e <__gethex+0xca>
 80086e8:	9901      	ldr	r1, [sp, #4]
 80086ea:	4652      	mov	r2, sl
 80086ec:	4638      	mov	r0, r7
 80086ee:	f001 fbd2 	bl	8009e96 <strncmp>
 80086f2:	4605      	mov	r5, r0
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d168      	bne.n	80087ca <__gethex+0x136>
 80086f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80086fc:	eb07 060a 	add.w	r6, r7, sl
 8008700:	f7ff ffb3 	bl	800866a <__hexdig_fun>
 8008704:	2800      	cmp	r0, #0
 8008706:	d062      	beq.n	80087ce <__gethex+0x13a>
 8008708:	4633      	mov	r3, r6
 800870a:	7818      	ldrb	r0, [r3, #0]
 800870c:	2830      	cmp	r0, #48	; 0x30
 800870e:	461f      	mov	r7, r3
 8008710:	f103 0301 	add.w	r3, r3, #1
 8008714:	d0f9      	beq.n	800870a <__gethex+0x76>
 8008716:	f7ff ffa8 	bl	800866a <__hexdig_fun>
 800871a:	2301      	movs	r3, #1
 800871c:	fab0 f480 	clz	r4, r0
 8008720:	0964      	lsrs	r4, r4, #5
 8008722:	4635      	mov	r5, r6
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	463a      	mov	r2, r7
 8008728:	4616      	mov	r6, r2
 800872a:	3201      	adds	r2, #1
 800872c:	7830      	ldrb	r0, [r6, #0]
 800872e:	f7ff ff9c 	bl	800866a <__hexdig_fun>
 8008732:	2800      	cmp	r0, #0
 8008734:	d1f8      	bne.n	8008728 <__gethex+0x94>
 8008736:	9901      	ldr	r1, [sp, #4]
 8008738:	4652      	mov	r2, sl
 800873a:	4630      	mov	r0, r6
 800873c:	f001 fbab 	bl	8009e96 <strncmp>
 8008740:	b980      	cbnz	r0, 8008764 <__gethex+0xd0>
 8008742:	b94d      	cbnz	r5, 8008758 <__gethex+0xc4>
 8008744:	eb06 050a 	add.w	r5, r6, sl
 8008748:	462a      	mov	r2, r5
 800874a:	4616      	mov	r6, r2
 800874c:	3201      	adds	r2, #1
 800874e:	7830      	ldrb	r0, [r6, #0]
 8008750:	f7ff ff8b 	bl	800866a <__hexdig_fun>
 8008754:	2800      	cmp	r0, #0
 8008756:	d1f8      	bne.n	800874a <__gethex+0xb6>
 8008758:	1bad      	subs	r5, r5, r6
 800875a:	00ad      	lsls	r5, r5, #2
 800875c:	e004      	b.n	8008768 <__gethex+0xd4>
 800875e:	2400      	movs	r4, #0
 8008760:	4625      	mov	r5, r4
 8008762:	e7e0      	b.n	8008726 <__gethex+0x92>
 8008764:	2d00      	cmp	r5, #0
 8008766:	d1f7      	bne.n	8008758 <__gethex+0xc4>
 8008768:	7833      	ldrb	r3, [r6, #0]
 800876a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800876e:	2b50      	cmp	r3, #80	; 0x50
 8008770:	d13b      	bne.n	80087ea <__gethex+0x156>
 8008772:	7873      	ldrb	r3, [r6, #1]
 8008774:	2b2b      	cmp	r3, #43	; 0x2b
 8008776:	d02c      	beq.n	80087d2 <__gethex+0x13e>
 8008778:	2b2d      	cmp	r3, #45	; 0x2d
 800877a:	d02e      	beq.n	80087da <__gethex+0x146>
 800877c:	1c71      	adds	r1, r6, #1
 800877e:	f04f 0900 	mov.w	r9, #0
 8008782:	7808      	ldrb	r0, [r1, #0]
 8008784:	f7ff ff71 	bl	800866a <__hexdig_fun>
 8008788:	1e43      	subs	r3, r0, #1
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b18      	cmp	r3, #24
 800878e:	d82c      	bhi.n	80087ea <__gethex+0x156>
 8008790:	f1a0 0210 	sub.w	r2, r0, #16
 8008794:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008798:	f7ff ff67 	bl	800866a <__hexdig_fun>
 800879c:	1e43      	subs	r3, r0, #1
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b18      	cmp	r3, #24
 80087a2:	d91d      	bls.n	80087e0 <__gethex+0x14c>
 80087a4:	f1b9 0f00 	cmp.w	r9, #0
 80087a8:	d000      	beq.n	80087ac <__gethex+0x118>
 80087aa:	4252      	negs	r2, r2
 80087ac:	4415      	add	r5, r2
 80087ae:	f8cb 1000 	str.w	r1, [fp]
 80087b2:	b1e4      	cbz	r4, 80087ee <__gethex+0x15a>
 80087b4:	9b00      	ldr	r3, [sp, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	bf14      	ite	ne
 80087ba:	2700      	movne	r7, #0
 80087bc:	2706      	moveq	r7, #6
 80087be:	4638      	mov	r0, r7
 80087c0:	b009      	add	sp, #36	; 0x24
 80087c2:	ecbd 8b02 	vpop	{d8}
 80087c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ca:	463e      	mov	r6, r7
 80087cc:	4625      	mov	r5, r4
 80087ce:	2401      	movs	r4, #1
 80087d0:	e7ca      	b.n	8008768 <__gethex+0xd4>
 80087d2:	f04f 0900 	mov.w	r9, #0
 80087d6:	1cb1      	adds	r1, r6, #2
 80087d8:	e7d3      	b.n	8008782 <__gethex+0xee>
 80087da:	f04f 0901 	mov.w	r9, #1
 80087de:	e7fa      	b.n	80087d6 <__gethex+0x142>
 80087e0:	230a      	movs	r3, #10
 80087e2:	fb03 0202 	mla	r2, r3, r2, r0
 80087e6:	3a10      	subs	r2, #16
 80087e8:	e7d4      	b.n	8008794 <__gethex+0x100>
 80087ea:	4631      	mov	r1, r6
 80087ec:	e7df      	b.n	80087ae <__gethex+0x11a>
 80087ee:	1bf3      	subs	r3, r6, r7
 80087f0:	3b01      	subs	r3, #1
 80087f2:	4621      	mov	r1, r4
 80087f4:	2b07      	cmp	r3, #7
 80087f6:	dc0b      	bgt.n	8008810 <__gethex+0x17c>
 80087f8:	ee18 0a10 	vmov	r0, s16
 80087fc:	f000 fa82 	bl	8008d04 <_Balloc>
 8008800:	4604      	mov	r4, r0
 8008802:	b940      	cbnz	r0, 8008816 <__gethex+0x182>
 8008804:	4b5d      	ldr	r3, [pc, #372]	; (800897c <__gethex+0x2e8>)
 8008806:	4602      	mov	r2, r0
 8008808:	21de      	movs	r1, #222	; 0xde
 800880a:	485d      	ldr	r0, [pc, #372]	; (8008980 <__gethex+0x2ec>)
 800880c:	f001 fc38 	bl	800a080 <__assert_func>
 8008810:	3101      	adds	r1, #1
 8008812:	105b      	asrs	r3, r3, #1
 8008814:	e7ee      	b.n	80087f4 <__gethex+0x160>
 8008816:	f100 0914 	add.w	r9, r0, #20
 800881a:	f04f 0b00 	mov.w	fp, #0
 800881e:	f1ca 0301 	rsb	r3, sl, #1
 8008822:	f8cd 9008 	str.w	r9, [sp, #8]
 8008826:	f8cd b000 	str.w	fp, [sp]
 800882a:	9306      	str	r3, [sp, #24]
 800882c:	42b7      	cmp	r7, r6
 800882e:	d340      	bcc.n	80088b2 <__gethex+0x21e>
 8008830:	9802      	ldr	r0, [sp, #8]
 8008832:	9b00      	ldr	r3, [sp, #0]
 8008834:	f840 3b04 	str.w	r3, [r0], #4
 8008838:	eba0 0009 	sub.w	r0, r0, r9
 800883c:	1080      	asrs	r0, r0, #2
 800883e:	0146      	lsls	r6, r0, #5
 8008840:	6120      	str	r0, [r4, #16]
 8008842:	4618      	mov	r0, r3
 8008844:	f000 fb50 	bl	8008ee8 <__hi0bits>
 8008848:	1a30      	subs	r0, r6, r0
 800884a:	f8d8 6000 	ldr.w	r6, [r8]
 800884e:	42b0      	cmp	r0, r6
 8008850:	dd63      	ble.n	800891a <__gethex+0x286>
 8008852:	1b87      	subs	r7, r0, r6
 8008854:	4639      	mov	r1, r7
 8008856:	4620      	mov	r0, r4
 8008858:	f000 fef4 	bl	8009644 <__any_on>
 800885c:	4682      	mov	sl, r0
 800885e:	b1a8      	cbz	r0, 800888c <__gethex+0x1f8>
 8008860:	1e7b      	subs	r3, r7, #1
 8008862:	1159      	asrs	r1, r3, #5
 8008864:	f003 021f 	and.w	r2, r3, #31
 8008868:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800886c:	f04f 0a01 	mov.w	sl, #1
 8008870:	fa0a f202 	lsl.w	r2, sl, r2
 8008874:	420a      	tst	r2, r1
 8008876:	d009      	beq.n	800888c <__gethex+0x1f8>
 8008878:	4553      	cmp	r3, sl
 800887a:	dd05      	ble.n	8008888 <__gethex+0x1f4>
 800887c:	1eb9      	subs	r1, r7, #2
 800887e:	4620      	mov	r0, r4
 8008880:	f000 fee0 	bl	8009644 <__any_on>
 8008884:	2800      	cmp	r0, #0
 8008886:	d145      	bne.n	8008914 <__gethex+0x280>
 8008888:	f04f 0a02 	mov.w	sl, #2
 800888c:	4639      	mov	r1, r7
 800888e:	4620      	mov	r0, r4
 8008890:	f7ff fe99 	bl	80085c6 <rshift>
 8008894:	443d      	add	r5, r7
 8008896:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800889a:	42ab      	cmp	r3, r5
 800889c:	da4c      	bge.n	8008938 <__gethex+0x2a4>
 800889e:	ee18 0a10 	vmov	r0, s16
 80088a2:	4621      	mov	r1, r4
 80088a4:	f000 fa6e 	bl	8008d84 <_Bfree>
 80088a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80088aa:	2300      	movs	r3, #0
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	27a3      	movs	r7, #163	; 0xa3
 80088b0:	e785      	b.n	80087be <__gethex+0x12a>
 80088b2:	1e73      	subs	r3, r6, #1
 80088b4:	9a05      	ldr	r2, [sp, #20]
 80088b6:	9303      	str	r3, [sp, #12]
 80088b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80088bc:	4293      	cmp	r3, r2
 80088be:	d019      	beq.n	80088f4 <__gethex+0x260>
 80088c0:	f1bb 0f20 	cmp.w	fp, #32
 80088c4:	d107      	bne.n	80088d6 <__gethex+0x242>
 80088c6:	9b02      	ldr	r3, [sp, #8]
 80088c8:	9a00      	ldr	r2, [sp, #0]
 80088ca:	f843 2b04 	str.w	r2, [r3], #4
 80088ce:	9302      	str	r3, [sp, #8]
 80088d0:	2300      	movs	r3, #0
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	469b      	mov	fp, r3
 80088d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80088da:	f7ff fec6 	bl	800866a <__hexdig_fun>
 80088de:	9b00      	ldr	r3, [sp, #0]
 80088e0:	f000 000f 	and.w	r0, r0, #15
 80088e4:	fa00 f00b 	lsl.w	r0, r0, fp
 80088e8:	4303      	orrs	r3, r0
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	f10b 0b04 	add.w	fp, fp, #4
 80088f0:	9b03      	ldr	r3, [sp, #12]
 80088f2:	e00d      	b.n	8008910 <__gethex+0x27c>
 80088f4:	9b03      	ldr	r3, [sp, #12]
 80088f6:	9a06      	ldr	r2, [sp, #24]
 80088f8:	4413      	add	r3, r2
 80088fa:	42bb      	cmp	r3, r7
 80088fc:	d3e0      	bcc.n	80088c0 <__gethex+0x22c>
 80088fe:	4618      	mov	r0, r3
 8008900:	9901      	ldr	r1, [sp, #4]
 8008902:	9307      	str	r3, [sp, #28]
 8008904:	4652      	mov	r2, sl
 8008906:	f001 fac6 	bl	8009e96 <strncmp>
 800890a:	9b07      	ldr	r3, [sp, #28]
 800890c:	2800      	cmp	r0, #0
 800890e:	d1d7      	bne.n	80088c0 <__gethex+0x22c>
 8008910:	461e      	mov	r6, r3
 8008912:	e78b      	b.n	800882c <__gethex+0x198>
 8008914:	f04f 0a03 	mov.w	sl, #3
 8008918:	e7b8      	b.n	800888c <__gethex+0x1f8>
 800891a:	da0a      	bge.n	8008932 <__gethex+0x29e>
 800891c:	1a37      	subs	r7, r6, r0
 800891e:	4621      	mov	r1, r4
 8008920:	ee18 0a10 	vmov	r0, s16
 8008924:	463a      	mov	r2, r7
 8008926:	f000 fc49 	bl	80091bc <__lshift>
 800892a:	1bed      	subs	r5, r5, r7
 800892c:	4604      	mov	r4, r0
 800892e:	f100 0914 	add.w	r9, r0, #20
 8008932:	f04f 0a00 	mov.w	sl, #0
 8008936:	e7ae      	b.n	8008896 <__gethex+0x202>
 8008938:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800893c:	42a8      	cmp	r0, r5
 800893e:	dd72      	ble.n	8008a26 <__gethex+0x392>
 8008940:	1b45      	subs	r5, r0, r5
 8008942:	42ae      	cmp	r6, r5
 8008944:	dc36      	bgt.n	80089b4 <__gethex+0x320>
 8008946:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800894a:	2b02      	cmp	r3, #2
 800894c:	d02a      	beq.n	80089a4 <__gethex+0x310>
 800894e:	2b03      	cmp	r3, #3
 8008950:	d02c      	beq.n	80089ac <__gethex+0x318>
 8008952:	2b01      	cmp	r3, #1
 8008954:	d11c      	bne.n	8008990 <__gethex+0x2fc>
 8008956:	42ae      	cmp	r6, r5
 8008958:	d11a      	bne.n	8008990 <__gethex+0x2fc>
 800895a:	2e01      	cmp	r6, #1
 800895c:	d112      	bne.n	8008984 <__gethex+0x2f0>
 800895e:	9a04      	ldr	r2, [sp, #16]
 8008960:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008964:	6013      	str	r3, [r2, #0]
 8008966:	2301      	movs	r3, #1
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	f8c9 3000 	str.w	r3, [r9]
 800896e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008970:	2762      	movs	r7, #98	; 0x62
 8008972:	601c      	str	r4, [r3, #0]
 8008974:	e723      	b.n	80087be <__gethex+0x12a>
 8008976:	bf00      	nop
 8008978:	0800a85c 	.word	0x0800a85c
 800897c:	0800a780 	.word	0x0800a780
 8008980:	0800a7f4 	.word	0x0800a7f4
 8008984:	1e71      	subs	r1, r6, #1
 8008986:	4620      	mov	r0, r4
 8008988:	f000 fe5c 	bl	8009644 <__any_on>
 800898c:	2800      	cmp	r0, #0
 800898e:	d1e6      	bne.n	800895e <__gethex+0x2ca>
 8008990:	ee18 0a10 	vmov	r0, s16
 8008994:	4621      	mov	r1, r4
 8008996:	f000 f9f5 	bl	8008d84 <_Bfree>
 800899a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800899c:	2300      	movs	r3, #0
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	2750      	movs	r7, #80	; 0x50
 80089a2:	e70c      	b.n	80087be <__gethex+0x12a>
 80089a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1f2      	bne.n	8008990 <__gethex+0x2fc>
 80089aa:	e7d8      	b.n	800895e <__gethex+0x2ca>
 80089ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1d5      	bne.n	800895e <__gethex+0x2ca>
 80089b2:	e7ed      	b.n	8008990 <__gethex+0x2fc>
 80089b4:	1e6f      	subs	r7, r5, #1
 80089b6:	f1ba 0f00 	cmp.w	sl, #0
 80089ba:	d131      	bne.n	8008a20 <__gethex+0x38c>
 80089bc:	b127      	cbz	r7, 80089c8 <__gethex+0x334>
 80089be:	4639      	mov	r1, r7
 80089c0:	4620      	mov	r0, r4
 80089c2:	f000 fe3f 	bl	8009644 <__any_on>
 80089c6:	4682      	mov	sl, r0
 80089c8:	117b      	asrs	r3, r7, #5
 80089ca:	2101      	movs	r1, #1
 80089cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80089d0:	f007 071f 	and.w	r7, r7, #31
 80089d4:	fa01 f707 	lsl.w	r7, r1, r7
 80089d8:	421f      	tst	r7, r3
 80089da:	4629      	mov	r1, r5
 80089dc:	4620      	mov	r0, r4
 80089de:	bf18      	it	ne
 80089e0:	f04a 0a02 	orrne.w	sl, sl, #2
 80089e4:	1b76      	subs	r6, r6, r5
 80089e6:	f7ff fdee 	bl	80085c6 <rshift>
 80089ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80089ee:	2702      	movs	r7, #2
 80089f0:	f1ba 0f00 	cmp.w	sl, #0
 80089f4:	d048      	beq.n	8008a88 <__gethex+0x3f4>
 80089f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d015      	beq.n	8008a2a <__gethex+0x396>
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d017      	beq.n	8008a32 <__gethex+0x39e>
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d109      	bne.n	8008a1a <__gethex+0x386>
 8008a06:	f01a 0f02 	tst.w	sl, #2
 8008a0a:	d006      	beq.n	8008a1a <__gethex+0x386>
 8008a0c:	f8d9 0000 	ldr.w	r0, [r9]
 8008a10:	ea4a 0a00 	orr.w	sl, sl, r0
 8008a14:	f01a 0f01 	tst.w	sl, #1
 8008a18:	d10e      	bne.n	8008a38 <__gethex+0x3a4>
 8008a1a:	f047 0710 	orr.w	r7, r7, #16
 8008a1e:	e033      	b.n	8008a88 <__gethex+0x3f4>
 8008a20:	f04f 0a01 	mov.w	sl, #1
 8008a24:	e7d0      	b.n	80089c8 <__gethex+0x334>
 8008a26:	2701      	movs	r7, #1
 8008a28:	e7e2      	b.n	80089f0 <__gethex+0x35c>
 8008a2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a2c:	f1c3 0301 	rsb	r3, r3, #1
 8008a30:	9315      	str	r3, [sp, #84]	; 0x54
 8008a32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d0f0      	beq.n	8008a1a <__gethex+0x386>
 8008a38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a3c:	f104 0314 	add.w	r3, r4, #20
 8008a40:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008a44:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008a48:	f04f 0c00 	mov.w	ip, #0
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a52:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008a56:	d01c      	beq.n	8008a92 <__gethex+0x3fe>
 8008a58:	3201      	adds	r2, #1
 8008a5a:	6002      	str	r2, [r0, #0]
 8008a5c:	2f02      	cmp	r7, #2
 8008a5e:	f104 0314 	add.w	r3, r4, #20
 8008a62:	d13f      	bne.n	8008ae4 <__gethex+0x450>
 8008a64:	f8d8 2000 	ldr.w	r2, [r8]
 8008a68:	3a01      	subs	r2, #1
 8008a6a:	42b2      	cmp	r2, r6
 8008a6c:	d10a      	bne.n	8008a84 <__gethex+0x3f0>
 8008a6e:	1171      	asrs	r1, r6, #5
 8008a70:	2201      	movs	r2, #1
 8008a72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a76:	f006 061f 	and.w	r6, r6, #31
 8008a7a:	fa02 f606 	lsl.w	r6, r2, r6
 8008a7e:	421e      	tst	r6, r3
 8008a80:	bf18      	it	ne
 8008a82:	4617      	movne	r7, r2
 8008a84:	f047 0720 	orr.w	r7, r7, #32
 8008a88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a8a:	601c      	str	r4, [r3, #0]
 8008a8c:	9b04      	ldr	r3, [sp, #16]
 8008a8e:	601d      	str	r5, [r3, #0]
 8008a90:	e695      	b.n	80087be <__gethex+0x12a>
 8008a92:	4299      	cmp	r1, r3
 8008a94:	f843 cc04 	str.w	ip, [r3, #-4]
 8008a98:	d8d8      	bhi.n	8008a4c <__gethex+0x3b8>
 8008a9a:	68a3      	ldr	r3, [r4, #8]
 8008a9c:	459b      	cmp	fp, r3
 8008a9e:	db19      	blt.n	8008ad4 <__gethex+0x440>
 8008aa0:	6861      	ldr	r1, [r4, #4]
 8008aa2:	ee18 0a10 	vmov	r0, s16
 8008aa6:	3101      	adds	r1, #1
 8008aa8:	f000 f92c 	bl	8008d04 <_Balloc>
 8008aac:	4681      	mov	r9, r0
 8008aae:	b918      	cbnz	r0, 8008ab8 <__gethex+0x424>
 8008ab0:	4b1a      	ldr	r3, [pc, #104]	; (8008b1c <__gethex+0x488>)
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	2184      	movs	r1, #132	; 0x84
 8008ab6:	e6a8      	b.n	800880a <__gethex+0x176>
 8008ab8:	6922      	ldr	r2, [r4, #16]
 8008aba:	3202      	adds	r2, #2
 8008abc:	f104 010c 	add.w	r1, r4, #12
 8008ac0:	0092      	lsls	r2, r2, #2
 8008ac2:	300c      	adds	r0, #12
 8008ac4:	f000 f910 	bl	8008ce8 <memcpy>
 8008ac8:	4621      	mov	r1, r4
 8008aca:	ee18 0a10 	vmov	r0, s16
 8008ace:	f000 f959 	bl	8008d84 <_Bfree>
 8008ad2:	464c      	mov	r4, r9
 8008ad4:	6923      	ldr	r3, [r4, #16]
 8008ad6:	1c5a      	adds	r2, r3, #1
 8008ad8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008adc:	6122      	str	r2, [r4, #16]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	615a      	str	r2, [r3, #20]
 8008ae2:	e7bb      	b.n	8008a5c <__gethex+0x3c8>
 8008ae4:	6922      	ldr	r2, [r4, #16]
 8008ae6:	455a      	cmp	r2, fp
 8008ae8:	dd0b      	ble.n	8008b02 <__gethex+0x46e>
 8008aea:	2101      	movs	r1, #1
 8008aec:	4620      	mov	r0, r4
 8008aee:	f7ff fd6a 	bl	80085c6 <rshift>
 8008af2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008af6:	3501      	adds	r5, #1
 8008af8:	42ab      	cmp	r3, r5
 8008afa:	f6ff aed0 	blt.w	800889e <__gethex+0x20a>
 8008afe:	2701      	movs	r7, #1
 8008b00:	e7c0      	b.n	8008a84 <__gethex+0x3f0>
 8008b02:	f016 061f 	ands.w	r6, r6, #31
 8008b06:	d0fa      	beq.n	8008afe <__gethex+0x46a>
 8008b08:	4453      	add	r3, sl
 8008b0a:	f1c6 0620 	rsb	r6, r6, #32
 8008b0e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008b12:	f000 f9e9 	bl	8008ee8 <__hi0bits>
 8008b16:	42b0      	cmp	r0, r6
 8008b18:	dbe7      	blt.n	8008aea <__gethex+0x456>
 8008b1a:	e7f0      	b.n	8008afe <__gethex+0x46a>
 8008b1c:	0800a780 	.word	0x0800a780

08008b20 <L_shift>:
 8008b20:	f1c2 0208 	rsb	r2, r2, #8
 8008b24:	0092      	lsls	r2, r2, #2
 8008b26:	b570      	push	{r4, r5, r6, lr}
 8008b28:	f1c2 0620 	rsb	r6, r2, #32
 8008b2c:	6843      	ldr	r3, [r0, #4]
 8008b2e:	6804      	ldr	r4, [r0, #0]
 8008b30:	fa03 f506 	lsl.w	r5, r3, r6
 8008b34:	432c      	orrs	r4, r5
 8008b36:	40d3      	lsrs	r3, r2
 8008b38:	6004      	str	r4, [r0, #0]
 8008b3a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b3e:	4288      	cmp	r0, r1
 8008b40:	d3f4      	bcc.n	8008b2c <L_shift+0xc>
 8008b42:	bd70      	pop	{r4, r5, r6, pc}

08008b44 <__match>:
 8008b44:	b530      	push	{r4, r5, lr}
 8008b46:	6803      	ldr	r3, [r0, #0]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b4e:	b914      	cbnz	r4, 8008b56 <__match+0x12>
 8008b50:	6003      	str	r3, [r0, #0]
 8008b52:	2001      	movs	r0, #1
 8008b54:	bd30      	pop	{r4, r5, pc}
 8008b56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008b5e:	2d19      	cmp	r5, #25
 8008b60:	bf98      	it	ls
 8008b62:	3220      	addls	r2, #32
 8008b64:	42a2      	cmp	r2, r4
 8008b66:	d0f0      	beq.n	8008b4a <__match+0x6>
 8008b68:	2000      	movs	r0, #0
 8008b6a:	e7f3      	b.n	8008b54 <__match+0x10>

08008b6c <__hexnan>:
 8008b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b70:	680b      	ldr	r3, [r1, #0]
 8008b72:	115e      	asrs	r6, r3, #5
 8008b74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008b78:	f013 031f 	ands.w	r3, r3, #31
 8008b7c:	b087      	sub	sp, #28
 8008b7e:	bf18      	it	ne
 8008b80:	3604      	addne	r6, #4
 8008b82:	2500      	movs	r5, #0
 8008b84:	1f37      	subs	r7, r6, #4
 8008b86:	4690      	mov	r8, r2
 8008b88:	6802      	ldr	r2, [r0, #0]
 8008b8a:	9301      	str	r3, [sp, #4]
 8008b8c:	4682      	mov	sl, r0
 8008b8e:	f846 5c04 	str.w	r5, [r6, #-4]
 8008b92:	46b9      	mov	r9, r7
 8008b94:	463c      	mov	r4, r7
 8008b96:	9502      	str	r5, [sp, #8]
 8008b98:	46ab      	mov	fp, r5
 8008b9a:	7851      	ldrb	r1, [r2, #1]
 8008b9c:	1c53      	adds	r3, r2, #1
 8008b9e:	9303      	str	r3, [sp, #12]
 8008ba0:	b341      	cbz	r1, 8008bf4 <__hexnan+0x88>
 8008ba2:	4608      	mov	r0, r1
 8008ba4:	9205      	str	r2, [sp, #20]
 8008ba6:	9104      	str	r1, [sp, #16]
 8008ba8:	f7ff fd5f 	bl	800866a <__hexdig_fun>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	d14f      	bne.n	8008c50 <__hexnan+0xe4>
 8008bb0:	9904      	ldr	r1, [sp, #16]
 8008bb2:	9a05      	ldr	r2, [sp, #20]
 8008bb4:	2920      	cmp	r1, #32
 8008bb6:	d818      	bhi.n	8008bea <__hexnan+0x7e>
 8008bb8:	9b02      	ldr	r3, [sp, #8]
 8008bba:	459b      	cmp	fp, r3
 8008bbc:	dd13      	ble.n	8008be6 <__hexnan+0x7a>
 8008bbe:	454c      	cmp	r4, r9
 8008bc0:	d206      	bcs.n	8008bd0 <__hexnan+0x64>
 8008bc2:	2d07      	cmp	r5, #7
 8008bc4:	dc04      	bgt.n	8008bd0 <__hexnan+0x64>
 8008bc6:	462a      	mov	r2, r5
 8008bc8:	4649      	mov	r1, r9
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f7ff ffa8 	bl	8008b20 <L_shift>
 8008bd0:	4544      	cmp	r4, r8
 8008bd2:	d950      	bls.n	8008c76 <__hexnan+0x10a>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f1a4 0904 	sub.w	r9, r4, #4
 8008bda:	f844 3c04 	str.w	r3, [r4, #-4]
 8008bde:	f8cd b008 	str.w	fp, [sp, #8]
 8008be2:	464c      	mov	r4, r9
 8008be4:	461d      	mov	r5, r3
 8008be6:	9a03      	ldr	r2, [sp, #12]
 8008be8:	e7d7      	b.n	8008b9a <__hexnan+0x2e>
 8008bea:	2929      	cmp	r1, #41	; 0x29
 8008bec:	d156      	bne.n	8008c9c <__hexnan+0x130>
 8008bee:	3202      	adds	r2, #2
 8008bf0:	f8ca 2000 	str.w	r2, [sl]
 8008bf4:	f1bb 0f00 	cmp.w	fp, #0
 8008bf8:	d050      	beq.n	8008c9c <__hexnan+0x130>
 8008bfa:	454c      	cmp	r4, r9
 8008bfc:	d206      	bcs.n	8008c0c <__hexnan+0xa0>
 8008bfe:	2d07      	cmp	r5, #7
 8008c00:	dc04      	bgt.n	8008c0c <__hexnan+0xa0>
 8008c02:	462a      	mov	r2, r5
 8008c04:	4649      	mov	r1, r9
 8008c06:	4620      	mov	r0, r4
 8008c08:	f7ff ff8a 	bl	8008b20 <L_shift>
 8008c0c:	4544      	cmp	r4, r8
 8008c0e:	d934      	bls.n	8008c7a <__hexnan+0x10e>
 8008c10:	f1a8 0204 	sub.w	r2, r8, #4
 8008c14:	4623      	mov	r3, r4
 8008c16:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c1a:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c1e:	429f      	cmp	r7, r3
 8008c20:	d2f9      	bcs.n	8008c16 <__hexnan+0xaa>
 8008c22:	1b3b      	subs	r3, r7, r4
 8008c24:	f023 0303 	bic.w	r3, r3, #3
 8008c28:	3304      	adds	r3, #4
 8008c2a:	3401      	adds	r4, #1
 8008c2c:	3e03      	subs	r6, #3
 8008c2e:	42b4      	cmp	r4, r6
 8008c30:	bf88      	it	hi
 8008c32:	2304      	movhi	r3, #4
 8008c34:	4443      	add	r3, r8
 8008c36:	2200      	movs	r2, #0
 8008c38:	f843 2b04 	str.w	r2, [r3], #4
 8008c3c:	429f      	cmp	r7, r3
 8008c3e:	d2fb      	bcs.n	8008c38 <__hexnan+0xcc>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	b91b      	cbnz	r3, 8008c4c <__hexnan+0xe0>
 8008c44:	4547      	cmp	r7, r8
 8008c46:	d127      	bne.n	8008c98 <__hexnan+0x12c>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	603b      	str	r3, [r7, #0]
 8008c4c:	2005      	movs	r0, #5
 8008c4e:	e026      	b.n	8008c9e <__hexnan+0x132>
 8008c50:	3501      	adds	r5, #1
 8008c52:	2d08      	cmp	r5, #8
 8008c54:	f10b 0b01 	add.w	fp, fp, #1
 8008c58:	dd06      	ble.n	8008c68 <__hexnan+0xfc>
 8008c5a:	4544      	cmp	r4, r8
 8008c5c:	d9c3      	bls.n	8008be6 <__hexnan+0x7a>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c64:	2501      	movs	r5, #1
 8008c66:	3c04      	subs	r4, #4
 8008c68:	6822      	ldr	r2, [r4, #0]
 8008c6a:	f000 000f 	and.w	r0, r0, #15
 8008c6e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008c72:	6022      	str	r2, [r4, #0]
 8008c74:	e7b7      	b.n	8008be6 <__hexnan+0x7a>
 8008c76:	2508      	movs	r5, #8
 8008c78:	e7b5      	b.n	8008be6 <__hexnan+0x7a>
 8008c7a:	9b01      	ldr	r3, [sp, #4]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d0df      	beq.n	8008c40 <__hexnan+0xd4>
 8008c80:	f04f 32ff 	mov.w	r2, #4294967295
 8008c84:	f1c3 0320 	rsb	r3, r3, #32
 8008c88:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008c90:	401a      	ands	r2, r3
 8008c92:	f846 2c04 	str.w	r2, [r6, #-4]
 8008c96:	e7d3      	b.n	8008c40 <__hexnan+0xd4>
 8008c98:	3f04      	subs	r7, #4
 8008c9a:	e7d1      	b.n	8008c40 <__hexnan+0xd4>
 8008c9c:	2004      	movs	r0, #4
 8008c9e:	b007      	add	sp, #28
 8008ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ca4 <_localeconv_r>:
 8008ca4:	4800      	ldr	r0, [pc, #0]	; (8008ca8 <_localeconv_r+0x4>)
 8008ca6:	4770      	bx	lr
 8008ca8:	20000164 	.word	0x20000164

08008cac <__retarget_lock_init_recursive>:
 8008cac:	4770      	bx	lr

08008cae <__retarget_lock_acquire_recursive>:
 8008cae:	4770      	bx	lr

08008cb0 <__retarget_lock_release_recursive>:
 8008cb0:	4770      	bx	lr
	...

08008cb4 <malloc>:
 8008cb4:	4b02      	ldr	r3, [pc, #8]	; (8008cc0 <malloc+0xc>)
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	f000 bd67 	b.w	800978c <_malloc_r>
 8008cbe:	bf00      	nop
 8008cc0:	2000000c 	.word	0x2000000c

08008cc4 <__ascii_mbtowc>:
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	b901      	cbnz	r1, 8008cca <__ascii_mbtowc+0x6>
 8008cc8:	a901      	add	r1, sp, #4
 8008cca:	b142      	cbz	r2, 8008cde <__ascii_mbtowc+0x1a>
 8008ccc:	b14b      	cbz	r3, 8008ce2 <__ascii_mbtowc+0x1e>
 8008cce:	7813      	ldrb	r3, [r2, #0]
 8008cd0:	600b      	str	r3, [r1, #0]
 8008cd2:	7812      	ldrb	r2, [r2, #0]
 8008cd4:	1e10      	subs	r0, r2, #0
 8008cd6:	bf18      	it	ne
 8008cd8:	2001      	movne	r0, #1
 8008cda:	b002      	add	sp, #8
 8008cdc:	4770      	bx	lr
 8008cde:	4610      	mov	r0, r2
 8008ce0:	e7fb      	b.n	8008cda <__ascii_mbtowc+0x16>
 8008ce2:	f06f 0001 	mvn.w	r0, #1
 8008ce6:	e7f8      	b.n	8008cda <__ascii_mbtowc+0x16>

08008ce8 <memcpy>:
 8008ce8:	440a      	add	r2, r1
 8008cea:	4291      	cmp	r1, r2
 8008cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cf0:	d100      	bne.n	8008cf4 <memcpy+0xc>
 8008cf2:	4770      	bx	lr
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cfe:	4291      	cmp	r1, r2
 8008d00:	d1f9      	bne.n	8008cf6 <memcpy+0xe>
 8008d02:	bd10      	pop	{r4, pc}

08008d04 <_Balloc>:
 8008d04:	b570      	push	{r4, r5, r6, lr}
 8008d06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d08:	4604      	mov	r4, r0
 8008d0a:	460d      	mov	r5, r1
 8008d0c:	b976      	cbnz	r6, 8008d2c <_Balloc+0x28>
 8008d0e:	2010      	movs	r0, #16
 8008d10:	f7ff ffd0 	bl	8008cb4 <malloc>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6260      	str	r0, [r4, #36]	; 0x24
 8008d18:	b920      	cbnz	r0, 8008d24 <_Balloc+0x20>
 8008d1a:	4b18      	ldr	r3, [pc, #96]	; (8008d7c <_Balloc+0x78>)
 8008d1c:	4818      	ldr	r0, [pc, #96]	; (8008d80 <_Balloc+0x7c>)
 8008d1e:	2166      	movs	r1, #102	; 0x66
 8008d20:	f001 f9ae 	bl	800a080 <__assert_func>
 8008d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d28:	6006      	str	r6, [r0, #0]
 8008d2a:	60c6      	str	r6, [r0, #12]
 8008d2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d2e:	68f3      	ldr	r3, [r6, #12]
 8008d30:	b183      	cbz	r3, 8008d54 <_Balloc+0x50>
 8008d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d3a:	b9b8      	cbnz	r0, 8008d6c <_Balloc+0x68>
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	fa01 f605 	lsl.w	r6, r1, r5
 8008d42:	1d72      	adds	r2, r6, #5
 8008d44:	0092      	lsls	r2, r2, #2
 8008d46:	4620      	mov	r0, r4
 8008d48:	f000 fc9d 	bl	8009686 <_calloc_r>
 8008d4c:	b160      	cbz	r0, 8008d68 <_Balloc+0x64>
 8008d4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d52:	e00e      	b.n	8008d72 <_Balloc+0x6e>
 8008d54:	2221      	movs	r2, #33	; 0x21
 8008d56:	2104      	movs	r1, #4
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f000 fc94 	bl	8009686 <_calloc_r>
 8008d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d60:	60f0      	str	r0, [r6, #12]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1e4      	bne.n	8008d32 <_Balloc+0x2e>
 8008d68:	2000      	movs	r0, #0
 8008d6a:	bd70      	pop	{r4, r5, r6, pc}
 8008d6c:	6802      	ldr	r2, [r0, #0]
 8008d6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d72:	2300      	movs	r3, #0
 8008d74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d78:	e7f7      	b.n	8008d6a <_Balloc+0x66>
 8008d7a:	bf00      	nop
 8008d7c:	0800a70e 	.word	0x0800a70e
 8008d80:	0800a870 	.word	0x0800a870

08008d84 <_Bfree>:
 8008d84:	b570      	push	{r4, r5, r6, lr}
 8008d86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d88:	4605      	mov	r5, r0
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	b976      	cbnz	r6, 8008dac <_Bfree+0x28>
 8008d8e:	2010      	movs	r0, #16
 8008d90:	f7ff ff90 	bl	8008cb4 <malloc>
 8008d94:	4602      	mov	r2, r0
 8008d96:	6268      	str	r0, [r5, #36]	; 0x24
 8008d98:	b920      	cbnz	r0, 8008da4 <_Bfree+0x20>
 8008d9a:	4b09      	ldr	r3, [pc, #36]	; (8008dc0 <_Bfree+0x3c>)
 8008d9c:	4809      	ldr	r0, [pc, #36]	; (8008dc4 <_Bfree+0x40>)
 8008d9e:	218a      	movs	r1, #138	; 0x8a
 8008da0:	f001 f96e 	bl	800a080 <__assert_func>
 8008da4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008da8:	6006      	str	r6, [r0, #0]
 8008daa:	60c6      	str	r6, [r0, #12]
 8008dac:	b13c      	cbz	r4, 8008dbe <_Bfree+0x3a>
 8008dae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008db0:	6862      	ldr	r2, [r4, #4]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008db8:	6021      	str	r1, [r4, #0]
 8008dba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dbe:	bd70      	pop	{r4, r5, r6, pc}
 8008dc0:	0800a70e 	.word	0x0800a70e
 8008dc4:	0800a870 	.word	0x0800a870

08008dc8 <__multadd>:
 8008dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dcc:	690d      	ldr	r5, [r1, #16]
 8008dce:	4607      	mov	r7, r0
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	461e      	mov	r6, r3
 8008dd4:	f101 0c14 	add.w	ip, r1, #20
 8008dd8:	2000      	movs	r0, #0
 8008dda:	f8dc 3000 	ldr.w	r3, [ip]
 8008dde:	b299      	uxth	r1, r3
 8008de0:	fb02 6101 	mla	r1, r2, r1, r6
 8008de4:	0c1e      	lsrs	r6, r3, #16
 8008de6:	0c0b      	lsrs	r3, r1, #16
 8008de8:	fb02 3306 	mla	r3, r2, r6, r3
 8008dec:	b289      	uxth	r1, r1
 8008dee:	3001      	adds	r0, #1
 8008df0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008df4:	4285      	cmp	r5, r0
 8008df6:	f84c 1b04 	str.w	r1, [ip], #4
 8008dfa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008dfe:	dcec      	bgt.n	8008dda <__multadd+0x12>
 8008e00:	b30e      	cbz	r6, 8008e46 <__multadd+0x7e>
 8008e02:	68a3      	ldr	r3, [r4, #8]
 8008e04:	42ab      	cmp	r3, r5
 8008e06:	dc19      	bgt.n	8008e3c <__multadd+0x74>
 8008e08:	6861      	ldr	r1, [r4, #4]
 8008e0a:	4638      	mov	r0, r7
 8008e0c:	3101      	adds	r1, #1
 8008e0e:	f7ff ff79 	bl	8008d04 <_Balloc>
 8008e12:	4680      	mov	r8, r0
 8008e14:	b928      	cbnz	r0, 8008e22 <__multadd+0x5a>
 8008e16:	4602      	mov	r2, r0
 8008e18:	4b0c      	ldr	r3, [pc, #48]	; (8008e4c <__multadd+0x84>)
 8008e1a:	480d      	ldr	r0, [pc, #52]	; (8008e50 <__multadd+0x88>)
 8008e1c:	21b5      	movs	r1, #181	; 0xb5
 8008e1e:	f001 f92f 	bl	800a080 <__assert_func>
 8008e22:	6922      	ldr	r2, [r4, #16]
 8008e24:	3202      	adds	r2, #2
 8008e26:	f104 010c 	add.w	r1, r4, #12
 8008e2a:	0092      	lsls	r2, r2, #2
 8008e2c:	300c      	adds	r0, #12
 8008e2e:	f7ff ff5b 	bl	8008ce8 <memcpy>
 8008e32:	4621      	mov	r1, r4
 8008e34:	4638      	mov	r0, r7
 8008e36:	f7ff ffa5 	bl	8008d84 <_Bfree>
 8008e3a:	4644      	mov	r4, r8
 8008e3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e40:	3501      	adds	r5, #1
 8008e42:	615e      	str	r6, [r3, #20]
 8008e44:	6125      	str	r5, [r4, #16]
 8008e46:	4620      	mov	r0, r4
 8008e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e4c:	0800a780 	.word	0x0800a780
 8008e50:	0800a870 	.word	0x0800a870

08008e54 <__s2b>:
 8008e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e58:	460c      	mov	r4, r1
 8008e5a:	4615      	mov	r5, r2
 8008e5c:	461f      	mov	r7, r3
 8008e5e:	2209      	movs	r2, #9
 8008e60:	3308      	adds	r3, #8
 8008e62:	4606      	mov	r6, r0
 8008e64:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e68:	2100      	movs	r1, #0
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	db09      	blt.n	8008e84 <__s2b+0x30>
 8008e70:	4630      	mov	r0, r6
 8008e72:	f7ff ff47 	bl	8008d04 <_Balloc>
 8008e76:	b940      	cbnz	r0, 8008e8a <__s2b+0x36>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	4b19      	ldr	r3, [pc, #100]	; (8008ee0 <__s2b+0x8c>)
 8008e7c:	4819      	ldr	r0, [pc, #100]	; (8008ee4 <__s2b+0x90>)
 8008e7e:	21ce      	movs	r1, #206	; 0xce
 8008e80:	f001 f8fe 	bl	800a080 <__assert_func>
 8008e84:	0052      	lsls	r2, r2, #1
 8008e86:	3101      	adds	r1, #1
 8008e88:	e7f0      	b.n	8008e6c <__s2b+0x18>
 8008e8a:	9b08      	ldr	r3, [sp, #32]
 8008e8c:	6143      	str	r3, [r0, #20]
 8008e8e:	2d09      	cmp	r5, #9
 8008e90:	f04f 0301 	mov.w	r3, #1
 8008e94:	6103      	str	r3, [r0, #16]
 8008e96:	dd16      	ble.n	8008ec6 <__s2b+0x72>
 8008e98:	f104 0909 	add.w	r9, r4, #9
 8008e9c:	46c8      	mov	r8, r9
 8008e9e:	442c      	add	r4, r5
 8008ea0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ea4:	4601      	mov	r1, r0
 8008ea6:	3b30      	subs	r3, #48	; 0x30
 8008ea8:	220a      	movs	r2, #10
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f7ff ff8c 	bl	8008dc8 <__multadd>
 8008eb0:	45a0      	cmp	r8, r4
 8008eb2:	d1f5      	bne.n	8008ea0 <__s2b+0x4c>
 8008eb4:	f1a5 0408 	sub.w	r4, r5, #8
 8008eb8:	444c      	add	r4, r9
 8008eba:	1b2d      	subs	r5, r5, r4
 8008ebc:	1963      	adds	r3, r4, r5
 8008ebe:	42bb      	cmp	r3, r7
 8008ec0:	db04      	blt.n	8008ecc <__s2b+0x78>
 8008ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec6:	340a      	adds	r4, #10
 8008ec8:	2509      	movs	r5, #9
 8008eca:	e7f6      	b.n	8008eba <__s2b+0x66>
 8008ecc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ed0:	4601      	mov	r1, r0
 8008ed2:	3b30      	subs	r3, #48	; 0x30
 8008ed4:	220a      	movs	r2, #10
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f7ff ff76 	bl	8008dc8 <__multadd>
 8008edc:	e7ee      	b.n	8008ebc <__s2b+0x68>
 8008ede:	bf00      	nop
 8008ee0:	0800a780 	.word	0x0800a780
 8008ee4:	0800a870 	.word	0x0800a870

08008ee8 <__hi0bits>:
 8008ee8:	0c03      	lsrs	r3, r0, #16
 8008eea:	041b      	lsls	r3, r3, #16
 8008eec:	b9d3      	cbnz	r3, 8008f24 <__hi0bits+0x3c>
 8008eee:	0400      	lsls	r0, r0, #16
 8008ef0:	2310      	movs	r3, #16
 8008ef2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008ef6:	bf04      	itt	eq
 8008ef8:	0200      	lsleq	r0, r0, #8
 8008efa:	3308      	addeq	r3, #8
 8008efc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f00:	bf04      	itt	eq
 8008f02:	0100      	lsleq	r0, r0, #4
 8008f04:	3304      	addeq	r3, #4
 8008f06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f0a:	bf04      	itt	eq
 8008f0c:	0080      	lsleq	r0, r0, #2
 8008f0e:	3302      	addeq	r3, #2
 8008f10:	2800      	cmp	r0, #0
 8008f12:	db05      	blt.n	8008f20 <__hi0bits+0x38>
 8008f14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f18:	f103 0301 	add.w	r3, r3, #1
 8008f1c:	bf08      	it	eq
 8008f1e:	2320      	moveq	r3, #32
 8008f20:	4618      	mov	r0, r3
 8008f22:	4770      	bx	lr
 8008f24:	2300      	movs	r3, #0
 8008f26:	e7e4      	b.n	8008ef2 <__hi0bits+0xa>

08008f28 <__lo0bits>:
 8008f28:	6803      	ldr	r3, [r0, #0]
 8008f2a:	f013 0207 	ands.w	r2, r3, #7
 8008f2e:	4601      	mov	r1, r0
 8008f30:	d00b      	beq.n	8008f4a <__lo0bits+0x22>
 8008f32:	07da      	lsls	r2, r3, #31
 8008f34:	d423      	bmi.n	8008f7e <__lo0bits+0x56>
 8008f36:	0798      	lsls	r0, r3, #30
 8008f38:	bf49      	itett	mi
 8008f3a:	085b      	lsrmi	r3, r3, #1
 8008f3c:	089b      	lsrpl	r3, r3, #2
 8008f3e:	2001      	movmi	r0, #1
 8008f40:	600b      	strmi	r3, [r1, #0]
 8008f42:	bf5c      	itt	pl
 8008f44:	600b      	strpl	r3, [r1, #0]
 8008f46:	2002      	movpl	r0, #2
 8008f48:	4770      	bx	lr
 8008f4a:	b298      	uxth	r0, r3
 8008f4c:	b9a8      	cbnz	r0, 8008f7a <__lo0bits+0x52>
 8008f4e:	0c1b      	lsrs	r3, r3, #16
 8008f50:	2010      	movs	r0, #16
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	b90a      	cbnz	r2, 8008f5a <__lo0bits+0x32>
 8008f56:	3008      	adds	r0, #8
 8008f58:	0a1b      	lsrs	r3, r3, #8
 8008f5a:	071a      	lsls	r2, r3, #28
 8008f5c:	bf04      	itt	eq
 8008f5e:	091b      	lsreq	r3, r3, #4
 8008f60:	3004      	addeq	r0, #4
 8008f62:	079a      	lsls	r2, r3, #30
 8008f64:	bf04      	itt	eq
 8008f66:	089b      	lsreq	r3, r3, #2
 8008f68:	3002      	addeq	r0, #2
 8008f6a:	07da      	lsls	r2, r3, #31
 8008f6c:	d403      	bmi.n	8008f76 <__lo0bits+0x4e>
 8008f6e:	085b      	lsrs	r3, r3, #1
 8008f70:	f100 0001 	add.w	r0, r0, #1
 8008f74:	d005      	beq.n	8008f82 <__lo0bits+0x5a>
 8008f76:	600b      	str	r3, [r1, #0]
 8008f78:	4770      	bx	lr
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	e7e9      	b.n	8008f52 <__lo0bits+0x2a>
 8008f7e:	2000      	movs	r0, #0
 8008f80:	4770      	bx	lr
 8008f82:	2020      	movs	r0, #32
 8008f84:	4770      	bx	lr
	...

08008f88 <__i2b>:
 8008f88:	b510      	push	{r4, lr}
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	2101      	movs	r1, #1
 8008f8e:	f7ff feb9 	bl	8008d04 <_Balloc>
 8008f92:	4602      	mov	r2, r0
 8008f94:	b928      	cbnz	r0, 8008fa2 <__i2b+0x1a>
 8008f96:	4b05      	ldr	r3, [pc, #20]	; (8008fac <__i2b+0x24>)
 8008f98:	4805      	ldr	r0, [pc, #20]	; (8008fb0 <__i2b+0x28>)
 8008f9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f9e:	f001 f86f 	bl	800a080 <__assert_func>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	6144      	str	r4, [r0, #20]
 8008fa6:	6103      	str	r3, [r0, #16]
 8008fa8:	bd10      	pop	{r4, pc}
 8008faa:	bf00      	nop
 8008fac:	0800a780 	.word	0x0800a780
 8008fb0:	0800a870 	.word	0x0800a870

08008fb4 <__multiply>:
 8008fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	4691      	mov	r9, r2
 8008fba:	690a      	ldr	r2, [r1, #16]
 8008fbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	bfb8      	it	lt
 8008fc4:	460b      	movlt	r3, r1
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	bfbc      	itt	lt
 8008fca:	464c      	movlt	r4, r9
 8008fcc:	4699      	movlt	r9, r3
 8008fce:	6927      	ldr	r7, [r4, #16]
 8008fd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008fd4:	68a3      	ldr	r3, [r4, #8]
 8008fd6:	6861      	ldr	r1, [r4, #4]
 8008fd8:	eb07 060a 	add.w	r6, r7, sl
 8008fdc:	42b3      	cmp	r3, r6
 8008fde:	b085      	sub	sp, #20
 8008fe0:	bfb8      	it	lt
 8008fe2:	3101      	addlt	r1, #1
 8008fe4:	f7ff fe8e 	bl	8008d04 <_Balloc>
 8008fe8:	b930      	cbnz	r0, 8008ff8 <__multiply+0x44>
 8008fea:	4602      	mov	r2, r0
 8008fec:	4b44      	ldr	r3, [pc, #272]	; (8009100 <__multiply+0x14c>)
 8008fee:	4845      	ldr	r0, [pc, #276]	; (8009104 <__multiply+0x150>)
 8008ff0:	f240 115d 	movw	r1, #349	; 0x15d
 8008ff4:	f001 f844 	bl	800a080 <__assert_func>
 8008ff8:	f100 0514 	add.w	r5, r0, #20
 8008ffc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009000:	462b      	mov	r3, r5
 8009002:	2200      	movs	r2, #0
 8009004:	4543      	cmp	r3, r8
 8009006:	d321      	bcc.n	800904c <__multiply+0x98>
 8009008:	f104 0314 	add.w	r3, r4, #20
 800900c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009010:	f109 0314 	add.w	r3, r9, #20
 8009014:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009018:	9202      	str	r2, [sp, #8]
 800901a:	1b3a      	subs	r2, r7, r4
 800901c:	3a15      	subs	r2, #21
 800901e:	f022 0203 	bic.w	r2, r2, #3
 8009022:	3204      	adds	r2, #4
 8009024:	f104 0115 	add.w	r1, r4, #21
 8009028:	428f      	cmp	r7, r1
 800902a:	bf38      	it	cc
 800902c:	2204      	movcc	r2, #4
 800902e:	9201      	str	r2, [sp, #4]
 8009030:	9a02      	ldr	r2, [sp, #8]
 8009032:	9303      	str	r3, [sp, #12]
 8009034:	429a      	cmp	r2, r3
 8009036:	d80c      	bhi.n	8009052 <__multiply+0x9e>
 8009038:	2e00      	cmp	r6, #0
 800903a:	dd03      	ble.n	8009044 <__multiply+0x90>
 800903c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009040:	2b00      	cmp	r3, #0
 8009042:	d05a      	beq.n	80090fa <__multiply+0x146>
 8009044:	6106      	str	r6, [r0, #16]
 8009046:	b005      	add	sp, #20
 8009048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800904c:	f843 2b04 	str.w	r2, [r3], #4
 8009050:	e7d8      	b.n	8009004 <__multiply+0x50>
 8009052:	f8b3 a000 	ldrh.w	sl, [r3]
 8009056:	f1ba 0f00 	cmp.w	sl, #0
 800905a:	d024      	beq.n	80090a6 <__multiply+0xf2>
 800905c:	f104 0e14 	add.w	lr, r4, #20
 8009060:	46a9      	mov	r9, r5
 8009062:	f04f 0c00 	mov.w	ip, #0
 8009066:	f85e 2b04 	ldr.w	r2, [lr], #4
 800906a:	f8d9 1000 	ldr.w	r1, [r9]
 800906e:	fa1f fb82 	uxth.w	fp, r2
 8009072:	b289      	uxth	r1, r1
 8009074:	fb0a 110b 	mla	r1, sl, fp, r1
 8009078:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800907c:	f8d9 2000 	ldr.w	r2, [r9]
 8009080:	4461      	add	r1, ip
 8009082:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009086:	fb0a c20b 	mla	r2, sl, fp, ip
 800908a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800908e:	b289      	uxth	r1, r1
 8009090:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009094:	4577      	cmp	r7, lr
 8009096:	f849 1b04 	str.w	r1, [r9], #4
 800909a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800909e:	d8e2      	bhi.n	8009066 <__multiply+0xb2>
 80090a0:	9a01      	ldr	r2, [sp, #4]
 80090a2:	f845 c002 	str.w	ip, [r5, r2]
 80090a6:	9a03      	ldr	r2, [sp, #12]
 80090a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80090ac:	3304      	adds	r3, #4
 80090ae:	f1b9 0f00 	cmp.w	r9, #0
 80090b2:	d020      	beq.n	80090f6 <__multiply+0x142>
 80090b4:	6829      	ldr	r1, [r5, #0]
 80090b6:	f104 0c14 	add.w	ip, r4, #20
 80090ba:	46ae      	mov	lr, r5
 80090bc:	f04f 0a00 	mov.w	sl, #0
 80090c0:	f8bc b000 	ldrh.w	fp, [ip]
 80090c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80090c8:	fb09 220b 	mla	r2, r9, fp, r2
 80090cc:	4492      	add	sl, r2
 80090ce:	b289      	uxth	r1, r1
 80090d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80090d4:	f84e 1b04 	str.w	r1, [lr], #4
 80090d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80090dc:	f8be 1000 	ldrh.w	r1, [lr]
 80090e0:	0c12      	lsrs	r2, r2, #16
 80090e2:	fb09 1102 	mla	r1, r9, r2, r1
 80090e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80090ea:	4567      	cmp	r7, ip
 80090ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80090f0:	d8e6      	bhi.n	80090c0 <__multiply+0x10c>
 80090f2:	9a01      	ldr	r2, [sp, #4]
 80090f4:	50a9      	str	r1, [r5, r2]
 80090f6:	3504      	adds	r5, #4
 80090f8:	e79a      	b.n	8009030 <__multiply+0x7c>
 80090fa:	3e01      	subs	r6, #1
 80090fc:	e79c      	b.n	8009038 <__multiply+0x84>
 80090fe:	bf00      	nop
 8009100:	0800a780 	.word	0x0800a780
 8009104:	0800a870 	.word	0x0800a870

08009108 <__pow5mult>:
 8009108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800910c:	4615      	mov	r5, r2
 800910e:	f012 0203 	ands.w	r2, r2, #3
 8009112:	4606      	mov	r6, r0
 8009114:	460f      	mov	r7, r1
 8009116:	d007      	beq.n	8009128 <__pow5mult+0x20>
 8009118:	4c25      	ldr	r4, [pc, #148]	; (80091b0 <__pow5mult+0xa8>)
 800911a:	3a01      	subs	r2, #1
 800911c:	2300      	movs	r3, #0
 800911e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009122:	f7ff fe51 	bl	8008dc8 <__multadd>
 8009126:	4607      	mov	r7, r0
 8009128:	10ad      	asrs	r5, r5, #2
 800912a:	d03d      	beq.n	80091a8 <__pow5mult+0xa0>
 800912c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800912e:	b97c      	cbnz	r4, 8009150 <__pow5mult+0x48>
 8009130:	2010      	movs	r0, #16
 8009132:	f7ff fdbf 	bl	8008cb4 <malloc>
 8009136:	4602      	mov	r2, r0
 8009138:	6270      	str	r0, [r6, #36]	; 0x24
 800913a:	b928      	cbnz	r0, 8009148 <__pow5mult+0x40>
 800913c:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <__pow5mult+0xac>)
 800913e:	481e      	ldr	r0, [pc, #120]	; (80091b8 <__pow5mult+0xb0>)
 8009140:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009144:	f000 ff9c 	bl	800a080 <__assert_func>
 8009148:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800914c:	6004      	str	r4, [r0, #0]
 800914e:	60c4      	str	r4, [r0, #12]
 8009150:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009154:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009158:	b94c      	cbnz	r4, 800916e <__pow5mult+0x66>
 800915a:	f240 2171 	movw	r1, #625	; 0x271
 800915e:	4630      	mov	r0, r6
 8009160:	f7ff ff12 	bl	8008f88 <__i2b>
 8009164:	2300      	movs	r3, #0
 8009166:	f8c8 0008 	str.w	r0, [r8, #8]
 800916a:	4604      	mov	r4, r0
 800916c:	6003      	str	r3, [r0, #0]
 800916e:	f04f 0900 	mov.w	r9, #0
 8009172:	07eb      	lsls	r3, r5, #31
 8009174:	d50a      	bpl.n	800918c <__pow5mult+0x84>
 8009176:	4639      	mov	r1, r7
 8009178:	4622      	mov	r2, r4
 800917a:	4630      	mov	r0, r6
 800917c:	f7ff ff1a 	bl	8008fb4 <__multiply>
 8009180:	4639      	mov	r1, r7
 8009182:	4680      	mov	r8, r0
 8009184:	4630      	mov	r0, r6
 8009186:	f7ff fdfd 	bl	8008d84 <_Bfree>
 800918a:	4647      	mov	r7, r8
 800918c:	106d      	asrs	r5, r5, #1
 800918e:	d00b      	beq.n	80091a8 <__pow5mult+0xa0>
 8009190:	6820      	ldr	r0, [r4, #0]
 8009192:	b938      	cbnz	r0, 80091a4 <__pow5mult+0x9c>
 8009194:	4622      	mov	r2, r4
 8009196:	4621      	mov	r1, r4
 8009198:	4630      	mov	r0, r6
 800919a:	f7ff ff0b 	bl	8008fb4 <__multiply>
 800919e:	6020      	str	r0, [r4, #0]
 80091a0:	f8c0 9000 	str.w	r9, [r0]
 80091a4:	4604      	mov	r4, r0
 80091a6:	e7e4      	b.n	8009172 <__pow5mult+0x6a>
 80091a8:	4638      	mov	r0, r7
 80091aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ae:	bf00      	nop
 80091b0:	0800a9c0 	.word	0x0800a9c0
 80091b4:	0800a70e 	.word	0x0800a70e
 80091b8:	0800a870 	.word	0x0800a870

080091bc <__lshift>:
 80091bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c0:	460c      	mov	r4, r1
 80091c2:	6849      	ldr	r1, [r1, #4]
 80091c4:	6923      	ldr	r3, [r4, #16]
 80091c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091ca:	68a3      	ldr	r3, [r4, #8]
 80091cc:	4607      	mov	r7, r0
 80091ce:	4691      	mov	r9, r2
 80091d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091d4:	f108 0601 	add.w	r6, r8, #1
 80091d8:	42b3      	cmp	r3, r6
 80091da:	db0b      	blt.n	80091f4 <__lshift+0x38>
 80091dc:	4638      	mov	r0, r7
 80091de:	f7ff fd91 	bl	8008d04 <_Balloc>
 80091e2:	4605      	mov	r5, r0
 80091e4:	b948      	cbnz	r0, 80091fa <__lshift+0x3e>
 80091e6:	4602      	mov	r2, r0
 80091e8:	4b2a      	ldr	r3, [pc, #168]	; (8009294 <__lshift+0xd8>)
 80091ea:	482b      	ldr	r0, [pc, #172]	; (8009298 <__lshift+0xdc>)
 80091ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80091f0:	f000 ff46 	bl	800a080 <__assert_func>
 80091f4:	3101      	adds	r1, #1
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	e7ee      	b.n	80091d8 <__lshift+0x1c>
 80091fa:	2300      	movs	r3, #0
 80091fc:	f100 0114 	add.w	r1, r0, #20
 8009200:	f100 0210 	add.w	r2, r0, #16
 8009204:	4618      	mov	r0, r3
 8009206:	4553      	cmp	r3, sl
 8009208:	db37      	blt.n	800927a <__lshift+0xbe>
 800920a:	6920      	ldr	r0, [r4, #16]
 800920c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009210:	f104 0314 	add.w	r3, r4, #20
 8009214:	f019 091f 	ands.w	r9, r9, #31
 8009218:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800921c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009220:	d02f      	beq.n	8009282 <__lshift+0xc6>
 8009222:	f1c9 0e20 	rsb	lr, r9, #32
 8009226:	468a      	mov	sl, r1
 8009228:	f04f 0c00 	mov.w	ip, #0
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	fa02 f209 	lsl.w	r2, r2, r9
 8009232:	ea42 020c 	orr.w	r2, r2, ip
 8009236:	f84a 2b04 	str.w	r2, [sl], #4
 800923a:	f853 2b04 	ldr.w	r2, [r3], #4
 800923e:	4298      	cmp	r0, r3
 8009240:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009244:	d8f2      	bhi.n	800922c <__lshift+0x70>
 8009246:	1b03      	subs	r3, r0, r4
 8009248:	3b15      	subs	r3, #21
 800924a:	f023 0303 	bic.w	r3, r3, #3
 800924e:	3304      	adds	r3, #4
 8009250:	f104 0215 	add.w	r2, r4, #21
 8009254:	4290      	cmp	r0, r2
 8009256:	bf38      	it	cc
 8009258:	2304      	movcc	r3, #4
 800925a:	f841 c003 	str.w	ip, [r1, r3]
 800925e:	f1bc 0f00 	cmp.w	ip, #0
 8009262:	d001      	beq.n	8009268 <__lshift+0xac>
 8009264:	f108 0602 	add.w	r6, r8, #2
 8009268:	3e01      	subs	r6, #1
 800926a:	4638      	mov	r0, r7
 800926c:	612e      	str	r6, [r5, #16]
 800926e:	4621      	mov	r1, r4
 8009270:	f7ff fd88 	bl	8008d84 <_Bfree>
 8009274:	4628      	mov	r0, r5
 8009276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800927a:	f842 0f04 	str.w	r0, [r2, #4]!
 800927e:	3301      	adds	r3, #1
 8009280:	e7c1      	b.n	8009206 <__lshift+0x4a>
 8009282:	3904      	subs	r1, #4
 8009284:	f853 2b04 	ldr.w	r2, [r3], #4
 8009288:	f841 2f04 	str.w	r2, [r1, #4]!
 800928c:	4298      	cmp	r0, r3
 800928e:	d8f9      	bhi.n	8009284 <__lshift+0xc8>
 8009290:	e7ea      	b.n	8009268 <__lshift+0xac>
 8009292:	bf00      	nop
 8009294:	0800a780 	.word	0x0800a780
 8009298:	0800a870 	.word	0x0800a870

0800929c <__mcmp>:
 800929c:	b530      	push	{r4, r5, lr}
 800929e:	6902      	ldr	r2, [r0, #16]
 80092a0:	690c      	ldr	r4, [r1, #16]
 80092a2:	1b12      	subs	r2, r2, r4
 80092a4:	d10e      	bne.n	80092c4 <__mcmp+0x28>
 80092a6:	f100 0314 	add.w	r3, r0, #20
 80092aa:	3114      	adds	r1, #20
 80092ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80092b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80092b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80092b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80092bc:	42a5      	cmp	r5, r4
 80092be:	d003      	beq.n	80092c8 <__mcmp+0x2c>
 80092c0:	d305      	bcc.n	80092ce <__mcmp+0x32>
 80092c2:	2201      	movs	r2, #1
 80092c4:	4610      	mov	r0, r2
 80092c6:	bd30      	pop	{r4, r5, pc}
 80092c8:	4283      	cmp	r3, r0
 80092ca:	d3f3      	bcc.n	80092b4 <__mcmp+0x18>
 80092cc:	e7fa      	b.n	80092c4 <__mcmp+0x28>
 80092ce:	f04f 32ff 	mov.w	r2, #4294967295
 80092d2:	e7f7      	b.n	80092c4 <__mcmp+0x28>

080092d4 <__mdiff>:
 80092d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d8:	460c      	mov	r4, r1
 80092da:	4606      	mov	r6, r0
 80092dc:	4611      	mov	r1, r2
 80092de:	4620      	mov	r0, r4
 80092e0:	4690      	mov	r8, r2
 80092e2:	f7ff ffdb 	bl	800929c <__mcmp>
 80092e6:	1e05      	subs	r5, r0, #0
 80092e8:	d110      	bne.n	800930c <__mdiff+0x38>
 80092ea:	4629      	mov	r1, r5
 80092ec:	4630      	mov	r0, r6
 80092ee:	f7ff fd09 	bl	8008d04 <_Balloc>
 80092f2:	b930      	cbnz	r0, 8009302 <__mdiff+0x2e>
 80092f4:	4b3a      	ldr	r3, [pc, #232]	; (80093e0 <__mdiff+0x10c>)
 80092f6:	4602      	mov	r2, r0
 80092f8:	f240 2132 	movw	r1, #562	; 0x232
 80092fc:	4839      	ldr	r0, [pc, #228]	; (80093e4 <__mdiff+0x110>)
 80092fe:	f000 febf 	bl	800a080 <__assert_func>
 8009302:	2301      	movs	r3, #1
 8009304:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930c:	bfa4      	itt	ge
 800930e:	4643      	movge	r3, r8
 8009310:	46a0      	movge	r8, r4
 8009312:	4630      	mov	r0, r6
 8009314:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009318:	bfa6      	itte	ge
 800931a:	461c      	movge	r4, r3
 800931c:	2500      	movge	r5, #0
 800931e:	2501      	movlt	r5, #1
 8009320:	f7ff fcf0 	bl	8008d04 <_Balloc>
 8009324:	b920      	cbnz	r0, 8009330 <__mdiff+0x5c>
 8009326:	4b2e      	ldr	r3, [pc, #184]	; (80093e0 <__mdiff+0x10c>)
 8009328:	4602      	mov	r2, r0
 800932a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800932e:	e7e5      	b.n	80092fc <__mdiff+0x28>
 8009330:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009334:	6926      	ldr	r6, [r4, #16]
 8009336:	60c5      	str	r5, [r0, #12]
 8009338:	f104 0914 	add.w	r9, r4, #20
 800933c:	f108 0514 	add.w	r5, r8, #20
 8009340:	f100 0e14 	add.w	lr, r0, #20
 8009344:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009348:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800934c:	f108 0210 	add.w	r2, r8, #16
 8009350:	46f2      	mov	sl, lr
 8009352:	2100      	movs	r1, #0
 8009354:	f859 3b04 	ldr.w	r3, [r9], #4
 8009358:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800935c:	fa1f f883 	uxth.w	r8, r3
 8009360:	fa11 f18b 	uxtah	r1, r1, fp
 8009364:	0c1b      	lsrs	r3, r3, #16
 8009366:	eba1 0808 	sub.w	r8, r1, r8
 800936a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800936e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009372:	fa1f f888 	uxth.w	r8, r8
 8009376:	1419      	asrs	r1, r3, #16
 8009378:	454e      	cmp	r6, r9
 800937a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800937e:	f84a 3b04 	str.w	r3, [sl], #4
 8009382:	d8e7      	bhi.n	8009354 <__mdiff+0x80>
 8009384:	1b33      	subs	r3, r6, r4
 8009386:	3b15      	subs	r3, #21
 8009388:	f023 0303 	bic.w	r3, r3, #3
 800938c:	3304      	adds	r3, #4
 800938e:	3415      	adds	r4, #21
 8009390:	42a6      	cmp	r6, r4
 8009392:	bf38      	it	cc
 8009394:	2304      	movcc	r3, #4
 8009396:	441d      	add	r5, r3
 8009398:	4473      	add	r3, lr
 800939a:	469e      	mov	lr, r3
 800939c:	462e      	mov	r6, r5
 800939e:	4566      	cmp	r6, ip
 80093a0:	d30e      	bcc.n	80093c0 <__mdiff+0xec>
 80093a2:	f10c 0203 	add.w	r2, ip, #3
 80093a6:	1b52      	subs	r2, r2, r5
 80093a8:	f022 0203 	bic.w	r2, r2, #3
 80093ac:	3d03      	subs	r5, #3
 80093ae:	45ac      	cmp	ip, r5
 80093b0:	bf38      	it	cc
 80093b2:	2200      	movcc	r2, #0
 80093b4:	441a      	add	r2, r3
 80093b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80093ba:	b17b      	cbz	r3, 80093dc <__mdiff+0x108>
 80093bc:	6107      	str	r7, [r0, #16]
 80093be:	e7a3      	b.n	8009308 <__mdiff+0x34>
 80093c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80093c4:	fa11 f288 	uxtah	r2, r1, r8
 80093c8:	1414      	asrs	r4, r2, #16
 80093ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80093ce:	b292      	uxth	r2, r2
 80093d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80093d4:	f84e 2b04 	str.w	r2, [lr], #4
 80093d8:	1421      	asrs	r1, r4, #16
 80093da:	e7e0      	b.n	800939e <__mdiff+0xca>
 80093dc:	3f01      	subs	r7, #1
 80093de:	e7ea      	b.n	80093b6 <__mdiff+0xe2>
 80093e0:	0800a780 	.word	0x0800a780
 80093e4:	0800a870 	.word	0x0800a870

080093e8 <__ulp>:
 80093e8:	b082      	sub	sp, #8
 80093ea:	ed8d 0b00 	vstr	d0, [sp]
 80093ee:	9b01      	ldr	r3, [sp, #4]
 80093f0:	4912      	ldr	r1, [pc, #72]	; (800943c <__ulp+0x54>)
 80093f2:	4019      	ands	r1, r3
 80093f4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80093f8:	2900      	cmp	r1, #0
 80093fa:	dd05      	ble.n	8009408 <__ulp+0x20>
 80093fc:	2200      	movs	r2, #0
 80093fe:	460b      	mov	r3, r1
 8009400:	ec43 2b10 	vmov	d0, r2, r3
 8009404:	b002      	add	sp, #8
 8009406:	4770      	bx	lr
 8009408:	4249      	negs	r1, r1
 800940a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800940e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009412:	f04f 0200 	mov.w	r2, #0
 8009416:	f04f 0300 	mov.w	r3, #0
 800941a:	da04      	bge.n	8009426 <__ulp+0x3e>
 800941c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009420:	fa41 f300 	asr.w	r3, r1, r0
 8009424:	e7ec      	b.n	8009400 <__ulp+0x18>
 8009426:	f1a0 0114 	sub.w	r1, r0, #20
 800942a:	291e      	cmp	r1, #30
 800942c:	bfda      	itte	le
 800942e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009432:	fa20 f101 	lsrle.w	r1, r0, r1
 8009436:	2101      	movgt	r1, #1
 8009438:	460a      	mov	r2, r1
 800943a:	e7e1      	b.n	8009400 <__ulp+0x18>
 800943c:	7ff00000 	.word	0x7ff00000

08009440 <__b2d>:
 8009440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009442:	6905      	ldr	r5, [r0, #16]
 8009444:	f100 0714 	add.w	r7, r0, #20
 8009448:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800944c:	1f2e      	subs	r6, r5, #4
 800944e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009452:	4620      	mov	r0, r4
 8009454:	f7ff fd48 	bl	8008ee8 <__hi0bits>
 8009458:	f1c0 0320 	rsb	r3, r0, #32
 800945c:	280a      	cmp	r0, #10
 800945e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80094dc <__b2d+0x9c>
 8009462:	600b      	str	r3, [r1, #0]
 8009464:	dc14      	bgt.n	8009490 <__b2d+0x50>
 8009466:	f1c0 0e0b 	rsb	lr, r0, #11
 800946a:	fa24 f10e 	lsr.w	r1, r4, lr
 800946e:	42b7      	cmp	r7, r6
 8009470:	ea41 030c 	orr.w	r3, r1, ip
 8009474:	bf34      	ite	cc
 8009476:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800947a:	2100      	movcs	r1, #0
 800947c:	3015      	adds	r0, #21
 800947e:	fa04 f000 	lsl.w	r0, r4, r0
 8009482:	fa21 f10e 	lsr.w	r1, r1, lr
 8009486:	ea40 0201 	orr.w	r2, r0, r1
 800948a:	ec43 2b10 	vmov	d0, r2, r3
 800948e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009490:	42b7      	cmp	r7, r6
 8009492:	bf3a      	itte	cc
 8009494:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009498:	f1a5 0608 	subcc.w	r6, r5, #8
 800949c:	2100      	movcs	r1, #0
 800949e:	380b      	subs	r0, #11
 80094a0:	d017      	beq.n	80094d2 <__b2d+0x92>
 80094a2:	f1c0 0c20 	rsb	ip, r0, #32
 80094a6:	fa04 f500 	lsl.w	r5, r4, r0
 80094aa:	42be      	cmp	r6, r7
 80094ac:	fa21 f40c 	lsr.w	r4, r1, ip
 80094b0:	ea45 0504 	orr.w	r5, r5, r4
 80094b4:	bf8c      	ite	hi
 80094b6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80094ba:	2400      	movls	r4, #0
 80094bc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80094c0:	fa01 f000 	lsl.w	r0, r1, r0
 80094c4:	fa24 f40c 	lsr.w	r4, r4, ip
 80094c8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80094cc:	ea40 0204 	orr.w	r2, r0, r4
 80094d0:	e7db      	b.n	800948a <__b2d+0x4a>
 80094d2:	ea44 030c 	orr.w	r3, r4, ip
 80094d6:	460a      	mov	r2, r1
 80094d8:	e7d7      	b.n	800948a <__b2d+0x4a>
 80094da:	bf00      	nop
 80094dc:	3ff00000 	.word	0x3ff00000

080094e0 <__d2b>:
 80094e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094e4:	4689      	mov	r9, r1
 80094e6:	2101      	movs	r1, #1
 80094e8:	ec57 6b10 	vmov	r6, r7, d0
 80094ec:	4690      	mov	r8, r2
 80094ee:	f7ff fc09 	bl	8008d04 <_Balloc>
 80094f2:	4604      	mov	r4, r0
 80094f4:	b930      	cbnz	r0, 8009504 <__d2b+0x24>
 80094f6:	4602      	mov	r2, r0
 80094f8:	4b25      	ldr	r3, [pc, #148]	; (8009590 <__d2b+0xb0>)
 80094fa:	4826      	ldr	r0, [pc, #152]	; (8009594 <__d2b+0xb4>)
 80094fc:	f240 310a 	movw	r1, #778	; 0x30a
 8009500:	f000 fdbe 	bl	800a080 <__assert_func>
 8009504:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009508:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800950c:	bb35      	cbnz	r5, 800955c <__d2b+0x7c>
 800950e:	2e00      	cmp	r6, #0
 8009510:	9301      	str	r3, [sp, #4]
 8009512:	d028      	beq.n	8009566 <__d2b+0x86>
 8009514:	4668      	mov	r0, sp
 8009516:	9600      	str	r6, [sp, #0]
 8009518:	f7ff fd06 	bl	8008f28 <__lo0bits>
 800951c:	9900      	ldr	r1, [sp, #0]
 800951e:	b300      	cbz	r0, 8009562 <__d2b+0x82>
 8009520:	9a01      	ldr	r2, [sp, #4]
 8009522:	f1c0 0320 	rsb	r3, r0, #32
 8009526:	fa02 f303 	lsl.w	r3, r2, r3
 800952a:	430b      	orrs	r3, r1
 800952c:	40c2      	lsrs	r2, r0
 800952e:	6163      	str	r3, [r4, #20]
 8009530:	9201      	str	r2, [sp, #4]
 8009532:	9b01      	ldr	r3, [sp, #4]
 8009534:	61a3      	str	r3, [r4, #24]
 8009536:	2b00      	cmp	r3, #0
 8009538:	bf14      	ite	ne
 800953a:	2202      	movne	r2, #2
 800953c:	2201      	moveq	r2, #1
 800953e:	6122      	str	r2, [r4, #16]
 8009540:	b1d5      	cbz	r5, 8009578 <__d2b+0x98>
 8009542:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009546:	4405      	add	r5, r0
 8009548:	f8c9 5000 	str.w	r5, [r9]
 800954c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009550:	f8c8 0000 	str.w	r0, [r8]
 8009554:	4620      	mov	r0, r4
 8009556:	b003      	add	sp, #12
 8009558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800955c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009560:	e7d5      	b.n	800950e <__d2b+0x2e>
 8009562:	6161      	str	r1, [r4, #20]
 8009564:	e7e5      	b.n	8009532 <__d2b+0x52>
 8009566:	a801      	add	r0, sp, #4
 8009568:	f7ff fcde 	bl	8008f28 <__lo0bits>
 800956c:	9b01      	ldr	r3, [sp, #4]
 800956e:	6163      	str	r3, [r4, #20]
 8009570:	2201      	movs	r2, #1
 8009572:	6122      	str	r2, [r4, #16]
 8009574:	3020      	adds	r0, #32
 8009576:	e7e3      	b.n	8009540 <__d2b+0x60>
 8009578:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800957c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009580:	f8c9 0000 	str.w	r0, [r9]
 8009584:	6918      	ldr	r0, [r3, #16]
 8009586:	f7ff fcaf 	bl	8008ee8 <__hi0bits>
 800958a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800958e:	e7df      	b.n	8009550 <__d2b+0x70>
 8009590:	0800a780 	.word	0x0800a780
 8009594:	0800a870 	.word	0x0800a870

08009598 <__ratio>:
 8009598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	4688      	mov	r8, r1
 800959e:	4669      	mov	r1, sp
 80095a0:	4681      	mov	r9, r0
 80095a2:	f7ff ff4d 	bl	8009440 <__b2d>
 80095a6:	a901      	add	r1, sp, #4
 80095a8:	4640      	mov	r0, r8
 80095aa:	ec55 4b10 	vmov	r4, r5, d0
 80095ae:	f7ff ff47 	bl	8009440 <__b2d>
 80095b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80095b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80095ba:	eba3 0c02 	sub.w	ip, r3, r2
 80095be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80095c8:	ec51 0b10 	vmov	r0, r1, d0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	bfd6      	itet	le
 80095d0:	460a      	movle	r2, r1
 80095d2:	462a      	movgt	r2, r5
 80095d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80095d8:	468b      	mov	fp, r1
 80095da:	462f      	mov	r7, r5
 80095dc:	bfd4      	ite	le
 80095de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80095e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80095e6:	4620      	mov	r0, r4
 80095e8:	ee10 2a10 	vmov	r2, s0
 80095ec:	465b      	mov	r3, fp
 80095ee:	4639      	mov	r1, r7
 80095f0:	f7f7 f93c 	bl	800086c <__aeabi_ddiv>
 80095f4:	ec41 0b10 	vmov	d0, r0, r1
 80095f8:	b003      	add	sp, #12
 80095fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095fe <__copybits>:
 80095fe:	3901      	subs	r1, #1
 8009600:	b570      	push	{r4, r5, r6, lr}
 8009602:	1149      	asrs	r1, r1, #5
 8009604:	6914      	ldr	r4, [r2, #16]
 8009606:	3101      	adds	r1, #1
 8009608:	f102 0314 	add.w	r3, r2, #20
 800960c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009610:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009614:	1f05      	subs	r5, r0, #4
 8009616:	42a3      	cmp	r3, r4
 8009618:	d30c      	bcc.n	8009634 <__copybits+0x36>
 800961a:	1aa3      	subs	r3, r4, r2
 800961c:	3b11      	subs	r3, #17
 800961e:	f023 0303 	bic.w	r3, r3, #3
 8009622:	3211      	adds	r2, #17
 8009624:	42a2      	cmp	r2, r4
 8009626:	bf88      	it	hi
 8009628:	2300      	movhi	r3, #0
 800962a:	4418      	add	r0, r3
 800962c:	2300      	movs	r3, #0
 800962e:	4288      	cmp	r0, r1
 8009630:	d305      	bcc.n	800963e <__copybits+0x40>
 8009632:	bd70      	pop	{r4, r5, r6, pc}
 8009634:	f853 6b04 	ldr.w	r6, [r3], #4
 8009638:	f845 6f04 	str.w	r6, [r5, #4]!
 800963c:	e7eb      	b.n	8009616 <__copybits+0x18>
 800963e:	f840 3b04 	str.w	r3, [r0], #4
 8009642:	e7f4      	b.n	800962e <__copybits+0x30>

08009644 <__any_on>:
 8009644:	f100 0214 	add.w	r2, r0, #20
 8009648:	6900      	ldr	r0, [r0, #16]
 800964a:	114b      	asrs	r3, r1, #5
 800964c:	4298      	cmp	r0, r3
 800964e:	b510      	push	{r4, lr}
 8009650:	db11      	blt.n	8009676 <__any_on+0x32>
 8009652:	dd0a      	ble.n	800966a <__any_on+0x26>
 8009654:	f011 011f 	ands.w	r1, r1, #31
 8009658:	d007      	beq.n	800966a <__any_on+0x26>
 800965a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800965e:	fa24 f001 	lsr.w	r0, r4, r1
 8009662:	fa00 f101 	lsl.w	r1, r0, r1
 8009666:	428c      	cmp	r4, r1
 8009668:	d10b      	bne.n	8009682 <__any_on+0x3e>
 800966a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800966e:	4293      	cmp	r3, r2
 8009670:	d803      	bhi.n	800967a <__any_on+0x36>
 8009672:	2000      	movs	r0, #0
 8009674:	bd10      	pop	{r4, pc}
 8009676:	4603      	mov	r3, r0
 8009678:	e7f7      	b.n	800966a <__any_on+0x26>
 800967a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800967e:	2900      	cmp	r1, #0
 8009680:	d0f5      	beq.n	800966e <__any_on+0x2a>
 8009682:	2001      	movs	r0, #1
 8009684:	e7f6      	b.n	8009674 <__any_on+0x30>

08009686 <_calloc_r>:
 8009686:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009688:	fba1 2402 	umull	r2, r4, r1, r2
 800968c:	b94c      	cbnz	r4, 80096a2 <_calloc_r+0x1c>
 800968e:	4611      	mov	r1, r2
 8009690:	9201      	str	r2, [sp, #4]
 8009692:	f000 f87b 	bl	800978c <_malloc_r>
 8009696:	9a01      	ldr	r2, [sp, #4]
 8009698:	4605      	mov	r5, r0
 800969a:	b930      	cbnz	r0, 80096aa <_calloc_r+0x24>
 800969c:	4628      	mov	r0, r5
 800969e:	b003      	add	sp, #12
 80096a0:	bd30      	pop	{r4, r5, pc}
 80096a2:	220c      	movs	r2, #12
 80096a4:	6002      	str	r2, [r0, #0]
 80096a6:	2500      	movs	r5, #0
 80096a8:	e7f8      	b.n	800969c <_calloc_r+0x16>
 80096aa:	4621      	mov	r1, r4
 80096ac:	f7fc fab0 	bl	8005c10 <memset>
 80096b0:	e7f4      	b.n	800969c <_calloc_r+0x16>
	...

080096b4 <_free_r>:
 80096b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096b6:	2900      	cmp	r1, #0
 80096b8:	d044      	beq.n	8009744 <_free_r+0x90>
 80096ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096be:	9001      	str	r0, [sp, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f1a1 0404 	sub.w	r4, r1, #4
 80096c6:	bfb8      	it	lt
 80096c8:	18e4      	addlt	r4, r4, r3
 80096ca:	f000 fe6d 	bl	800a3a8 <__malloc_lock>
 80096ce:	4a1e      	ldr	r2, [pc, #120]	; (8009748 <_free_r+0x94>)
 80096d0:	9801      	ldr	r0, [sp, #4]
 80096d2:	6813      	ldr	r3, [r2, #0]
 80096d4:	b933      	cbnz	r3, 80096e4 <_free_r+0x30>
 80096d6:	6063      	str	r3, [r4, #4]
 80096d8:	6014      	str	r4, [r2, #0]
 80096da:	b003      	add	sp, #12
 80096dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096e0:	f000 be68 	b.w	800a3b4 <__malloc_unlock>
 80096e4:	42a3      	cmp	r3, r4
 80096e6:	d908      	bls.n	80096fa <_free_r+0x46>
 80096e8:	6825      	ldr	r5, [r4, #0]
 80096ea:	1961      	adds	r1, r4, r5
 80096ec:	428b      	cmp	r3, r1
 80096ee:	bf01      	itttt	eq
 80096f0:	6819      	ldreq	r1, [r3, #0]
 80096f2:	685b      	ldreq	r3, [r3, #4]
 80096f4:	1949      	addeq	r1, r1, r5
 80096f6:	6021      	streq	r1, [r4, #0]
 80096f8:	e7ed      	b.n	80096d6 <_free_r+0x22>
 80096fa:	461a      	mov	r2, r3
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	b10b      	cbz	r3, 8009704 <_free_r+0x50>
 8009700:	42a3      	cmp	r3, r4
 8009702:	d9fa      	bls.n	80096fa <_free_r+0x46>
 8009704:	6811      	ldr	r1, [r2, #0]
 8009706:	1855      	adds	r5, r2, r1
 8009708:	42a5      	cmp	r5, r4
 800970a:	d10b      	bne.n	8009724 <_free_r+0x70>
 800970c:	6824      	ldr	r4, [r4, #0]
 800970e:	4421      	add	r1, r4
 8009710:	1854      	adds	r4, r2, r1
 8009712:	42a3      	cmp	r3, r4
 8009714:	6011      	str	r1, [r2, #0]
 8009716:	d1e0      	bne.n	80096da <_free_r+0x26>
 8009718:	681c      	ldr	r4, [r3, #0]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	6053      	str	r3, [r2, #4]
 800971e:	4421      	add	r1, r4
 8009720:	6011      	str	r1, [r2, #0]
 8009722:	e7da      	b.n	80096da <_free_r+0x26>
 8009724:	d902      	bls.n	800972c <_free_r+0x78>
 8009726:	230c      	movs	r3, #12
 8009728:	6003      	str	r3, [r0, #0]
 800972a:	e7d6      	b.n	80096da <_free_r+0x26>
 800972c:	6825      	ldr	r5, [r4, #0]
 800972e:	1961      	adds	r1, r4, r5
 8009730:	428b      	cmp	r3, r1
 8009732:	bf04      	itt	eq
 8009734:	6819      	ldreq	r1, [r3, #0]
 8009736:	685b      	ldreq	r3, [r3, #4]
 8009738:	6063      	str	r3, [r4, #4]
 800973a:	bf04      	itt	eq
 800973c:	1949      	addeq	r1, r1, r5
 800973e:	6021      	streq	r1, [r4, #0]
 8009740:	6054      	str	r4, [r2, #4]
 8009742:	e7ca      	b.n	80096da <_free_r+0x26>
 8009744:	b003      	add	sp, #12
 8009746:	bd30      	pop	{r4, r5, pc}
 8009748:	2000043c 	.word	0x2000043c

0800974c <sbrk_aligned>:
 800974c:	b570      	push	{r4, r5, r6, lr}
 800974e:	4e0e      	ldr	r6, [pc, #56]	; (8009788 <sbrk_aligned+0x3c>)
 8009750:	460c      	mov	r4, r1
 8009752:	6831      	ldr	r1, [r6, #0]
 8009754:	4605      	mov	r5, r0
 8009756:	b911      	cbnz	r1, 800975e <sbrk_aligned+0x12>
 8009758:	f000 fb4a 	bl	8009df0 <_sbrk_r>
 800975c:	6030      	str	r0, [r6, #0]
 800975e:	4621      	mov	r1, r4
 8009760:	4628      	mov	r0, r5
 8009762:	f000 fb45 	bl	8009df0 <_sbrk_r>
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	d00a      	beq.n	8009780 <sbrk_aligned+0x34>
 800976a:	1cc4      	adds	r4, r0, #3
 800976c:	f024 0403 	bic.w	r4, r4, #3
 8009770:	42a0      	cmp	r0, r4
 8009772:	d007      	beq.n	8009784 <sbrk_aligned+0x38>
 8009774:	1a21      	subs	r1, r4, r0
 8009776:	4628      	mov	r0, r5
 8009778:	f000 fb3a 	bl	8009df0 <_sbrk_r>
 800977c:	3001      	adds	r0, #1
 800977e:	d101      	bne.n	8009784 <sbrk_aligned+0x38>
 8009780:	f04f 34ff 	mov.w	r4, #4294967295
 8009784:	4620      	mov	r0, r4
 8009786:	bd70      	pop	{r4, r5, r6, pc}
 8009788:	20000440 	.word	0x20000440

0800978c <_malloc_r>:
 800978c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009790:	1ccd      	adds	r5, r1, #3
 8009792:	f025 0503 	bic.w	r5, r5, #3
 8009796:	3508      	adds	r5, #8
 8009798:	2d0c      	cmp	r5, #12
 800979a:	bf38      	it	cc
 800979c:	250c      	movcc	r5, #12
 800979e:	2d00      	cmp	r5, #0
 80097a0:	4607      	mov	r7, r0
 80097a2:	db01      	blt.n	80097a8 <_malloc_r+0x1c>
 80097a4:	42a9      	cmp	r1, r5
 80097a6:	d905      	bls.n	80097b4 <_malloc_r+0x28>
 80097a8:	230c      	movs	r3, #12
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	2600      	movs	r6, #0
 80097ae:	4630      	mov	r0, r6
 80097b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097b4:	4e2e      	ldr	r6, [pc, #184]	; (8009870 <_malloc_r+0xe4>)
 80097b6:	f000 fdf7 	bl	800a3a8 <__malloc_lock>
 80097ba:	6833      	ldr	r3, [r6, #0]
 80097bc:	461c      	mov	r4, r3
 80097be:	bb34      	cbnz	r4, 800980e <_malloc_r+0x82>
 80097c0:	4629      	mov	r1, r5
 80097c2:	4638      	mov	r0, r7
 80097c4:	f7ff ffc2 	bl	800974c <sbrk_aligned>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	4604      	mov	r4, r0
 80097cc:	d14d      	bne.n	800986a <_malloc_r+0xde>
 80097ce:	6834      	ldr	r4, [r6, #0]
 80097d0:	4626      	mov	r6, r4
 80097d2:	2e00      	cmp	r6, #0
 80097d4:	d140      	bne.n	8009858 <_malloc_r+0xcc>
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	4631      	mov	r1, r6
 80097da:	4638      	mov	r0, r7
 80097dc:	eb04 0803 	add.w	r8, r4, r3
 80097e0:	f000 fb06 	bl	8009df0 <_sbrk_r>
 80097e4:	4580      	cmp	r8, r0
 80097e6:	d13a      	bne.n	800985e <_malloc_r+0xd2>
 80097e8:	6821      	ldr	r1, [r4, #0]
 80097ea:	3503      	adds	r5, #3
 80097ec:	1a6d      	subs	r5, r5, r1
 80097ee:	f025 0503 	bic.w	r5, r5, #3
 80097f2:	3508      	adds	r5, #8
 80097f4:	2d0c      	cmp	r5, #12
 80097f6:	bf38      	it	cc
 80097f8:	250c      	movcc	r5, #12
 80097fa:	4629      	mov	r1, r5
 80097fc:	4638      	mov	r0, r7
 80097fe:	f7ff ffa5 	bl	800974c <sbrk_aligned>
 8009802:	3001      	adds	r0, #1
 8009804:	d02b      	beq.n	800985e <_malloc_r+0xd2>
 8009806:	6823      	ldr	r3, [r4, #0]
 8009808:	442b      	add	r3, r5
 800980a:	6023      	str	r3, [r4, #0]
 800980c:	e00e      	b.n	800982c <_malloc_r+0xa0>
 800980e:	6822      	ldr	r2, [r4, #0]
 8009810:	1b52      	subs	r2, r2, r5
 8009812:	d41e      	bmi.n	8009852 <_malloc_r+0xc6>
 8009814:	2a0b      	cmp	r2, #11
 8009816:	d916      	bls.n	8009846 <_malloc_r+0xba>
 8009818:	1961      	adds	r1, r4, r5
 800981a:	42a3      	cmp	r3, r4
 800981c:	6025      	str	r5, [r4, #0]
 800981e:	bf18      	it	ne
 8009820:	6059      	strne	r1, [r3, #4]
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	bf08      	it	eq
 8009826:	6031      	streq	r1, [r6, #0]
 8009828:	5162      	str	r2, [r4, r5]
 800982a:	604b      	str	r3, [r1, #4]
 800982c:	4638      	mov	r0, r7
 800982e:	f104 060b 	add.w	r6, r4, #11
 8009832:	f000 fdbf 	bl	800a3b4 <__malloc_unlock>
 8009836:	f026 0607 	bic.w	r6, r6, #7
 800983a:	1d23      	adds	r3, r4, #4
 800983c:	1af2      	subs	r2, r6, r3
 800983e:	d0b6      	beq.n	80097ae <_malloc_r+0x22>
 8009840:	1b9b      	subs	r3, r3, r6
 8009842:	50a3      	str	r3, [r4, r2]
 8009844:	e7b3      	b.n	80097ae <_malloc_r+0x22>
 8009846:	6862      	ldr	r2, [r4, #4]
 8009848:	42a3      	cmp	r3, r4
 800984a:	bf0c      	ite	eq
 800984c:	6032      	streq	r2, [r6, #0]
 800984e:	605a      	strne	r2, [r3, #4]
 8009850:	e7ec      	b.n	800982c <_malloc_r+0xa0>
 8009852:	4623      	mov	r3, r4
 8009854:	6864      	ldr	r4, [r4, #4]
 8009856:	e7b2      	b.n	80097be <_malloc_r+0x32>
 8009858:	4634      	mov	r4, r6
 800985a:	6876      	ldr	r6, [r6, #4]
 800985c:	e7b9      	b.n	80097d2 <_malloc_r+0x46>
 800985e:	230c      	movs	r3, #12
 8009860:	603b      	str	r3, [r7, #0]
 8009862:	4638      	mov	r0, r7
 8009864:	f000 fda6 	bl	800a3b4 <__malloc_unlock>
 8009868:	e7a1      	b.n	80097ae <_malloc_r+0x22>
 800986a:	6025      	str	r5, [r4, #0]
 800986c:	e7de      	b.n	800982c <_malloc_r+0xa0>
 800986e:	bf00      	nop
 8009870:	2000043c 	.word	0x2000043c

08009874 <__ssputs_r>:
 8009874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009878:	688e      	ldr	r6, [r1, #8]
 800987a:	429e      	cmp	r6, r3
 800987c:	4682      	mov	sl, r0
 800987e:	460c      	mov	r4, r1
 8009880:	4690      	mov	r8, r2
 8009882:	461f      	mov	r7, r3
 8009884:	d838      	bhi.n	80098f8 <__ssputs_r+0x84>
 8009886:	898a      	ldrh	r2, [r1, #12]
 8009888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800988c:	d032      	beq.n	80098f4 <__ssputs_r+0x80>
 800988e:	6825      	ldr	r5, [r4, #0]
 8009890:	6909      	ldr	r1, [r1, #16]
 8009892:	eba5 0901 	sub.w	r9, r5, r1
 8009896:	6965      	ldr	r5, [r4, #20]
 8009898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800989c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098a0:	3301      	adds	r3, #1
 80098a2:	444b      	add	r3, r9
 80098a4:	106d      	asrs	r5, r5, #1
 80098a6:	429d      	cmp	r5, r3
 80098a8:	bf38      	it	cc
 80098aa:	461d      	movcc	r5, r3
 80098ac:	0553      	lsls	r3, r2, #21
 80098ae:	d531      	bpl.n	8009914 <__ssputs_r+0xa0>
 80098b0:	4629      	mov	r1, r5
 80098b2:	f7ff ff6b 	bl	800978c <_malloc_r>
 80098b6:	4606      	mov	r6, r0
 80098b8:	b950      	cbnz	r0, 80098d0 <__ssputs_r+0x5c>
 80098ba:	230c      	movs	r3, #12
 80098bc:	f8ca 3000 	str.w	r3, [sl]
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098c6:	81a3      	strh	r3, [r4, #12]
 80098c8:	f04f 30ff 	mov.w	r0, #4294967295
 80098cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d0:	6921      	ldr	r1, [r4, #16]
 80098d2:	464a      	mov	r2, r9
 80098d4:	f7ff fa08 	bl	8008ce8 <memcpy>
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098e2:	81a3      	strh	r3, [r4, #12]
 80098e4:	6126      	str	r6, [r4, #16]
 80098e6:	6165      	str	r5, [r4, #20]
 80098e8:	444e      	add	r6, r9
 80098ea:	eba5 0509 	sub.w	r5, r5, r9
 80098ee:	6026      	str	r6, [r4, #0]
 80098f0:	60a5      	str	r5, [r4, #8]
 80098f2:	463e      	mov	r6, r7
 80098f4:	42be      	cmp	r6, r7
 80098f6:	d900      	bls.n	80098fa <__ssputs_r+0x86>
 80098f8:	463e      	mov	r6, r7
 80098fa:	6820      	ldr	r0, [r4, #0]
 80098fc:	4632      	mov	r2, r6
 80098fe:	4641      	mov	r1, r8
 8009900:	f000 fd38 	bl	800a374 <memmove>
 8009904:	68a3      	ldr	r3, [r4, #8]
 8009906:	1b9b      	subs	r3, r3, r6
 8009908:	60a3      	str	r3, [r4, #8]
 800990a:	6823      	ldr	r3, [r4, #0]
 800990c:	4433      	add	r3, r6
 800990e:	6023      	str	r3, [r4, #0]
 8009910:	2000      	movs	r0, #0
 8009912:	e7db      	b.n	80098cc <__ssputs_r+0x58>
 8009914:	462a      	mov	r2, r5
 8009916:	f000 fd53 	bl	800a3c0 <_realloc_r>
 800991a:	4606      	mov	r6, r0
 800991c:	2800      	cmp	r0, #0
 800991e:	d1e1      	bne.n	80098e4 <__ssputs_r+0x70>
 8009920:	6921      	ldr	r1, [r4, #16]
 8009922:	4650      	mov	r0, sl
 8009924:	f7ff fec6 	bl	80096b4 <_free_r>
 8009928:	e7c7      	b.n	80098ba <__ssputs_r+0x46>
	...

0800992c <_svfiprintf_r>:
 800992c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009930:	4698      	mov	r8, r3
 8009932:	898b      	ldrh	r3, [r1, #12]
 8009934:	061b      	lsls	r3, r3, #24
 8009936:	b09d      	sub	sp, #116	; 0x74
 8009938:	4607      	mov	r7, r0
 800993a:	460d      	mov	r5, r1
 800993c:	4614      	mov	r4, r2
 800993e:	d50e      	bpl.n	800995e <_svfiprintf_r+0x32>
 8009940:	690b      	ldr	r3, [r1, #16]
 8009942:	b963      	cbnz	r3, 800995e <_svfiprintf_r+0x32>
 8009944:	2140      	movs	r1, #64	; 0x40
 8009946:	f7ff ff21 	bl	800978c <_malloc_r>
 800994a:	6028      	str	r0, [r5, #0]
 800994c:	6128      	str	r0, [r5, #16]
 800994e:	b920      	cbnz	r0, 800995a <_svfiprintf_r+0x2e>
 8009950:	230c      	movs	r3, #12
 8009952:	603b      	str	r3, [r7, #0]
 8009954:	f04f 30ff 	mov.w	r0, #4294967295
 8009958:	e0d1      	b.n	8009afe <_svfiprintf_r+0x1d2>
 800995a:	2340      	movs	r3, #64	; 0x40
 800995c:	616b      	str	r3, [r5, #20]
 800995e:	2300      	movs	r3, #0
 8009960:	9309      	str	r3, [sp, #36]	; 0x24
 8009962:	2320      	movs	r3, #32
 8009964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009968:	f8cd 800c 	str.w	r8, [sp, #12]
 800996c:	2330      	movs	r3, #48	; 0x30
 800996e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b18 <_svfiprintf_r+0x1ec>
 8009972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009976:	f04f 0901 	mov.w	r9, #1
 800997a:	4623      	mov	r3, r4
 800997c:	469a      	mov	sl, r3
 800997e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009982:	b10a      	cbz	r2, 8009988 <_svfiprintf_r+0x5c>
 8009984:	2a25      	cmp	r2, #37	; 0x25
 8009986:	d1f9      	bne.n	800997c <_svfiprintf_r+0x50>
 8009988:	ebba 0b04 	subs.w	fp, sl, r4
 800998c:	d00b      	beq.n	80099a6 <_svfiprintf_r+0x7a>
 800998e:	465b      	mov	r3, fp
 8009990:	4622      	mov	r2, r4
 8009992:	4629      	mov	r1, r5
 8009994:	4638      	mov	r0, r7
 8009996:	f7ff ff6d 	bl	8009874 <__ssputs_r>
 800999a:	3001      	adds	r0, #1
 800999c:	f000 80aa 	beq.w	8009af4 <_svfiprintf_r+0x1c8>
 80099a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099a2:	445a      	add	r2, fp
 80099a4:	9209      	str	r2, [sp, #36]	; 0x24
 80099a6:	f89a 3000 	ldrb.w	r3, [sl]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 80a2 	beq.w	8009af4 <_svfiprintf_r+0x1c8>
 80099b0:	2300      	movs	r3, #0
 80099b2:	f04f 32ff 	mov.w	r2, #4294967295
 80099b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099ba:	f10a 0a01 	add.w	sl, sl, #1
 80099be:	9304      	str	r3, [sp, #16]
 80099c0:	9307      	str	r3, [sp, #28]
 80099c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099c6:	931a      	str	r3, [sp, #104]	; 0x68
 80099c8:	4654      	mov	r4, sl
 80099ca:	2205      	movs	r2, #5
 80099cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099d0:	4851      	ldr	r0, [pc, #324]	; (8009b18 <_svfiprintf_r+0x1ec>)
 80099d2:	f7f6 fc15 	bl	8000200 <memchr>
 80099d6:	9a04      	ldr	r2, [sp, #16]
 80099d8:	b9d8      	cbnz	r0, 8009a12 <_svfiprintf_r+0xe6>
 80099da:	06d0      	lsls	r0, r2, #27
 80099dc:	bf44      	itt	mi
 80099de:	2320      	movmi	r3, #32
 80099e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099e4:	0711      	lsls	r1, r2, #28
 80099e6:	bf44      	itt	mi
 80099e8:	232b      	movmi	r3, #43	; 0x2b
 80099ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099ee:	f89a 3000 	ldrb.w	r3, [sl]
 80099f2:	2b2a      	cmp	r3, #42	; 0x2a
 80099f4:	d015      	beq.n	8009a22 <_svfiprintf_r+0xf6>
 80099f6:	9a07      	ldr	r2, [sp, #28]
 80099f8:	4654      	mov	r4, sl
 80099fa:	2000      	movs	r0, #0
 80099fc:	f04f 0c0a 	mov.w	ip, #10
 8009a00:	4621      	mov	r1, r4
 8009a02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a06:	3b30      	subs	r3, #48	; 0x30
 8009a08:	2b09      	cmp	r3, #9
 8009a0a:	d94e      	bls.n	8009aaa <_svfiprintf_r+0x17e>
 8009a0c:	b1b0      	cbz	r0, 8009a3c <_svfiprintf_r+0x110>
 8009a0e:	9207      	str	r2, [sp, #28]
 8009a10:	e014      	b.n	8009a3c <_svfiprintf_r+0x110>
 8009a12:	eba0 0308 	sub.w	r3, r0, r8
 8009a16:	fa09 f303 	lsl.w	r3, r9, r3
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	46a2      	mov	sl, r4
 8009a20:	e7d2      	b.n	80099c8 <_svfiprintf_r+0x9c>
 8009a22:	9b03      	ldr	r3, [sp, #12]
 8009a24:	1d19      	adds	r1, r3, #4
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	9103      	str	r1, [sp, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	bfbb      	ittet	lt
 8009a2e:	425b      	neglt	r3, r3
 8009a30:	f042 0202 	orrlt.w	r2, r2, #2
 8009a34:	9307      	strge	r3, [sp, #28]
 8009a36:	9307      	strlt	r3, [sp, #28]
 8009a38:	bfb8      	it	lt
 8009a3a:	9204      	strlt	r2, [sp, #16]
 8009a3c:	7823      	ldrb	r3, [r4, #0]
 8009a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8009a40:	d10c      	bne.n	8009a5c <_svfiprintf_r+0x130>
 8009a42:	7863      	ldrb	r3, [r4, #1]
 8009a44:	2b2a      	cmp	r3, #42	; 0x2a
 8009a46:	d135      	bne.n	8009ab4 <_svfiprintf_r+0x188>
 8009a48:	9b03      	ldr	r3, [sp, #12]
 8009a4a:	1d1a      	adds	r2, r3, #4
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	9203      	str	r2, [sp, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	bfb8      	it	lt
 8009a54:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a58:	3402      	adds	r4, #2
 8009a5a:	9305      	str	r3, [sp, #20]
 8009a5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b28 <_svfiprintf_r+0x1fc>
 8009a60:	7821      	ldrb	r1, [r4, #0]
 8009a62:	2203      	movs	r2, #3
 8009a64:	4650      	mov	r0, sl
 8009a66:	f7f6 fbcb 	bl	8000200 <memchr>
 8009a6a:	b140      	cbz	r0, 8009a7e <_svfiprintf_r+0x152>
 8009a6c:	2340      	movs	r3, #64	; 0x40
 8009a6e:	eba0 000a 	sub.w	r0, r0, sl
 8009a72:	fa03 f000 	lsl.w	r0, r3, r0
 8009a76:	9b04      	ldr	r3, [sp, #16]
 8009a78:	4303      	orrs	r3, r0
 8009a7a:	3401      	adds	r4, #1
 8009a7c:	9304      	str	r3, [sp, #16]
 8009a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a82:	4826      	ldr	r0, [pc, #152]	; (8009b1c <_svfiprintf_r+0x1f0>)
 8009a84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a88:	2206      	movs	r2, #6
 8009a8a:	f7f6 fbb9 	bl	8000200 <memchr>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d038      	beq.n	8009b04 <_svfiprintf_r+0x1d8>
 8009a92:	4b23      	ldr	r3, [pc, #140]	; (8009b20 <_svfiprintf_r+0x1f4>)
 8009a94:	bb1b      	cbnz	r3, 8009ade <_svfiprintf_r+0x1b2>
 8009a96:	9b03      	ldr	r3, [sp, #12]
 8009a98:	3307      	adds	r3, #7
 8009a9a:	f023 0307 	bic.w	r3, r3, #7
 8009a9e:	3308      	adds	r3, #8
 8009aa0:	9303      	str	r3, [sp, #12]
 8009aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa4:	4433      	add	r3, r6
 8009aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa8:	e767      	b.n	800997a <_svfiprintf_r+0x4e>
 8009aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aae:	460c      	mov	r4, r1
 8009ab0:	2001      	movs	r0, #1
 8009ab2:	e7a5      	b.n	8009a00 <_svfiprintf_r+0xd4>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	3401      	adds	r4, #1
 8009ab8:	9305      	str	r3, [sp, #20]
 8009aba:	4619      	mov	r1, r3
 8009abc:	f04f 0c0a 	mov.w	ip, #10
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ac6:	3a30      	subs	r2, #48	; 0x30
 8009ac8:	2a09      	cmp	r2, #9
 8009aca:	d903      	bls.n	8009ad4 <_svfiprintf_r+0x1a8>
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d0c5      	beq.n	8009a5c <_svfiprintf_r+0x130>
 8009ad0:	9105      	str	r1, [sp, #20]
 8009ad2:	e7c3      	b.n	8009a5c <_svfiprintf_r+0x130>
 8009ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ad8:	4604      	mov	r4, r0
 8009ada:	2301      	movs	r3, #1
 8009adc:	e7f0      	b.n	8009ac0 <_svfiprintf_r+0x194>
 8009ade:	ab03      	add	r3, sp, #12
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	462a      	mov	r2, r5
 8009ae4:	4b0f      	ldr	r3, [pc, #60]	; (8009b24 <_svfiprintf_r+0x1f8>)
 8009ae6:	a904      	add	r1, sp, #16
 8009ae8:	4638      	mov	r0, r7
 8009aea:	f7fc f939 	bl	8005d60 <_printf_float>
 8009aee:	1c42      	adds	r2, r0, #1
 8009af0:	4606      	mov	r6, r0
 8009af2:	d1d6      	bne.n	8009aa2 <_svfiprintf_r+0x176>
 8009af4:	89ab      	ldrh	r3, [r5, #12]
 8009af6:	065b      	lsls	r3, r3, #25
 8009af8:	f53f af2c 	bmi.w	8009954 <_svfiprintf_r+0x28>
 8009afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009afe:	b01d      	add	sp, #116	; 0x74
 8009b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b04:	ab03      	add	r3, sp, #12
 8009b06:	9300      	str	r3, [sp, #0]
 8009b08:	462a      	mov	r2, r5
 8009b0a:	4b06      	ldr	r3, [pc, #24]	; (8009b24 <_svfiprintf_r+0x1f8>)
 8009b0c:	a904      	add	r1, sp, #16
 8009b0e:	4638      	mov	r0, r7
 8009b10:	f7fc fbca 	bl	80062a8 <_printf_i>
 8009b14:	e7eb      	b.n	8009aee <_svfiprintf_r+0x1c2>
 8009b16:	bf00      	nop
 8009b18:	0800a9cc 	.word	0x0800a9cc
 8009b1c:	0800a9d6 	.word	0x0800a9d6
 8009b20:	08005d61 	.word	0x08005d61
 8009b24:	08009875 	.word	0x08009875
 8009b28:	0800a9d2 	.word	0x0800a9d2

08009b2c <__sfputc_r>:
 8009b2c:	6893      	ldr	r3, [r2, #8]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	b410      	push	{r4}
 8009b34:	6093      	str	r3, [r2, #8]
 8009b36:	da08      	bge.n	8009b4a <__sfputc_r+0x1e>
 8009b38:	6994      	ldr	r4, [r2, #24]
 8009b3a:	42a3      	cmp	r3, r4
 8009b3c:	db01      	blt.n	8009b42 <__sfputc_r+0x16>
 8009b3e:	290a      	cmp	r1, #10
 8009b40:	d103      	bne.n	8009b4a <__sfputc_r+0x1e>
 8009b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b46:	f000 b9bb 	b.w	8009ec0 <__swbuf_r>
 8009b4a:	6813      	ldr	r3, [r2, #0]
 8009b4c:	1c58      	adds	r0, r3, #1
 8009b4e:	6010      	str	r0, [r2, #0]
 8009b50:	7019      	strb	r1, [r3, #0]
 8009b52:	4608      	mov	r0, r1
 8009b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <__sfputs_r>:
 8009b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	460f      	mov	r7, r1
 8009b60:	4614      	mov	r4, r2
 8009b62:	18d5      	adds	r5, r2, r3
 8009b64:	42ac      	cmp	r4, r5
 8009b66:	d101      	bne.n	8009b6c <__sfputs_r+0x12>
 8009b68:	2000      	movs	r0, #0
 8009b6a:	e007      	b.n	8009b7c <__sfputs_r+0x22>
 8009b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b70:	463a      	mov	r2, r7
 8009b72:	4630      	mov	r0, r6
 8009b74:	f7ff ffda 	bl	8009b2c <__sfputc_r>
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	d1f3      	bne.n	8009b64 <__sfputs_r+0xa>
 8009b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b80 <_vfiprintf_r>:
 8009b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b84:	460d      	mov	r5, r1
 8009b86:	b09d      	sub	sp, #116	; 0x74
 8009b88:	4614      	mov	r4, r2
 8009b8a:	4698      	mov	r8, r3
 8009b8c:	4606      	mov	r6, r0
 8009b8e:	b118      	cbz	r0, 8009b98 <_vfiprintf_r+0x18>
 8009b90:	6983      	ldr	r3, [r0, #24]
 8009b92:	b90b      	cbnz	r3, 8009b98 <_vfiprintf_r+0x18>
 8009b94:	f7fe fc7a 	bl	800848c <__sinit>
 8009b98:	4b89      	ldr	r3, [pc, #548]	; (8009dc0 <_vfiprintf_r+0x240>)
 8009b9a:	429d      	cmp	r5, r3
 8009b9c:	d11b      	bne.n	8009bd6 <_vfiprintf_r+0x56>
 8009b9e:	6875      	ldr	r5, [r6, #4]
 8009ba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ba2:	07d9      	lsls	r1, r3, #31
 8009ba4:	d405      	bmi.n	8009bb2 <_vfiprintf_r+0x32>
 8009ba6:	89ab      	ldrh	r3, [r5, #12]
 8009ba8:	059a      	lsls	r2, r3, #22
 8009baa:	d402      	bmi.n	8009bb2 <_vfiprintf_r+0x32>
 8009bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bae:	f7ff f87e 	bl	8008cae <__retarget_lock_acquire_recursive>
 8009bb2:	89ab      	ldrh	r3, [r5, #12]
 8009bb4:	071b      	lsls	r3, r3, #28
 8009bb6:	d501      	bpl.n	8009bbc <_vfiprintf_r+0x3c>
 8009bb8:	692b      	ldr	r3, [r5, #16]
 8009bba:	b9eb      	cbnz	r3, 8009bf8 <_vfiprintf_r+0x78>
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	f000 f9f0 	bl	8009fa4 <__swsetup_r>
 8009bc4:	b1c0      	cbz	r0, 8009bf8 <_vfiprintf_r+0x78>
 8009bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bc8:	07dc      	lsls	r4, r3, #31
 8009bca:	d50e      	bpl.n	8009bea <_vfiprintf_r+0x6a>
 8009bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd0:	b01d      	add	sp, #116	; 0x74
 8009bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd6:	4b7b      	ldr	r3, [pc, #492]	; (8009dc4 <_vfiprintf_r+0x244>)
 8009bd8:	429d      	cmp	r5, r3
 8009bda:	d101      	bne.n	8009be0 <_vfiprintf_r+0x60>
 8009bdc:	68b5      	ldr	r5, [r6, #8]
 8009bde:	e7df      	b.n	8009ba0 <_vfiprintf_r+0x20>
 8009be0:	4b79      	ldr	r3, [pc, #484]	; (8009dc8 <_vfiprintf_r+0x248>)
 8009be2:	429d      	cmp	r5, r3
 8009be4:	bf08      	it	eq
 8009be6:	68f5      	ldreq	r5, [r6, #12]
 8009be8:	e7da      	b.n	8009ba0 <_vfiprintf_r+0x20>
 8009bea:	89ab      	ldrh	r3, [r5, #12]
 8009bec:	0598      	lsls	r0, r3, #22
 8009bee:	d4ed      	bmi.n	8009bcc <_vfiprintf_r+0x4c>
 8009bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bf2:	f7ff f85d 	bl	8008cb0 <__retarget_lock_release_recursive>
 8009bf6:	e7e9      	b.n	8009bcc <_vfiprintf_r+0x4c>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8009bfc:	2320      	movs	r3, #32
 8009bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c06:	2330      	movs	r3, #48	; 0x30
 8009c08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009dcc <_vfiprintf_r+0x24c>
 8009c0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c10:	f04f 0901 	mov.w	r9, #1
 8009c14:	4623      	mov	r3, r4
 8009c16:	469a      	mov	sl, r3
 8009c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c1c:	b10a      	cbz	r2, 8009c22 <_vfiprintf_r+0xa2>
 8009c1e:	2a25      	cmp	r2, #37	; 0x25
 8009c20:	d1f9      	bne.n	8009c16 <_vfiprintf_r+0x96>
 8009c22:	ebba 0b04 	subs.w	fp, sl, r4
 8009c26:	d00b      	beq.n	8009c40 <_vfiprintf_r+0xc0>
 8009c28:	465b      	mov	r3, fp
 8009c2a:	4622      	mov	r2, r4
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f7ff ff93 	bl	8009b5a <__sfputs_r>
 8009c34:	3001      	adds	r0, #1
 8009c36:	f000 80aa 	beq.w	8009d8e <_vfiprintf_r+0x20e>
 8009c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c3c:	445a      	add	r2, fp
 8009c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8009c40:	f89a 3000 	ldrb.w	r3, [sl]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 80a2 	beq.w	8009d8e <_vfiprintf_r+0x20e>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c54:	f10a 0a01 	add.w	sl, sl, #1
 8009c58:	9304      	str	r3, [sp, #16]
 8009c5a:	9307      	str	r3, [sp, #28]
 8009c5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c60:	931a      	str	r3, [sp, #104]	; 0x68
 8009c62:	4654      	mov	r4, sl
 8009c64:	2205      	movs	r2, #5
 8009c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c6a:	4858      	ldr	r0, [pc, #352]	; (8009dcc <_vfiprintf_r+0x24c>)
 8009c6c:	f7f6 fac8 	bl	8000200 <memchr>
 8009c70:	9a04      	ldr	r2, [sp, #16]
 8009c72:	b9d8      	cbnz	r0, 8009cac <_vfiprintf_r+0x12c>
 8009c74:	06d1      	lsls	r1, r2, #27
 8009c76:	bf44      	itt	mi
 8009c78:	2320      	movmi	r3, #32
 8009c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c7e:	0713      	lsls	r3, r2, #28
 8009c80:	bf44      	itt	mi
 8009c82:	232b      	movmi	r3, #43	; 0x2b
 8009c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c88:	f89a 3000 	ldrb.w	r3, [sl]
 8009c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c8e:	d015      	beq.n	8009cbc <_vfiprintf_r+0x13c>
 8009c90:	9a07      	ldr	r2, [sp, #28]
 8009c92:	4654      	mov	r4, sl
 8009c94:	2000      	movs	r0, #0
 8009c96:	f04f 0c0a 	mov.w	ip, #10
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ca0:	3b30      	subs	r3, #48	; 0x30
 8009ca2:	2b09      	cmp	r3, #9
 8009ca4:	d94e      	bls.n	8009d44 <_vfiprintf_r+0x1c4>
 8009ca6:	b1b0      	cbz	r0, 8009cd6 <_vfiprintf_r+0x156>
 8009ca8:	9207      	str	r2, [sp, #28]
 8009caa:	e014      	b.n	8009cd6 <_vfiprintf_r+0x156>
 8009cac:	eba0 0308 	sub.w	r3, r0, r8
 8009cb0:	fa09 f303 	lsl.w	r3, r9, r3
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	9304      	str	r3, [sp, #16]
 8009cb8:	46a2      	mov	sl, r4
 8009cba:	e7d2      	b.n	8009c62 <_vfiprintf_r+0xe2>
 8009cbc:	9b03      	ldr	r3, [sp, #12]
 8009cbe:	1d19      	adds	r1, r3, #4
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	9103      	str	r1, [sp, #12]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bfbb      	ittet	lt
 8009cc8:	425b      	neglt	r3, r3
 8009cca:	f042 0202 	orrlt.w	r2, r2, #2
 8009cce:	9307      	strge	r3, [sp, #28]
 8009cd0:	9307      	strlt	r3, [sp, #28]
 8009cd2:	bfb8      	it	lt
 8009cd4:	9204      	strlt	r2, [sp, #16]
 8009cd6:	7823      	ldrb	r3, [r4, #0]
 8009cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8009cda:	d10c      	bne.n	8009cf6 <_vfiprintf_r+0x176>
 8009cdc:	7863      	ldrb	r3, [r4, #1]
 8009cde:	2b2a      	cmp	r3, #42	; 0x2a
 8009ce0:	d135      	bne.n	8009d4e <_vfiprintf_r+0x1ce>
 8009ce2:	9b03      	ldr	r3, [sp, #12]
 8009ce4:	1d1a      	adds	r2, r3, #4
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	9203      	str	r2, [sp, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	bfb8      	it	lt
 8009cee:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cf2:	3402      	adds	r4, #2
 8009cf4:	9305      	str	r3, [sp, #20]
 8009cf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ddc <_vfiprintf_r+0x25c>
 8009cfa:	7821      	ldrb	r1, [r4, #0]
 8009cfc:	2203      	movs	r2, #3
 8009cfe:	4650      	mov	r0, sl
 8009d00:	f7f6 fa7e 	bl	8000200 <memchr>
 8009d04:	b140      	cbz	r0, 8009d18 <_vfiprintf_r+0x198>
 8009d06:	2340      	movs	r3, #64	; 0x40
 8009d08:	eba0 000a 	sub.w	r0, r0, sl
 8009d0c:	fa03 f000 	lsl.w	r0, r3, r0
 8009d10:	9b04      	ldr	r3, [sp, #16]
 8009d12:	4303      	orrs	r3, r0
 8009d14:	3401      	adds	r4, #1
 8009d16:	9304      	str	r3, [sp, #16]
 8009d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d1c:	482c      	ldr	r0, [pc, #176]	; (8009dd0 <_vfiprintf_r+0x250>)
 8009d1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d22:	2206      	movs	r2, #6
 8009d24:	f7f6 fa6c 	bl	8000200 <memchr>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d03f      	beq.n	8009dac <_vfiprintf_r+0x22c>
 8009d2c:	4b29      	ldr	r3, [pc, #164]	; (8009dd4 <_vfiprintf_r+0x254>)
 8009d2e:	bb1b      	cbnz	r3, 8009d78 <_vfiprintf_r+0x1f8>
 8009d30:	9b03      	ldr	r3, [sp, #12]
 8009d32:	3307      	adds	r3, #7
 8009d34:	f023 0307 	bic.w	r3, r3, #7
 8009d38:	3308      	adds	r3, #8
 8009d3a:	9303      	str	r3, [sp, #12]
 8009d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d3e:	443b      	add	r3, r7
 8009d40:	9309      	str	r3, [sp, #36]	; 0x24
 8009d42:	e767      	b.n	8009c14 <_vfiprintf_r+0x94>
 8009d44:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d48:	460c      	mov	r4, r1
 8009d4a:	2001      	movs	r0, #1
 8009d4c:	e7a5      	b.n	8009c9a <_vfiprintf_r+0x11a>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	3401      	adds	r4, #1
 8009d52:	9305      	str	r3, [sp, #20]
 8009d54:	4619      	mov	r1, r3
 8009d56:	f04f 0c0a 	mov.w	ip, #10
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d60:	3a30      	subs	r2, #48	; 0x30
 8009d62:	2a09      	cmp	r2, #9
 8009d64:	d903      	bls.n	8009d6e <_vfiprintf_r+0x1ee>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d0c5      	beq.n	8009cf6 <_vfiprintf_r+0x176>
 8009d6a:	9105      	str	r1, [sp, #20]
 8009d6c:	e7c3      	b.n	8009cf6 <_vfiprintf_r+0x176>
 8009d6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d72:	4604      	mov	r4, r0
 8009d74:	2301      	movs	r3, #1
 8009d76:	e7f0      	b.n	8009d5a <_vfiprintf_r+0x1da>
 8009d78:	ab03      	add	r3, sp, #12
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	462a      	mov	r2, r5
 8009d7e:	4b16      	ldr	r3, [pc, #88]	; (8009dd8 <_vfiprintf_r+0x258>)
 8009d80:	a904      	add	r1, sp, #16
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7fb ffec 	bl	8005d60 <_printf_float>
 8009d88:	4607      	mov	r7, r0
 8009d8a:	1c78      	adds	r0, r7, #1
 8009d8c:	d1d6      	bne.n	8009d3c <_vfiprintf_r+0x1bc>
 8009d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d90:	07d9      	lsls	r1, r3, #31
 8009d92:	d405      	bmi.n	8009da0 <_vfiprintf_r+0x220>
 8009d94:	89ab      	ldrh	r3, [r5, #12]
 8009d96:	059a      	lsls	r2, r3, #22
 8009d98:	d402      	bmi.n	8009da0 <_vfiprintf_r+0x220>
 8009d9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d9c:	f7fe ff88 	bl	8008cb0 <__retarget_lock_release_recursive>
 8009da0:	89ab      	ldrh	r3, [r5, #12]
 8009da2:	065b      	lsls	r3, r3, #25
 8009da4:	f53f af12 	bmi.w	8009bcc <_vfiprintf_r+0x4c>
 8009da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009daa:	e711      	b.n	8009bd0 <_vfiprintf_r+0x50>
 8009dac:	ab03      	add	r3, sp, #12
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	462a      	mov	r2, r5
 8009db2:	4b09      	ldr	r3, [pc, #36]	; (8009dd8 <_vfiprintf_r+0x258>)
 8009db4:	a904      	add	r1, sp, #16
 8009db6:	4630      	mov	r0, r6
 8009db8:	f7fc fa76 	bl	80062a8 <_printf_i>
 8009dbc:	e7e4      	b.n	8009d88 <_vfiprintf_r+0x208>
 8009dbe:	bf00      	nop
 8009dc0:	0800a7b4 	.word	0x0800a7b4
 8009dc4:	0800a7d4 	.word	0x0800a7d4
 8009dc8:	0800a794 	.word	0x0800a794
 8009dcc:	0800a9cc 	.word	0x0800a9cc
 8009dd0:	0800a9d6 	.word	0x0800a9d6
 8009dd4:	08005d61 	.word	0x08005d61
 8009dd8:	08009b5b 	.word	0x08009b5b
 8009ddc:	0800a9d2 	.word	0x0800a9d2

08009de0 <nan>:
 8009de0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009de8 <nan+0x8>
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	00000000 	.word	0x00000000
 8009dec:	7ff80000 	.word	0x7ff80000

08009df0 <_sbrk_r>:
 8009df0:	b538      	push	{r3, r4, r5, lr}
 8009df2:	4d06      	ldr	r5, [pc, #24]	; (8009e0c <_sbrk_r+0x1c>)
 8009df4:	2300      	movs	r3, #0
 8009df6:	4604      	mov	r4, r0
 8009df8:	4608      	mov	r0, r1
 8009dfa:	602b      	str	r3, [r5, #0]
 8009dfc:	f7f7 fd78 	bl	80018f0 <_sbrk>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d102      	bne.n	8009e0a <_sbrk_r+0x1a>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	b103      	cbz	r3, 8009e0a <_sbrk_r+0x1a>
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	20000444 	.word	0x20000444

08009e10 <__sread>:
 8009e10:	b510      	push	{r4, lr}
 8009e12:	460c      	mov	r4, r1
 8009e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e18:	f000 fb02 	bl	800a420 <_read_r>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	bfab      	itete	ge
 8009e20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e22:	89a3      	ldrhlt	r3, [r4, #12]
 8009e24:	181b      	addge	r3, r3, r0
 8009e26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e2a:	bfac      	ite	ge
 8009e2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e2e:	81a3      	strhlt	r3, [r4, #12]
 8009e30:	bd10      	pop	{r4, pc}

08009e32 <__swrite>:
 8009e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e36:	461f      	mov	r7, r3
 8009e38:	898b      	ldrh	r3, [r1, #12]
 8009e3a:	05db      	lsls	r3, r3, #23
 8009e3c:	4605      	mov	r5, r0
 8009e3e:	460c      	mov	r4, r1
 8009e40:	4616      	mov	r6, r2
 8009e42:	d505      	bpl.n	8009e50 <__swrite+0x1e>
 8009e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e48:	2302      	movs	r3, #2
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f000 fa1a 	bl	800a284 <_lseek_r>
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e5a:	81a3      	strh	r3, [r4, #12]
 8009e5c:	4632      	mov	r2, r6
 8009e5e:	463b      	mov	r3, r7
 8009e60:	4628      	mov	r0, r5
 8009e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e66:	f000 b88b 	b.w	8009f80 <_write_r>

08009e6a <__sseek>:
 8009e6a:	b510      	push	{r4, lr}
 8009e6c:	460c      	mov	r4, r1
 8009e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e72:	f000 fa07 	bl	800a284 <_lseek_r>
 8009e76:	1c43      	adds	r3, r0, #1
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	bf15      	itete	ne
 8009e7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e86:	81a3      	strheq	r3, [r4, #12]
 8009e88:	bf18      	it	ne
 8009e8a:	81a3      	strhne	r3, [r4, #12]
 8009e8c:	bd10      	pop	{r4, pc}

08009e8e <__sclose>:
 8009e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e92:	f000 b913 	b.w	800a0bc <_close_r>

08009e96 <strncmp>:
 8009e96:	b510      	push	{r4, lr}
 8009e98:	b17a      	cbz	r2, 8009eba <strncmp+0x24>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	3901      	subs	r1, #1
 8009e9e:	1884      	adds	r4, r0, r2
 8009ea0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009ea4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009ea8:	4290      	cmp	r0, r2
 8009eaa:	d101      	bne.n	8009eb0 <strncmp+0x1a>
 8009eac:	42a3      	cmp	r3, r4
 8009eae:	d101      	bne.n	8009eb4 <strncmp+0x1e>
 8009eb0:	1a80      	subs	r0, r0, r2
 8009eb2:	bd10      	pop	{r4, pc}
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d1f3      	bne.n	8009ea0 <strncmp+0xa>
 8009eb8:	e7fa      	b.n	8009eb0 <strncmp+0x1a>
 8009eba:	4610      	mov	r0, r2
 8009ebc:	e7f9      	b.n	8009eb2 <strncmp+0x1c>
	...

08009ec0 <__swbuf_r>:
 8009ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec2:	460e      	mov	r6, r1
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	4605      	mov	r5, r0
 8009ec8:	b118      	cbz	r0, 8009ed2 <__swbuf_r+0x12>
 8009eca:	6983      	ldr	r3, [r0, #24]
 8009ecc:	b90b      	cbnz	r3, 8009ed2 <__swbuf_r+0x12>
 8009ece:	f7fe fadd 	bl	800848c <__sinit>
 8009ed2:	4b21      	ldr	r3, [pc, #132]	; (8009f58 <__swbuf_r+0x98>)
 8009ed4:	429c      	cmp	r4, r3
 8009ed6:	d12b      	bne.n	8009f30 <__swbuf_r+0x70>
 8009ed8:	686c      	ldr	r4, [r5, #4]
 8009eda:	69a3      	ldr	r3, [r4, #24]
 8009edc:	60a3      	str	r3, [r4, #8]
 8009ede:	89a3      	ldrh	r3, [r4, #12]
 8009ee0:	071a      	lsls	r2, r3, #28
 8009ee2:	d52f      	bpl.n	8009f44 <__swbuf_r+0x84>
 8009ee4:	6923      	ldr	r3, [r4, #16]
 8009ee6:	b36b      	cbz	r3, 8009f44 <__swbuf_r+0x84>
 8009ee8:	6923      	ldr	r3, [r4, #16]
 8009eea:	6820      	ldr	r0, [r4, #0]
 8009eec:	1ac0      	subs	r0, r0, r3
 8009eee:	6963      	ldr	r3, [r4, #20]
 8009ef0:	b2f6      	uxtb	r6, r6
 8009ef2:	4283      	cmp	r3, r0
 8009ef4:	4637      	mov	r7, r6
 8009ef6:	dc04      	bgt.n	8009f02 <__swbuf_r+0x42>
 8009ef8:	4621      	mov	r1, r4
 8009efa:	4628      	mov	r0, r5
 8009efc:	f000 f974 	bl	800a1e8 <_fflush_r>
 8009f00:	bb30      	cbnz	r0, 8009f50 <__swbuf_r+0x90>
 8009f02:	68a3      	ldr	r3, [r4, #8]
 8009f04:	3b01      	subs	r3, #1
 8009f06:	60a3      	str	r3, [r4, #8]
 8009f08:	6823      	ldr	r3, [r4, #0]
 8009f0a:	1c5a      	adds	r2, r3, #1
 8009f0c:	6022      	str	r2, [r4, #0]
 8009f0e:	701e      	strb	r6, [r3, #0]
 8009f10:	6963      	ldr	r3, [r4, #20]
 8009f12:	3001      	adds	r0, #1
 8009f14:	4283      	cmp	r3, r0
 8009f16:	d004      	beq.n	8009f22 <__swbuf_r+0x62>
 8009f18:	89a3      	ldrh	r3, [r4, #12]
 8009f1a:	07db      	lsls	r3, r3, #31
 8009f1c:	d506      	bpl.n	8009f2c <__swbuf_r+0x6c>
 8009f1e:	2e0a      	cmp	r6, #10
 8009f20:	d104      	bne.n	8009f2c <__swbuf_r+0x6c>
 8009f22:	4621      	mov	r1, r4
 8009f24:	4628      	mov	r0, r5
 8009f26:	f000 f95f 	bl	800a1e8 <_fflush_r>
 8009f2a:	b988      	cbnz	r0, 8009f50 <__swbuf_r+0x90>
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f30:	4b0a      	ldr	r3, [pc, #40]	; (8009f5c <__swbuf_r+0x9c>)
 8009f32:	429c      	cmp	r4, r3
 8009f34:	d101      	bne.n	8009f3a <__swbuf_r+0x7a>
 8009f36:	68ac      	ldr	r4, [r5, #8]
 8009f38:	e7cf      	b.n	8009eda <__swbuf_r+0x1a>
 8009f3a:	4b09      	ldr	r3, [pc, #36]	; (8009f60 <__swbuf_r+0xa0>)
 8009f3c:	429c      	cmp	r4, r3
 8009f3e:	bf08      	it	eq
 8009f40:	68ec      	ldreq	r4, [r5, #12]
 8009f42:	e7ca      	b.n	8009eda <__swbuf_r+0x1a>
 8009f44:	4621      	mov	r1, r4
 8009f46:	4628      	mov	r0, r5
 8009f48:	f000 f82c 	bl	8009fa4 <__swsetup_r>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	d0cb      	beq.n	8009ee8 <__swbuf_r+0x28>
 8009f50:	f04f 37ff 	mov.w	r7, #4294967295
 8009f54:	e7ea      	b.n	8009f2c <__swbuf_r+0x6c>
 8009f56:	bf00      	nop
 8009f58:	0800a7b4 	.word	0x0800a7b4
 8009f5c:	0800a7d4 	.word	0x0800a7d4
 8009f60:	0800a794 	.word	0x0800a794

08009f64 <__ascii_wctomb>:
 8009f64:	b149      	cbz	r1, 8009f7a <__ascii_wctomb+0x16>
 8009f66:	2aff      	cmp	r2, #255	; 0xff
 8009f68:	bf85      	ittet	hi
 8009f6a:	238a      	movhi	r3, #138	; 0x8a
 8009f6c:	6003      	strhi	r3, [r0, #0]
 8009f6e:	700a      	strbls	r2, [r1, #0]
 8009f70:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f74:	bf98      	it	ls
 8009f76:	2001      	movls	r0, #1
 8009f78:	4770      	bx	lr
 8009f7a:	4608      	mov	r0, r1
 8009f7c:	4770      	bx	lr
	...

08009f80 <_write_r>:
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	4d07      	ldr	r5, [pc, #28]	; (8009fa0 <_write_r+0x20>)
 8009f84:	4604      	mov	r4, r0
 8009f86:	4608      	mov	r0, r1
 8009f88:	4611      	mov	r1, r2
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	602a      	str	r2, [r5, #0]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f7f7 fc5d 	bl	800184e <_write>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d102      	bne.n	8009f9e <_write_r+0x1e>
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	b103      	cbz	r3, 8009f9e <_write_r+0x1e>
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}
 8009fa0:	20000444 	.word	0x20000444

08009fa4 <__swsetup_r>:
 8009fa4:	4b32      	ldr	r3, [pc, #200]	; (800a070 <__swsetup_r+0xcc>)
 8009fa6:	b570      	push	{r4, r5, r6, lr}
 8009fa8:	681d      	ldr	r5, [r3, #0]
 8009faa:	4606      	mov	r6, r0
 8009fac:	460c      	mov	r4, r1
 8009fae:	b125      	cbz	r5, 8009fba <__swsetup_r+0x16>
 8009fb0:	69ab      	ldr	r3, [r5, #24]
 8009fb2:	b913      	cbnz	r3, 8009fba <__swsetup_r+0x16>
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	f7fe fa69 	bl	800848c <__sinit>
 8009fba:	4b2e      	ldr	r3, [pc, #184]	; (800a074 <__swsetup_r+0xd0>)
 8009fbc:	429c      	cmp	r4, r3
 8009fbe:	d10f      	bne.n	8009fe0 <__swsetup_r+0x3c>
 8009fc0:	686c      	ldr	r4, [r5, #4]
 8009fc2:	89a3      	ldrh	r3, [r4, #12]
 8009fc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fc8:	0719      	lsls	r1, r3, #28
 8009fca:	d42c      	bmi.n	800a026 <__swsetup_r+0x82>
 8009fcc:	06dd      	lsls	r5, r3, #27
 8009fce:	d411      	bmi.n	8009ff4 <__swsetup_r+0x50>
 8009fd0:	2309      	movs	r3, #9
 8009fd2:	6033      	str	r3, [r6, #0]
 8009fd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fd8:	81a3      	strh	r3, [r4, #12]
 8009fda:	f04f 30ff 	mov.w	r0, #4294967295
 8009fde:	e03e      	b.n	800a05e <__swsetup_r+0xba>
 8009fe0:	4b25      	ldr	r3, [pc, #148]	; (800a078 <__swsetup_r+0xd4>)
 8009fe2:	429c      	cmp	r4, r3
 8009fe4:	d101      	bne.n	8009fea <__swsetup_r+0x46>
 8009fe6:	68ac      	ldr	r4, [r5, #8]
 8009fe8:	e7eb      	b.n	8009fc2 <__swsetup_r+0x1e>
 8009fea:	4b24      	ldr	r3, [pc, #144]	; (800a07c <__swsetup_r+0xd8>)
 8009fec:	429c      	cmp	r4, r3
 8009fee:	bf08      	it	eq
 8009ff0:	68ec      	ldreq	r4, [r5, #12]
 8009ff2:	e7e6      	b.n	8009fc2 <__swsetup_r+0x1e>
 8009ff4:	0758      	lsls	r0, r3, #29
 8009ff6:	d512      	bpl.n	800a01e <__swsetup_r+0x7a>
 8009ff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ffa:	b141      	cbz	r1, 800a00e <__swsetup_r+0x6a>
 8009ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a000:	4299      	cmp	r1, r3
 800a002:	d002      	beq.n	800a00a <__swsetup_r+0x66>
 800a004:	4630      	mov	r0, r6
 800a006:	f7ff fb55 	bl	80096b4 <_free_r>
 800a00a:	2300      	movs	r3, #0
 800a00c:	6363      	str	r3, [r4, #52]	; 0x34
 800a00e:	89a3      	ldrh	r3, [r4, #12]
 800a010:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a014:	81a3      	strh	r3, [r4, #12]
 800a016:	2300      	movs	r3, #0
 800a018:	6063      	str	r3, [r4, #4]
 800a01a:	6923      	ldr	r3, [r4, #16]
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	f043 0308 	orr.w	r3, r3, #8
 800a024:	81a3      	strh	r3, [r4, #12]
 800a026:	6923      	ldr	r3, [r4, #16]
 800a028:	b94b      	cbnz	r3, 800a03e <__swsetup_r+0x9a>
 800a02a:	89a3      	ldrh	r3, [r4, #12]
 800a02c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a034:	d003      	beq.n	800a03e <__swsetup_r+0x9a>
 800a036:	4621      	mov	r1, r4
 800a038:	4630      	mov	r0, r6
 800a03a:	f000 f95b 	bl	800a2f4 <__smakebuf_r>
 800a03e:	89a0      	ldrh	r0, [r4, #12]
 800a040:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a044:	f010 0301 	ands.w	r3, r0, #1
 800a048:	d00a      	beq.n	800a060 <__swsetup_r+0xbc>
 800a04a:	2300      	movs	r3, #0
 800a04c:	60a3      	str	r3, [r4, #8]
 800a04e:	6963      	ldr	r3, [r4, #20]
 800a050:	425b      	negs	r3, r3
 800a052:	61a3      	str	r3, [r4, #24]
 800a054:	6923      	ldr	r3, [r4, #16]
 800a056:	b943      	cbnz	r3, 800a06a <__swsetup_r+0xc6>
 800a058:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a05c:	d1ba      	bne.n	8009fd4 <__swsetup_r+0x30>
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
 800a060:	0781      	lsls	r1, r0, #30
 800a062:	bf58      	it	pl
 800a064:	6963      	ldrpl	r3, [r4, #20]
 800a066:	60a3      	str	r3, [r4, #8]
 800a068:	e7f4      	b.n	800a054 <__swsetup_r+0xb0>
 800a06a:	2000      	movs	r0, #0
 800a06c:	e7f7      	b.n	800a05e <__swsetup_r+0xba>
 800a06e:	bf00      	nop
 800a070:	2000000c 	.word	0x2000000c
 800a074:	0800a7b4 	.word	0x0800a7b4
 800a078:	0800a7d4 	.word	0x0800a7d4
 800a07c:	0800a794 	.word	0x0800a794

0800a080 <__assert_func>:
 800a080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a082:	4614      	mov	r4, r2
 800a084:	461a      	mov	r2, r3
 800a086:	4b09      	ldr	r3, [pc, #36]	; (800a0ac <__assert_func+0x2c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4605      	mov	r5, r0
 800a08c:	68d8      	ldr	r0, [r3, #12]
 800a08e:	b14c      	cbz	r4, 800a0a4 <__assert_func+0x24>
 800a090:	4b07      	ldr	r3, [pc, #28]	; (800a0b0 <__assert_func+0x30>)
 800a092:	9100      	str	r1, [sp, #0]
 800a094:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a098:	4906      	ldr	r1, [pc, #24]	; (800a0b4 <__assert_func+0x34>)
 800a09a:	462b      	mov	r3, r5
 800a09c:	f000 f8e0 	bl	800a260 <fiprintf>
 800a0a0:	f000 f9d0 	bl	800a444 <abort>
 800a0a4:	4b04      	ldr	r3, [pc, #16]	; (800a0b8 <__assert_func+0x38>)
 800a0a6:	461c      	mov	r4, r3
 800a0a8:	e7f3      	b.n	800a092 <__assert_func+0x12>
 800a0aa:	bf00      	nop
 800a0ac:	2000000c 	.word	0x2000000c
 800a0b0:	0800a9dd 	.word	0x0800a9dd
 800a0b4:	0800a9ea 	.word	0x0800a9ea
 800a0b8:	0800aa18 	.word	0x0800aa18

0800a0bc <_close_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	4d06      	ldr	r5, [pc, #24]	; (800a0d8 <_close_r+0x1c>)
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	4608      	mov	r0, r1
 800a0c6:	602b      	str	r3, [r5, #0]
 800a0c8:	f7f7 fbdd 	bl	8001886 <_close>
 800a0cc:	1c43      	adds	r3, r0, #1
 800a0ce:	d102      	bne.n	800a0d6 <_close_r+0x1a>
 800a0d0:	682b      	ldr	r3, [r5, #0]
 800a0d2:	b103      	cbz	r3, 800a0d6 <_close_r+0x1a>
 800a0d4:	6023      	str	r3, [r4, #0]
 800a0d6:	bd38      	pop	{r3, r4, r5, pc}
 800a0d8:	20000444 	.word	0x20000444

0800a0dc <__sflush_r>:
 800a0dc:	898a      	ldrh	r2, [r1, #12]
 800a0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	0710      	lsls	r0, r2, #28
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	d458      	bmi.n	800a19c <__sflush_r+0xc0>
 800a0ea:	684b      	ldr	r3, [r1, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dc05      	bgt.n	800a0fc <__sflush_r+0x20>
 800a0f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	dc02      	bgt.n	800a0fc <__sflush_r+0x20>
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0fe:	2e00      	cmp	r6, #0
 800a100:	d0f9      	beq.n	800a0f6 <__sflush_r+0x1a>
 800a102:	2300      	movs	r3, #0
 800a104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a108:	682f      	ldr	r7, [r5, #0]
 800a10a:	602b      	str	r3, [r5, #0]
 800a10c:	d032      	beq.n	800a174 <__sflush_r+0x98>
 800a10e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a110:	89a3      	ldrh	r3, [r4, #12]
 800a112:	075a      	lsls	r2, r3, #29
 800a114:	d505      	bpl.n	800a122 <__sflush_r+0x46>
 800a116:	6863      	ldr	r3, [r4, #4]
 800a118:	1ac0      	subs	r0, r0, r3
 800a11a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a11c:	b10b      	cbz	r3, 800a122 <__sflush_r+0x46>
 800a11e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a120:	1ac0      	subs	r0, r0, r3
 800a122:	2300      	movs	r3, #0
 800a124:	4602      	mov	r2, r0
 800a126:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a128:	6a21      	ldr	r1, [r4, #32]
 800a12a:	4628      	mov	r0, r5
 800a12c:	47b0      	blx	r6
 800a12e:	1c43      	adds	r3, r0, #1
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	d106      	bne.n	800a142 <__sflush_r+0x66>
 800a134:	6829      	ldr	r1, [r5, #0]
 800a136:	291d      	cmp	r1, #29
 800a138:	d82c      	bhi.n	800a194 <__sflush_r+0xb8>
 800a13a:	4a2a      	ldr	r2, [pc, #168]	; (800a1e4 <__sflush_r+0x108>)
 800a13c:	40ca      	lsrs	r2, r1
 800a13e:	07d6      	lsls	r6, r2, #31
 800a140:	d528      	bpl.n	800a194 <__sflush_r+0xb8>
 800a142:	2200      	movs	r2, #0
 800a144:	6062      	str	r2, [r4, #4]
 800a146:	04d9      	lsls	r1, r3, #19
 800a148:	6922      	ldr	r2, [r4, #16]
 800a14a:	6022      	str	r2, [r4, #0]
 800a14c:	d504      	bpl.n	800a158 <__sflush_r+0x7c>
 800a14e:	1c42      	adds	r2, r0, #1
 800a150:	d101      	bne.n	800a156 <__sflush_r+0x7a>
 800a152:	682b      	ldr	r3, [r5, #0]
 800a154:	b903      	cbnz	r3, 800a158 <__sflush_r+0x7c>
 800a156:	6560      	str	r0, [r4, #84]	; 0x54
 800a158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a15a:	602f      	str	r7, [r5, #0]
 800a15c:	2900      	cmp	r1, #0
 800a15e:	d0ca      	beq.n	800a0f6 <__sflush_r+0x1a>
 800a160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a164:	4299      	cmp	r1, r3
 800a166:	d002      	beq.n	800a16e <__sflush_r+0x92>
 800a168:	4628      	mov	r0, r5
 800a16a:	f7ff faa3 	bl	80096b4 <_free_r>
 800a16e:	2000      	movs	r0, #0
 800a170:	6360      	str	r0, [r4, #52]	; 0x34
 800a172:	e7c1      	b.n	800a0f8 <__sflush_r+0x1c>
 800a174:	6a21      	ldr	r1, [r4, #32]
 800a176:	2301      	movs	r3, #1
 800a178:	4628      	mov	r0, r5
 800a17a:	47b0      	blx	r6
 800a17c:	1c41      	adds	r1, r0, #1
 800a17e:	d1c7      	bne.n	800a110 <__sflush_r+0x34>
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d0c4      	beq.n	800a110 <__sflush_r+0x34>
 800a186:	2b1d      	cmp	r3, #29
 800a188:	d001      	beq.n	800a18e <__sflush_r+0xb2>
 800a18a:	2b16      	cmp	r3, #22
 800a18c:	d101      	bne.n	800a192 <__sflush_r+0xb6>
 800a18e:	602f      	str	r7, [r5, #0]
 800a190:	e7b1      	b.n	800a0f6 <__sflush_r+0x1a>
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a198:	81a3      	strh	r3, [r4, #12]
 800a19a:	e7ad      	b.n	800a0f8 <__sflush_r+0x1c>
 800a19c:	690f      	ldr	r7, [r1, #16]
 800a19e:	2f00      	cmp	r7, #0
 800a1a0:	d0a9      	beq.n	800a0f6 <__sflush_r+0x1a>
 800a1a2:	0793      	lsls	r3, r2, #30
 800a1a4:	680e      	ldr	r6, [r1, #0]
 800a1a6:	bf08      	it	eq
 800a1a8:	694b      	ldreq	r3, [r1, #20]
 800a1aa:	600f      	str	r7, [r1, #0]
 800a1ac:	bf18      	it	ne
 800a1ae:	2300      	movne	r3, #0
 800a1b0:	eba6 0807 	sub.w	r8, r6, r7
 800a1b4:	608b      	str	r3, [r1, #8]
 800a1b6:	f1b8 0f00 	cmp.w	r8, #0
 800a1ba:	dd9c      	ble.n	800a0f6 <__sflush_r+0x1a>
 800a1bc:	6a21      	ldr	r1, [r4, #32]
 800a1be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1c0:	4643      	mov	r3, r8
 800a1c2:	463a      	mov	r2, r7
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	47b0      	blx	r6
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	dc06      	bgt.n	800a1da <__sflush_r+0xfe>
 800a1cc:	89a3      	ldrh	r3, [r4, #12]
 800a1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1d2:	81a3      	strh	r3, [r4, #12]
 800a1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d8:	e78e      	b.n	800a0f8 <__sflush_r+0x1c>
 800a1da:	4407      	add	r7, r0
 800a1dc:	eba8 0800 	sub.w	r8, r8, r0
 800a1e0:	e7e9      	b.n	800a1b6 <__sflush_r+0xda>
 800a1e2:	bf00      	nop
 800a1e4:	20400001 	.word	0x20400001

0800a1e8 <_fflush_r>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	690b      	ldr	r3, [r1, #16]
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	b913      	cbnz	r3, 800a1f8 <_fflush_r+0x10>
 800a1f2:	2500      	movs	r5, #0
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	bd38      	pop	{r3, r4, r5, pc}
 800a1f8:	b118      	cbz	r0, 800a202 <_fflush_r+0x1a>
 800a1fa:	6983      	ldr	r3, [r0, #24]
 800a1fc:	b90b      	cbnz	r3, 800a202 <_fflush_r+0x1a>
 800a1fe:	f7fe f945 	bl	800848c <__sinit>
 800a202:	4b14      	ldr	r3, [pc, #80]	; (800a254 <_fflush_r+0x6c>)
 800a204:	429c      	cmp	r4, r3
 800a206:	d11b      	bne.n	800a240 <_fflush_r+0x58>
 800a208:	686c      	ldr	r4, [r5, #4]
 800a20a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d0ef      	beq.n	800a1f2 <_fflush_r+0xa>
 800a212:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a214:	07d0      	lsls	r0, r2, #31
 800a216:	d404      	bmi.n	800a222 <_fflush_r+0x3a>
 800a218:	0599      	lsls	r1, r3, #22
 800a21a:	d402      	bmi.n	800a222 <_fflush_r+0x3a>
 800a21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a21e:	f7fe fd46 	bl	8008cae <__retarget_lock_acquire_recursive>
 800a222:	4628      	mov	r0, r5
 800a224:	4621      	mov	r1, r4
 800a226:	f7ff ff59 	bl	800a0dc <__sflush_r>
 800a22a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a22c:	07da      	lsls	r2, r3, #31
 800a22e:	4605      	mov	r5, r0
 800a230:	d4e0      	bmi.n	800a1f4 <_fflush_r+0xc>
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	059b      	lsls	r3, r3, #22
 800a236:	d4dd      	bmi.n	800a1f4 <_fflush_r+0xc>
 800a238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a23a:	f7fe fd39 	bl	8008cb0 <__retarget_lock_release_recursive>
 800a23e:	e7d9      	b.n	800a1f4 <_fflush_r+0xc>
 800a240:	4b05      	ldr	r3, [pc, #20]	; (800a258 <_fflush_r+0x70>)
 800a242:	429c      	cmp	r4, r3
 800a244:	d101      	bne.n	800a24a <_fflush_r+0x62>
 800a246:	68ac      	ldr	r4, [r5, #8]
 800a248:	e7df      	b.n	800a20a <_fflush_r+0x22>
 800a24a:	4b04      	ldr	r3, [pc, #16]	; (800a25c <_fflush_r+0x74>)
 800a24c:	429c      	cmp	r4, r3
 800a24e:	bf08      	it	eq
 800a250:	68ec      	ldreq	r4, [r5, #12]
 800a252:	e7da      	b.n	800a20a <_fflush_r+0x22>
 800a254:	0800a7b4 	.word	0x0800a7b4
 800a258:	0800a7d4 	.word	0x0800a7d4
 800a25c:	0800a794 	.word	0x0800a794

0800a260 <fiprintf>:
 800a260:	b40e      	push	{r1, r2, r3}
 800a262:	b503      	push	{r0, r1, lr}
 800a264:	4601      	mov	r1, r0
 800a266:	ab03      	add	r3, sp, #12
 800a268:	4805      	ldr	r0, [pc, #20]	; (800a280 <fiprintf+0x20>)
 800a26a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a26e:	6800      	ldr	r0, [r0, #0]
 800a270:	9301      	str	r3, [sp, #4]
 800a272:	f7ff fc85 	bl	8009b80 <_vfiprintf_r>
 800a276:	b002      	add	sp, #8
 800a278:	f85d eb04 	ldr.w	lr, [sp], #4
 800a27c:	b003      	add	sp, #12
 800a27e:	4770      	bx	lr
 800a280:	2000000c 	.word	0x2000000c

0800a284 <_lseek_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d07      	ldr	r5, [pc, #28]	; (800a2a4 <_lseek_r+0x20>)
 800a288:	4604      	mov	r4, r0
 800a28a:	4608      	mov	r0, r1
 800a28c:	4611      	mov	r1, r2
 800a28e:	2200      	movs	r2, #0
 800a290:	602a      	str	r2, [r5, #0]
 800a292:	461a      	mov	r2, r3
 800a294:	f7f7 fb1e 	bl	80018d4 <_lseek>
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	d102      	bne.n	800a2a2 <_lseek_r+0x1e>
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	b103      	cbz	r3, 800a2a2 <_lseek_r+0x1e>
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}
 800a2a4:	20000444 	.word	0x20000444

0800a2a8 <__swhatbuf_r>:
 800a2a8:	b570      	push	{r4, r5, r6, lr}
 800a2aa:	460e      	mov	r6, r1
 800a2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b0:	2900      	cmp	r1, #0
 800a2b2:	b096      	sub	sp, #88	; 0x58
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	461d      	mov	r5, r3
 800a2b8:	da08      	bge.n	800a2cc <__swhatbuf_r+0x24>
 800a2ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	602a      	str	r2, [r5, #0]
 800a2c2:	061a      	lsls	r2, r3, #24
 800a2c4:	d410      	bmi.n	800a2e8 <__swhatbuf_r+0x40>
 800a2c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ca:	e00e      	b.n	800a2ea <__swhatbuf_r+0x42>
 800a2cc:	466a      	mov	r2, sp
 800a2ce:	f000 f8c1 	bl	800a454 <_fstat_r>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	dbf1      	blt.n	800a2ba <__swhatbuf_r+0x12>
 800a2d6:	9a01      	ldr	r2, [sp, #4]
 800a2d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a2dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a2e0:	425a      	negs	r2, r3
 800a2e2:	415a      	adcs	r2, r3
 800a2e4:	602a      	str	r2, [r5, #0]
 800a2e6:	e7ee      	b.n	800a2c6 <__swhatbuf_r+0x1e>
 800a2e8:	2340      	movs	r3, #64	; 0x40
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	b016      	add	sp, #88	; 0x58
 800a2f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2f4 <__smakebuf_r>:
 800a2f4:	898b      	ldrh	r3, [r1, #12]
 800a2f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2f8:	079d      	lsls	r5, r3, #30
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	460c      	mov	r4, r1
 800a2fe:	d507      	bpl.n	800a310 <__smakebuf_r+0x1c>
 800a300:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	6123      	str	r3, [r4, #16]
 800a308:	2301      	movs	r3, #1
 800a30a:	6163      	str	r3, [r4, #20]
 800a30c:	b002      	add	sp, #8
 800a30e:	bd70      	pop	{r4, r5, r6, pc}
 800a310:	ab01      	add	r3, sp, #4
 800a312:	466a      	mov	r2, sp
 800a314:	f7ff ffc8 	bl	800a2a8 <__swhatbuf_r>
 800a318:	9900      	ldr	r1, [sp, #0]
 800a31a:	4605      	mov	r5, r0
 800a31c:	4630      	mov	r0, r6
 800a31e:	f7ff fa35 	bl	800978c <_malloc_r>
 800a322:	b948      	cbnz	r0, 800a338 <__smakebuf_r+0x44>
 800a324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a328:	059a      	lsls	r2, r3, #22
 800a32a:	d4ef      	bmi.n	800a30c <__smakebuf_r+0x18>
 800a32c:	f023 0303 	bic.w	r3, r3, #3
 800a330:	f043 0302 	orr.w	r3, r3, #2
 800a334:	81a3      	strh	r3, [r4, #12]
 800a336:	e7e3      	b.n	800a300 <__smakebuf_r+0xc>
 800a338:	4b0d      	ldr	r3, [pc, #52]	; (800a370 <__smakebuf_r+0x7c>)
 800a33a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	6020      	str	r0, [r4, #0]
 800a340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a344:	81a3      	strh	r3, [r4, #12]
 800a346:	9b00      	ldr	r3, [sp, #0]
 800a348:	6163      	str	r3, [r4, #20]
 800a34a:	9b01      	ldr	r3, [sp, #4]
 800a34c:	6120      	str	r0, [r4, #16]
 800a34e:	b15b      	cbz	r3, 800a368 <__smakebuf_r+0x74>
 800a350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a354:	4630      	mov	r0, r6
 800a356:	f000 f88f 	bl	800a478 <_isatty_r>
 800a35a:	b128      	cbz	r0, 800a368 <__smakebuf_r+0x74>
 800a35c:	89a3      	ldrh	r3, [r4, #12]
 800a35e:	f023 0303 	bic.w	r3, r3, #3
 800a362:	f043 0301 	orr.w	r3, r3, #1
 800a366:	81a3      	strh	r3, [r4, #12]
 800a368:	89a0      	ldrh	r0, [r4, #12]
 800a36a:	4305      	orrs	r5, r0
 800a36c:	81a5      	strh	r5, [r4, #12]
 800a36e:	e7cd      	b.n	800a30c <__smakebuf_r+0x18>
 800a370:	08008425 	.word	0x08008425

0800a374 <memmove>:
 800a374:	4288      	cmp	r0, r1
 800a376:	b510      	push	{r4, lr}
 800a378:	eb01 0402 	add.w	r4, r1, r2
 800a37c:	d902      	bls.n	800a384 <memmove+0x10>
 800a37e:	4284      	cmp	r4, r0
 800a380:	4623      	mov	r3, r4
 800a382:	d807      	bhi.n	800a394 <memmove+0x20>
 800a384:	1e43      	subs	r3, r0, #1
 800a386:	42a1      	cmp	r1, r4
 800a388:	d008      	beq.n	800a39c <memmove+0x28>
 800a38a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a38e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a392:	e7f8      	b.n	800a386 <memmove+0x12>
 800a394:	4402      	add	r2, r0
 800a396:	4601      	mov	r1, r0
 800a398:	428a      	cmp	r2, r1
 800a39a:	d100      	bne.n	800a39e <memmove+0x2a>
 800a39c:	bd10      	pop	{r4, pc}
 800a39e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3a6:	e7f7      	b.n	800a398 <memmove+0x24>

0800a3a8 <__malloc_lock>:
 800a3a8:	4801      	ldr	r0, [pc, #4]	; (800a3b0 <__malloc_lock+0x8>)
 800a3aa:	f7fe bc80 	b.w	8008cae <__retarget_lock_acquire_recursive>
 800a3ae:	bf00      	nop
 800a3b0:	20000438 	.word	0x20000438

0800a3b4 <__malloc_unlock>:
 800a3b4:	4801      	ldr	r0, [pc, #4]	; (800a3bc <__malloc_unlock+0x8>)
 800a3b6:	f7fe bc7b 	b.w	8008cb0 <__retarget_lock_release_recursive>
 800a3ba:	bf00      	nop
 800a3bc:	20000438 	.word	0x20000438

0800a3c0 <_realloc_r>:
 800a3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c4:	4680      	mov	r8, r0
 800a3c6:	4614      	mov	r4, r2
 800a3c8:	460e      	mov	r6, r1
 800a3ca:	b921      	cbnz	r1, 800a3d6 <_realloc_r+0x16>
 800a3cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	f7ff b9db 	b.w	800978c <_malloc_r>
 800a3d6:	b92a      	cbnz	r2, 800a3e4 <_realloc_r+0x24>
 800a3d8:	f7ff f96c 	bl	80096b4 <_free_r>
 800a3dc:	4625      	mov	r5, r4
 800a3de:	4628      	mov	r0, r5
 800a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e4:	f000 f858 	bl	800a498 <_malloc_usable_size_r>
 800a3e8:	4284      	cmp	r4, r0
 800a3ea:	4607      	mov	r7, r0
 800a3ec:	d802      	bhi.n	800a3f4 <_realloc_r+0x34>
 800a3ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3f2:	d812      	bhi.n	800a41a <_realloc_r+0x5a>
 800a3f4:	4621      	mov	r1, r4
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	f7ff f9c8 	bl	800978c <_malloc_r>
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d0ed      	beq.n	800a3de <_realloc_r+0x1e>
 800a402:	42bc      	cmp	r4, r7
 800a404:	4622      	mov	r2, r4
 800a406:	4631      	mov	r1, r6
 800a408:	bf28      	it	cs
 800a40a:	463a      	movcs	r2, r7
 800a40c:	f7fe fc6c 	bl	8008ce8 <memcpy>
 800a410:	4631      	mov	r1, r6
 800a412:	4640      	mov	r0, r8
 800a414:	f7ff f94e 	bl	80096b4 <_free_r>
 800a418:	e7e1      	b.n	800a3de <_realloc_r+0x1e>
 800a41a:	4635      	mov	r5, r6
 800a41c:	e7df      	b.n	800a3de <_realloc_r+0x1e>
	...

0800a420 <_read_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d07      	ldr	r5, [pc, #28]	; (800a440 <_read_r+0x20>)
 800a424:	4604      	mov	r4, r0
 800a426:	4608      	mov	r0, r1
 800a428:	4611      	mov	r1, r2
 800a42a:	2200      	movs	r2, #0
 800a42c:	602a      	str	r2, [r5, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	f7f7 f9f0 	bl	8001814 <_read>
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d102      	bne.n	800a43e <_read_r+0x1e>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	b103      	cbz	r3, 800a43e <_read_r+0x1e>
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	20000444 	.word	0x20000444

0800a444 <abort>:
 800a444:	b508      	push	{r3, lr}
 800a446:	2006      	movs	r0, #6
 800a448:	f000 f856 	bl	800a4f8 <raise>
 800a44c:	2001      	movs	r0, #1
 800a44e:	f7f7 f9d7 	bl	8001800 <_exit>
	...

0800a454 <_fstat_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4d07      	ldr	r5, [pc, #28]	; (800a474 <_fstat_r+0x20>)
 800a458:	2300      	movs	r3, #0
 800a45a:	4604      	mov	r4, r0
 800a45c:	4608      	mov	r0, r1
 800a45e:	4611      	mov	r1, r2
 800a460:	602b      	str	r3, [r5, #0]
 800a462:	f7f7 fa1c 	bl	800189e <_fstat>
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	d102      	bne.n	800a470 <_fstat_r+0x1c>
 800a46a:	682b      	ldr	r3, [r5, #0]
 800a46c:	b103      	cbz	r3, 800a470 <_fstat_r+0x1c>
 800a46e:	6023      	str	r3, [r4, #0]
 800a470:	bd38      	pop	{r3, r4, r5, pc}
 800a472:	bf00      	nop
 800a474:	20000444 	.word	0x20000444

0800a478 <_isatty_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4d06      	ldr	r5, [pc, #24]	; (800a494 <_isatty_r+0x1c>)
 800a47c:	2300      	movs	r3, #0
 800a47e:	4604      	mov	r4, r0
 800a480:	4608      	mov	r0, r1
 800a482:	602b      	str	r3, [r5, #0]
 800a484:	f7f7 fa1b 	bl	80018be <_isatty>
 800a488:	1c43      	adds	r3, r0, #1
 800a48a:	d102      	bne.n	800a492 <_isatty_r+0x1a>
 800a48c:	682b      	ldr	r3, [r5, #0]
 800a48e:	b103      	cbz	r3, 800a492 <_isatty_r+0x1a>
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	bd38      	pop	{r3, r4, r5, pc}
 800a494:	20000444 	.word	0x20000444

0800a498 <_malloc_usable_size_r>:
 800a498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a49c:	1f18      	subs	r0, r3, #4
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	bfbc      	itt	lt
 800a4a2:	580b      	ldrlt	r3, [r1, r0]
 800a4a4:	18c0      	addlt	r0, r0, r3
 800a4a6:	4770      	bx	lr

0800a4a8 <_raise_r>:
 800a4a8:	291f      	cmp	r1, #31
 800a4aa:	b538      	push	{r3, r4, r5, lr}
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	460d      	mov	r5, r1
 800a4b0:	d904      	bls.n	800a4bc <_raise_r+0x14>
 800a4b2:	2316      	movs	r3, #22
 800a4b4:	6003      	str	r3, [r0, #0]
 800a4b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}
 800a4bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4be:	b112      	cbz	r2, 800a4c6 <_raise_r+0x1e>
 800a4c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4c4:	b94b      	cbnz	r3, 800a4da <_raise_r+0x32>
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	f000 f830 	bl	800a52c <_getpid_r>
 800a4cc:	462a      	mov	r2, r5
 800a4ce:	4601      	mov	r1, r0
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4d6:	f000 b817 	b.w	800a508 <_kill_r>
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d00a      	beq.n	800a4f4 <_raise_r+0x4c>
 800a4de:	1c59      	adds	r1, r3, #1
 800a4e0:	d103      	bne.n	800a4ea <_raise_r+0x42>
 800a4e2:	2316      	movs	r3, #22
 800a4e4:	6003      	str	r3, [r0, #0]
 800a4e6:	2001      	movs	r0, #1
 800a4e8:	e7e7      	b.n	800a4ba <_raise_r+0x12>
 800a4ea:	2400      	movs	r4, #0
 800a4ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	4798      	blx	r3
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	e7e0      	b.n	800a4ba <_raise_r+0x12>

0800a4f8 <raise>:
 800a4f8:	4b02      	ldr	r3, [pc, #8]	; (800a504 <raise+0xc>)
 800a4fa:	4601      	mov	r1, r0
 800a4fc:	6818      	ldr	r0, [r3, #0]
 800a4fe:	f7ff bfd3 	b.w	800a4a8 <_raise_r>
 800a502:	bf00      	nop
 800a504:	2000000c 	.word	0x2000000c

0800a508 <_kill_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4d07      	ldr	r5, [pc, #28]	; (800a528 <_kill_r+0x20>)
 800a50c:	2300      	movs	r3, #0
 800a50e:	4604      	mov	r4, r0
 800a510:	4608      	mov	r0, r1
 800a512:	4611      	mov	r1, r2
 800a514:	602b      	str	r3, [r5, #0]
 800a516:	f7f7 f963 	bl	80017e0 <_kill>
 800a51a:	1c43      	adds	r3, r0, #1
 800a51c:	d102      	bne.n	800a524 <_kill_r+0x1c>
 800a51e:	682b      	ldr	r3, [r5, #0]
 800a520:	b103      	cbz	r3, 800a524 <_kill_r+0x1c>
 800a522:	6023      	str	r3, [r4, #0]
 800a524:	bd38      	pop	{r3, r4, r5, pc}
 800a526:	bf00      	nop
 800a528:	20000444 	.word	0x20000444

0800a52c <_getpid_r>:
 800a52c:	f7f7 b950 	b.w	80017d0 <_getpid>

0800a530 <_init>:
 800a530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a532:	bf00      	nop
 800a534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a536:	bc08      	pop	{r3}
 800a538:	469e      	mov	lr, r3
 800a53a:	4770      	bx	lr

0800a53c <_fini>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	bf00      	nop
 800a540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a542:	bc08      	pop	{r3}
 800a544:	469e      	mov	lr, r3
 800a546:	4770      	bx	lr
